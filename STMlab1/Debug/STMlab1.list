
STMlab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c54  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08005e24  08005e24  00015e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e78  08005e78  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005e78  08005e78  00015e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e80  08005e80  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e80  08005e80  00015e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e84  08005e84  00015e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005e88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b4  20000070  08005ef8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000624  08005ef8  00020624  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018364  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a56  00000000  00000000  00038404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  0003ae60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001128  00000000  00000000  0003c090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028605  00000000  00000000  0003d1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000160ca  00000000  00000000  000657bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001016d8  00000000  00000000  0007b887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017cf5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051b4  00000000  00000000  0017cfb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005e0c 	.word	0x08005e0c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005e0c 	.word	0x08005e0c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f000 fd66 	bl	800108c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f81e 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 f9ea 	bl	800099c <MX_GPIO_Init>
  MX_ETH_Init();
 80005c8:	f000 f8fc 	bl	80007c4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005cc:	f000 f988 	bl	80008e0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005d0:	f000 f9b6 	bl	8000940 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80005d4:	f000 f8a4 	bl	8000720 <MX_ADC1_Init>
  MX_TIM2_Init();
 80005d8:	f000 f934 	bl	8000844 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2); //se debe inicializar timer
 80005dc:	4805      	ldr	r0, [pc, #20]	; (80005f4 <main+0x3c>)
 80005de:	f003 fb79 	bl	8003cd4 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  pulse=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 80005e2:	2101      	movs	r1, #1
 80005e4:	4804      	ldr	r0, [pc, #16]	; (80005f8 <main+0x40>)
 80005e6:	f002 f8fd 	bl	80027e4 <HAL_GPIO_ReadPin>
 80005ea:	4603      	mov	r3, r0
 80005ec:	461a      	mov	r2, r3
 80005ee:	4b03      	ldr	r3, [pc, #12]	; (80005fc <main+0x44>)
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	e7f6      	b.n	80005e2 <main+0x2a>
 80005f4:	2000057c 	.word	0x2000057c
 80005f8:	40020400 	.word	0x40020400
 80005fc:	20000578 	.word	0x20000578

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b0b4      	sub	sp, #208	; 0xd0
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800060a:	2230      	movs	r2, #48	; 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f004 ffc6 	bl	80055a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000624:	f107 0308 	add.w	r3, r7, #8
 8000628:	2284      	movs	r2, #132	; 0x84
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f004 ffb7 	bl	80055a0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000632:	f002 fa51 	bl	8002ad8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000636:	4b37      	ldr	r3, [pc, #220]	; (8000714 <SystemClock_Config+0x114>)
 8000638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063a:	4a36      	ldr	r2, [pc, #216]	; (8000714 <SystemClock_Config+0x114>)
 800063c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000640:	6413      	str	r3, [r2, #64]	; 0x40
 8000642:	4b34      	ldr	r3, [pc, #208]	; (8000714 <SystemClock_Config+0x114>)
 8000644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800064e:	4b32      	ldr	r3, [pc, #200]	; (8000718 <SystemClock_Config+0x118>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000656:	4a30      	ldr	r2, [pc, #192]	; (8000718 <SystemClock_Config+0x118>)
 8000658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065c:	6013      	str	r3, [r2, #0]
 800065e:	4b2e      	ldr	r3, [pc, #184]	; (8000718 <SystemClock_Config+0x118>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800066a:	2301      	movs	r3, #1
 800066c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000670:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000674:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000678:	2302      	movs	r3, #2
 800067a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000682:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000686:	2304      	movs	r3, #4
 8000688:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 800068c:	2348      	movs	r3, #72	; 0x48
 800068e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000692:	2302      	movs	r3, #2
 8000694:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000698:	2303      	movs	r3, #3
 800069a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 fa28 	bl	8002af8 <HAL_RCC_OscConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80006ae:	f000 fa5b 	bl	8000b68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b2:	230f      	movs	r3, #15
 80006b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	2302      	movs	r3, #2
 80006ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006d6:	2102      	movs	r1, #2
 80006d8:	4618      	mov	r0, r3
 80006da:	f002 fcb1 	bl	8003040 <HAL_RCC_ClockConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80006e4:	f000 fa40 	bl	8000b68 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <SystemClock_Config+0x11c>)
 80006ea:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006f6:	f107 0308 	add.w	r3, r7, #8
 80006fa:	4618      	mov	r0, r3
 80006fc:	f002 fea2 	bl	8003444 <HAL_RCCEx_PeriphCLKConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8000706:	f000 fa2f 	bl	8000b68 <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	37d0      	adds	r7, #208	; 0xd0
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000
 800071c:	00200100 	.word	0x00200100

08000720 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000726:	463b      	mov	r3, r7
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000732:	4b21      	ldr	r3, [pc, #132]	; (80007b8 <MX_ADC1_Init+0x98>)
 8000734:	4a21      	ldr	r2, [pc, #132]	; (80007bc <MX_ADC1_Init+0x9c>)
 8000736:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000738:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <MX_ADC1_Init+0x98>)
 800073a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800073e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000740:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <MX_ADC1_Init+0x98>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000746:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <MX_ADC1_Init+0x98>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800074c:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <MX_ADC1_Init+0x98>)
 800074e:	2200      	movs	r2, #0
 8000750:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000752:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <MX_ADC1_Init+0x98>)
 8000754:	2200      	movs	r2, #0
 8000756:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800075a:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_ADC1_Init+0x98>)
 800075c:	2200      	movs	r2, #0
 800075e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000760:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <MX_ADC1_Init+0x98>)
 8000762:	4a17      	ldr	r2, [pc, #92]	; (80007c0 <MX_ADC1_Init+0xa0>)
 8000764:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_ADC1_Init+0x98>)
 8000768:	2200      	movs	r2, #0
 800076a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_ADC1_Init+0x98>)
 800076e:	2201      	movs	r2, #1
 8000770:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_ADC1_Init+0x98>)
 8000774:	2200      	movs	r2, #0
 8000776:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_ADC1_Init+0x98>)
 800077c:	2201      	movs	r2, #1
 800077e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000780:	480d      	ldr	r0, [pc, #52]	; (80007b8 <MX_ADC1_Init+0x98>)
 8000782:	f000 fd0d 	bl	80011a0 <HAL_ADC_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800078c:	f000 f9ec 	bl	8000b68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000790:	2300      	movs	r3, #0
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000794:	2301      	movs	r3, #1
 8000796:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000798:	2301      	movs	r3, #1
 800079a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079c:	463b      	mov	r3, r7
 800079e:	4619      	mov	r1, r3
 80007a0:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_ADC1_Init+0x98>)
 80007a2:	f000 fea7 	bl	80014f4 <HAL_ADC_ConfigChannel>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007ac:	f000 f9dc 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000530 	.word	0x20000530
 80007bc:	40012000 	.word	0x40012000
 80007c0:	0f000001 	.word	0x0f000001

080007c4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007c8:	4b1c      	ldr	r3, [pc, #112]	; (800083c <MX_ETH_Init+0x78>)
 80007ca:	4a1d      	ldr	r2, [pc, #116]	; (8000840 <MX_ETH_Init+0x7c>)
 80007cc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80007ce:	4b1b      	ldr	r3, [pc, #108]	; (800083c <MX_ETH_Init+0x78>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80007d4:	4b19      	ldr	r3, [pc, #100]	; (800083c <MX_ETH_Init+0x78>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <MX_ETH_Init+0x78>)
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	2200      	movs	r2, #0
 80007e0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80007e2:	4b16      	ldr	r3, [pc, #88]	; (800083c <MX_ETH_Init+0x78>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	3301      	adds	r3, #1
 80007e8:	2280      	movs	r2, #128	; 0x80
 80007ea:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80007ec:	4b13      	ldr	r3, [pc, #76]	; (800083c <MX_ETH_Init+0x78>)
 80007ee:	695b      	ldr	r3, [r3, #20]
 80007f0:	3302      	adds	r3, #2
 80007f2:	22e1      	movs	r2, #225	; 0xe1
 80007f4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_ETH_Init+0x78>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	3303      	adds	r3, #3
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000800:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_ETH_Init+0x78>)
 8000802:	695b      	ldr	r3, [r3, #20]
 8000804:	3304      	adds	r3, #4
 8000806:	2200      	movs	r2, #0
 8000808:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_ETH_Init+0x78>)
 800080c:	695b      	ldr	r3, [r3, #20]
 800080e:	3305      	adds	r3, #5
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_ETH_Init+0x78>)
 8000816:	2200      	movs	r2, #0
 8000818:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <MX_ETH_Init+0x78>)
 800081c:	2200      	movs	r2, #0
 800081e:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_ETH_Init+0x78>)
 8000822:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000826:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000828:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_ETH_Init+0x78>)
 800082a:	f001 f9c5 	bl	8001bb8 <HAL_ETH_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000834:	f000 f998 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	200005c8 	.word	0x200005c8
 8000840:	40028000 	.word	0x40028000

08000844 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800084a:	f107 0310 	add.w	r3, r7, #16
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000862:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <MX_TIM2_Init+0x94>)
 8000864:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000868:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800086a:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <MX_TIM2_Init+0x94>)
 800086c:	2247      	movs	r2, #71	; 0x47
 800086e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000870:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <MX_TIM2_Init+0x94>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500000;
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <MX_TIM2_Init+0x94>)
 8000878:	4a18      	ldr	r2, [pc, #96]	; (80008dc <MX_TIM2_Init+0x98>)
 800087a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087c:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <MX_TIM2_Init+0x94>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <MX_TIM2_Init+0x94>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000888:	4813      	ldr	r0, [pc, #76]	; (80008d8 <MX_TIM2_Init+0x94>)
 800088a:	f003 f9cb 	bl	8003c24 <HAL_TIM_Base_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000894:	f000 f968 	bl	8000b68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800089c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800089e:	f107 0310 	add.w	r3, r7, #16
 80008a2:	4619      	mov	r1, r3
 80008a4:	480c      	ldr	r0, [pc, #48]	; (80008d8 <MX_TIM2_Init+0x94>)
 80008a6:	f003 fbad 	bl	8004004 <HAL_TIM_ConfigClockSource>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008b0:	f000 f95a 	bl	8000b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b4:	2300      	movs	r3, #0
 80008b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	4619      	mov	r1, r3
 80008c0:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_TIM2_Init+0x94>)
 80008c2:	f003 fdcb 	bl	800445c <HAL_TIMEx_MasterConfigSynchronization>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008cc:	f000 f94c 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	3720      	adds	r7, #32
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	2000057c 	.word	0x2000057c
 80008dc:	0007a120 	.word	0x0007a120

080008e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008e4:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_USART3_UART_Init+0x58>)
 80008e6:	4a15      	ldr	r2, [pc, #84]	; (800093c <MX_USART3_UART_Init+0x5c>)
 80008e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ea:	4b13      	ldr	r3, [pc, #76]	; (8000938 <MX_USART3_UART_Init+0x58>)
 80008ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_USART3_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_USART3_UART_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_USART3_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_USART3_UART_Init+0x58>)
 8000906:	220c      	movs	r2, #12
 8000908:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_USART3_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_USART3_UART_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <MX_USART3_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_USART3_UART_Init+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_USART3_UART_Init+0x58>)
 8000924:	f003 fe46 	bl	80045b4 <HAL_UART_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800092e:	f000 f91b 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000098 	.word	0x20000098
 800093c:	40004800 	.word	0x40004800

08000940 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000946:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800094a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094e:	2206      	movs	r2, #6
 8000950:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000954:	2202      	movs	r2, #2
 8000956:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000960:	2202      	movs	r2, #2
 8000962:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000966:	2201      	movs	r2, #1
 8000968:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000978:	2201      	movs	r2, #1
 800097a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097e:	2200      	movs	r2, #0
 8000980:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000984:	f001 ff5f 	bl	8002846 <HAL_PCD_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800098e:	f000 f8eb 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	2000011c 	.word	0x2000011c

0800099c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08c      	sub	sp, #48	; 0x30
 80009a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b2:	4b47      	ldr	r3, [pc, #284]	; (8000ad0 <MX_GPIO_Init+0x134>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a46      	ldr	r2, [pc, #280]	; (8000ad0 <MX_GPIO_Init+0x134>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b44      	ldr	r3, [pc, #272]	; (8000ad0 <MX_GPIO_Init+0x134>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ca:	4b41      	ldr	r3, [pc, #260]	; (8000ad0 <MX_GPIO_Init+0x134>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a40      	ldr	r2, [pc, #256]	; (8000ad0 <MX_GPIO_Init+0x134>)
 80009d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b3e      	ldr	r3, [pc, #248]	; (8000ad0 <MX_GPIO_Init+0x134>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	4b3b      	ldr	r3, [pc, #236]	; (8000ad0 <MX_GPIO_Init+0x134>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a3a      	ldr	r2, [pc, #232]	; (8000ad0 <MX_GPIO_Init+0x134>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b38      	ldr	r3, [pc, #224]	; (8000ad0 <MX_GPIO_Init+0x134>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	4b35      	ldr	r3, [pc, #212]	; (8000ad0 <MX_GPIO_Init+0x134>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a34      	ldr	r2, [pc, #208]	; (8000ad0 <MX_GPIO_Init+0x134>)
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b32      	ldr	r3, [pc, #200]	; (8000ad0 <MX_GPIO_Init+0x134>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a12:	4b2f      	ldr	r3, [pc, #188]	; (8000ad0 <MX_GPIO_Init+0x134>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a2e      	ldr	r2, [pc, #184]	; (8000ad0 <MX_GPIO_Init+0x134>)
 8000a18:	f043 0308 	orr.w	r3, r3, #8
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b2c      	ldr	r3, [pc, #176]	; (8000ad0 <MX_GPIO_Init+0x134>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0308 	and.w	r3, r3, #8
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a2a:	4b29      	ldr	r3, [pc, #164]	; (8000ad0 <MX_GPIO_Init+0x134>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a28      	ldr	r2, [pc, #160]	; (8000ad0 <MX_GPIO_Init+0x134>)
 8000a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b26      	ldr	r3, [pc, #152]	; (8000ad0 <MX_GPIO_Init+0x134>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a48:	4822      	ldr	r0, [pc, #136]	; (8000ad4 <MX_GPIO_Init+0x138>)
 8000a4a:	f001 fee3 	bl	8002814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2140      	movs	r1, #64	; 0x40
 8000a52:	4821      	ldr	r0, [pc, #132]	; (8000ad8 <MX_GPIO_Init+0x13c>)
 8000a54:	f001 fede 	bl	8002814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a5e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	481b      	ldr	r0, [pc, #108]	; (8000adc <MX_GPIO_Init+0x140>)
 8000a70:	f001 fd0c 	bl	800248c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a74:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4811      	ldr	r0, [pc, #68]	; (8000ad4 <MX_GPIO_Init+0x138>)
 8000a8e:	f001 fcfd 	bl	800248c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a92:	2340      	movs	r3, #64	; 0x40
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480b      	ldr	r0, [pc, #44]	; (8000ad8 <MX_GPIO_Init+0x13c>)
 8000aaa:	f001 fcef 	bl	800248c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000aae:	2380      	movs	r3, #128	; 0x80
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_GPIO_Init+0x13c>)
 8000ac2:	f001 fce3 	bl	800248c <HAL_GPIO_Init>

}
 8000ac6:	bf00      	nop
 8000ac8:	3730      	adds	r7, #48	; 0x30
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020400 	.word	0x40020400
 8000ad8:	40021800 	.word	0x40021800
 8000adc:	40020800 	.word	0x40020800

08000ae0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  if(htim==&htim2){
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a18      	ldr	r2, [pc, #96]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d129      	bne.n	8000b44 <HAL_TIM_PeriodElapsedCallback+0x64>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000af0:	2201      	movs	r2, #1
 8000af2:	2101      	movs	r1, #1
 8000af4:	4816      	ldr	r0, [pc, #88]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000af6:	f001 fe8d 	bl	8002814 <HAL_GPIO_WritePin>
	  HAL_ADC_Start(&hadc1);
 8000afa:	4816      	ldr	r0, [pc, #88]	; (8000b54 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000afc:	f000 fb94 	bl	8001228 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000b00:	f04f 31ff 	mov.w	r1, #4294967295
 8000b04:	4813      	ldr	r0, [pc, #76]	; (8000b54 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000b06:	f000 fc5d 	bl	80013c4 <HAL_ADC_PollForConversion>
	  adc_value = HAL_ADC_GetValue(&hadc1);
 8000b0a:	4812      	ldr	r0, [pc, #72]	; (8000b54 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000b0c:	f000 fce5 	bl	80014da <HAL_ADC_GetValue>
 8000b10:	4603      	mov	r3, r0
 8000b12:	4a11      	ldr	r2, [pc, #68]	; (8000b58 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000b14:	6013      	str	r3, [r2, #0]

	  sprintf(message, "%hu\r\n",(int)adc_value);
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	490f      	ldr	r1, [pc, #60]	; (8000b5c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000b1e:	4810      	ldr	r0, [pc, #64]	; (8000b60 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000b20:	f004 fd46 	bl	80055b0 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000b24:	480e      	ldr	r0, [pc, #56]	; (8000b60 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000b26:	f7ff fb73 	bl	8000210 <strlen>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	b29a      	uxth	r2, r3
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b32:	490b      	ldr	r1, [pc, #44]	; (8000b60 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000b34:	480b      	ldr	r0, [pc, #44]	; (8000b64 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000b36:	f003 fd8b 	bl	8004650 <HAL_UART_Transmit>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	4804      	ldr	r0, [pc, #16]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000b40:	f001 fe68 	bl	8002814 <HAL_GPIO_WritePin>
  }
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	2000057c 	.word	0x2000057c
 8000b50:	40020400 	.word	0x40020400
 8000b54:	20000530 	.word	0x20000530
 8000b58:	2000052c 	.word	0x2000052c
 8000b5c:	08005e24 	.word	0x08005e24
 8000b60:	20000520 	.word	0x20000520
 8000b64:	20000098 	.word	0x20000098

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
	...

08000b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <HAL_MspInit+0x44>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <HAL_MspInit+0x44>)
 8000b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b88:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <HAL_MspInit+0x44>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <HAL_MspInit+0x44>)
 8000b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9a:	4a08      	ldr	r2, [pc, #32]	; (8000bbc <HAL_MspInit+0x44>)
 8000b9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_MspInit+0x44>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40023800 	.word	0x40023800

08000bc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	; 0x28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a15      	ldr	r2, [pc, #84]	; (8000c34 <HAL_ADC_MspInit+0x74>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d123      	bne.n	8000c2a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <HAL_ADC_MspInit+0x78>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be6:	4a14      	ldr	r2, [pc, #80]	; (8000c38 <HAL_ADC_MspInit+0x78>)
 8000be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bec:	6453      	str	r3, [r2, #68]	; 0x44
 8000bee:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <HAL_ADC_MspInit+0x78>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <HAL_ADC_MspInit+0x78>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a0e      	ldr	r2, [pc, #56]	; (8000c38 <HAL_ADC_MspInit+0x78>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <HAL_ADC_MspInit+0x78>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c12:	2301      	movs	r3, #1
 8000c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c16:	2303      	movs	r3, #3
 8000c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	4805      	ldr	r0, [pc, #20]	; (8000c3c <HAL_ADC_MspInit+0x7c>)
 8000c26:	f001 fc31 	bl	800248c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c2a:	bf00      	nop
 8000c2c:	3728      	adds	r7, #40	; 0x28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40012000 	.word	0x40012000
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020000 	.word	0x40020000

08000c40 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08e      	sub	sp, #56	; 0x38
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a4e      	ldr	r2, [pc, #312]	; (8000d98 <HAL_ETH_MspInit+0x158>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	f040 8096 	bne.w	8000d90 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000c64:	4b4d      	ldr	r3, [pc, #308]	; (8000d9c <HAL_ETH_MspInit+0x15c>)
 8000c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c68:	4a4c      	ldr	r2, [pc, #304]	; (8000d9c <HAL_ETH_MspInit+0x15c>)
 8000c6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c70:	4b4a      	ldr	r3, [pc, #296]	; (8000d9c <HAL_ETH_MspInit+0x15c>)
 8000c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c78:	623b      	str	r3, [r7, #32]
 8000c7a:	6a3b      	ldr	r3, [r7, #32]
 8000c7c:	4b47      	ldr	r3, [pc, #284]	; (8000d9c <HAL_ETH_MspInit+0x15c>)
 8000c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c80:	4a46      	ldr	r2, [pc, #280]	; (8000d9c <HAL_ETH_MspInit+0x15c>)
 8000c82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c86:	6313      	str	r3, [r2, #48]	; 0x30
 8000c88:	4b44      	ldr	r3, [pc, #272]	; (8000d9c <HAL_ETH_MspInit+0x15c>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c90:	61fb      	str	r3, [r7, #28]
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	4b41      	ldr	r3, [pc, #260]	; (8000d9c <HAL_ETH_MspInit+0x15c>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c98:	4a40      	ldr	r2, [pc, #256]	; (8000d9c <HAL_ETH_MspInit+0x15c>)
 8000c9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca0:	4b3e      	ldr	r3, [pc, #248]	; (8000d9c <HAL_ETH_MspInit+0x15c>)
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ca8:	61bb      	str	r3, [r7, #24]
 8000caa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cac:	4b3b      	ldr	r3, [pc, #236]	; (8000d9c <HAL_ETH_MspInit+0x15c>)
 8000cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb0:	4a3a      	ldr	r2, [pc, #232]	; (8000d9c <HAL_ETH_MspInit+0x15c>)
 8000cb2:	f043 0304 	orr.w	r3, r3, #4
 8000cb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb8:	4b38      	ldr	r3, [pc, #224]	; (8000d9c <HAL_ETH_MspInit+0x15c>)
 8000cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbc:	f003 0304 	and.w	r3, r3, #4
 8000cc0:	617b      	str	r3, [r7, #20]
 8000cc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc4:	4b35      	ldr	r3, [pc, #212]	; (8000d9c <HAL_ETH_MspInit+0x15c>)
 8000cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc8:	4a34      	ldr	r2, [pc, #208]	; (8000d9c <HAL_ETH_MspInit+0x15c>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd0:	4b32      	ldr	r3, [pc, #200]	; (8000d9c <HAL_ETH_MspInit+0x15c>)
 8000cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cdc:	4b2f      	ldr	r3, [pc, #188]	; (8000d9c <HAL_ETH_MspInit+0x15c>)
 8000cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce0:	4a2e      	ldr	r2, [pc, #184]	; (8000d9c <HAL_ETH_MspInit+0x15c>)
 8000ce2:	f043 0302 	orr.w	r3, r3, #2
 8000ce6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce8:	4b2c      	ldr	r3, [pc, #176]	; (8000d9c <HAL_ETH_MspInit+0x15c>)
 8000cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cec:	f003 0302 	and.w	r3, r3, #2
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cf4:	4b29      	ldr	r3, [pc, #164]	; (8000d9c <HAL_ETH_MspInit+0x15c>)
 8000cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf8:	4a28      	ldr	r2, [pc, #160]	; (8000d9c <HAL_ETH_MspInit+0x15c>)
 8000cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cfe:	6313      	str	r3, [r2, #48]	; 0x30
 8000d00:	4b26      	ldr	r3, [pc, #152]	; (8000d9c <HAL_ETH_MspInit+0x15c>)
 8000d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d0c:	2332      	movs	r3, #50	; 0x32
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d1c:	230b      	movs	r3, #11
 8000d1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d24:	4619      	mov	r1, r3
 8000d26:	481e      	ldr	r0, [pc, #120]	; (8000da0 <HAL_ETH_MspInit+0x160>)
 8000d28:	f001 fbb0 	bl	800248c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d2c:	2386      	movs	r3, #134	; 0x86
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d3c:	230b      	movs	r3, #11
 8000d3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d44:	4619      	mov	r1, r3
 8000d46:	4817      	ldr	r0, [pc, #92]	; (8000da4 <HAL_ETH_MspInit+0x164>)
 8000d48:	f001 fba0 	bl	800248c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d5e:	230b      	movs	r3, #11
 8000d60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d66:	4619      	mov	r1, r3
 8000d68:	480f      	ldr	r0, [pc, #60]	; (8000da8 <HAL_ETH_MspInit+0x168>)
 8000d6a:	f001 fb8f 	bl	800248c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d6e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d80:	230b      	movs	r3, #11
 8000d82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4808      	ldr	r0, [pc, #32]	; (8000dac <HAL_ETH_MspInit+0x16c>)
 8000d8c:	f001 fb7e 	bl	800248c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d90:	bf00      	nop
 8000d92:	3738      	adds	r7, #56	; 0x38
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40028000 	.word	0x40028000
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40020800 	.word	0x40020800
 8000da4:	40020000 	.word	0x40020000
 8000da8:	40020400 	.word	0x40020400
 8000dac:	40021800 	.word	0x40021800

08000db0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dc0:	d113      	bne.n	8000dea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <HAL_TIM_Base_MspInit+0x44>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	4a0b      	ldr	r2, [pc, #44]	; (8000df4 <HAL_TIM_Base_MspInit+0x44>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <HAL_TIM_Base_MspInit+0x44>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2100      	movs	r1, #0
 8000dde:	201c      	movs	r0, #28
 8000de0:	f000 feb3 	bl	8001b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000de4:	201c      	movs	r0, #28
 8000de6:	f000 fecc 	bl	8001b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40023800 	.word	0x40023800

08000df8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	; 0x28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a17      	ldr	r2, [pc, #92]	; (8000e74 <HAL_UART_MspInit+0x7c>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d128      	bne.n	8000e6c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <HAL_UART_MspInit+0x80>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	4a16      	ldr	r2, [pc, #88]	; (8000e78 <HAL_UART_MspInit+0x80>)
 8000e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e24:	6413      	str	r3, [r2, #64]	; 0x40
 8000e26:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <HAL_UART_MspInit+0x80>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <HAL_UART_MspInit+0x80>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a10      	ldr	r2, [pc, #64]	; (8000e78 <HAL_UART_MspInit+0x80>)
 8000e38:	f043 0308 	orr.w	r3, r3, #8
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <HAL_UART_MspInit+0x80>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0308 	and.w	r3, r3, #8
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e5c:	2307      	movs	r3, #7
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4619      	mov	r1, r3
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <HAL_UART_MspInit+0x84>)
 8000e68:	f001 fb10 	bl	800248c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e6c:	bf00      	nop
 8000e6e:	3728      	adds	r7, #40	; 0x28
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40004800 	.word	0x40004800
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40020c00 	.word	0x40020c00

08000e80 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08a      	sub	sp, #40	; 0x28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ea0:	d141      	bne.n	8000f26 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	4b23      	ldr	r3, [pc, #140]	; (8000f30 <HAL_PCD_MspInit+0xb0>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a22      	ldr	r2, [pc, #136]	; (8000f30 <HAL_PCD_MspInit+0xb0>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b20      	ldr	r3, [pc, #128]	; (8000f30 <HAL_PCD_MspInit+0xb0>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000eba:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ecc:	230a      	movs	r3, #10
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4817      	ldr	r0, [pc, #92]	; (8000f34 <HAL_PCD_MspInit+0xb4>)
 8000ed8:	f001 fad8 	bl	800248c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000edc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4810      	ldr	r0, [pc, #64]	; (8000f34 <HAL_PCD_MspInit+0xb4>)
 8000ef2:	f001 facb 	bl	800248c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_PCD_MspInit+0xb0>)
 8000ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000efa:	4a0d      	ldr	r2, [pc, #52]	; (8000f30 <HAL_PCD_MspInit+0xb0>)
 8000efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f00:	6353      	str	r3, [r2, #52]	; 0x34
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <HAL_PCD_MspInit+0xb0>)
 8000f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <HAL_PCD_MspInit+0xb0>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	4a07      	ldr	r2, [pc, #28]	; (8000f30 <HAL_PCD_MspInit+0xb0>)
 8000f14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f18:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1a:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <HAL_PCD_MspInit+0xb0>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f26:	bf00      	nop
 8000f28:	3728      	adds	r7, #40	; 0x28
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40020000 	.word	0x40020000

08000f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <HardFault_Handler+0x4>

08000f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <MemManage_Handler+0x4>

08000f52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <BusFault_Handler+0x4>

08000f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <UsageFault_Handler+0x4>

08000f5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8c:	f000 f8c4 	bl	8001118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <TIM2_IRQHandler+0x10>)
 8000f9a:	f002 ff13 	bl	8003dc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	2000057c 	.word	0x2000057c

08000fa8 <_sbrk>:
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	4a14      	ldr	r2, [pc, #80]	; (8001004 <_sbrk+0x5c>)
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <_sbrk+0x60>)
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	4b13      	ldr	r3, [pc, #76]	; (800100c <_sbrk+0x64>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d102      	bne.n	8000fca <_sbrk+0x22>
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <_sbrk+0x64>)
 8000fc6:	4a12      	ldr	r2, [pc, #72]	; (8001010 <_sbrk+0x68>)
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <_sbrk+0x64>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d207      	bcs.n	8000fe8 <_sbrk+0x40>
 8000fd8:	f004 fab8 	bl	800554c <__errno>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	220c      	movs	r2, #12
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe6:	e009      	b.n	8000ffc <_sbrk+0x54>
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <_sbrk+0x64>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	4b07      	ldr	r3, [pc, #28]	; (800100c <_sbrk+0x64>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	4a05      	ldr	r2, [pc, #20]	; (800100c <_sbrk+0x64>)
 8000ff8:	6013      	str	r3, [r2, #0]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20050000 	.word	0x20050000
 8001008:	00000400 	.word	0x00000400
 800100c:	2000008c 	.word	0x2000008c
 8001010:	20000628 	.word	0x20000628

08001014 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <SystemInit+0x20>)
 800101a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800101e:	4a05      	ldr	r2, [pc, #20]	; (8001034 <SystemInit+0x20>)
 8001020:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001024:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001038:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001070 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800103c:	480d      	ldr	r0, [pc, #52]	; (8001074 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800103e:	490e      	ldr	r1, [pc, #56]	; (8001078 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001040:	4a0e      	ldr	r2, [pc, #56]	; (800107c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001044:	e002      	b.n	800104c <LoopCopyDataInit>

08001046 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001046:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001048:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104a:	3304      	adds	r3, #4

0800104c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800104c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001050:	d3f9      	bcc.n	8001046 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001052:	4a0b      	ldr	r2, [pc, #44]	; (8001080 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001054:	4c0b      	ldr	r4, [pc, #44]	; (8001084 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001058:	e001      	b.n	800105e <LoopFillZerobss>

0800105a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800105a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800105c:	3204      	adds	r2, #4

0800105e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001060:	d3fb      	bcc.n	800105a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001062:	f7ff ffd7 	bl	8001014 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001066:	f004 fa77 	bl	8005558 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800106a:	f7ff faa5 	bl	80005b8 <main>
  bx  lr    
 800106e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001070:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001074:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001078:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800107c:	08005e88 	.word	0x08005e88
  ldr r2, =_sbss
 8001080:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001084:	20000624 	.word	0x20000624

08001088 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001088:	e7fe      	b.n	8001088 <ADC_IRQHandler>
	...

0800108c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <HAL_Init+0x28>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a07      	ldr	r2, [pc, #28]	; (80010b4 <HAL_Init+0x28>)
 8001096:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800109a:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800109c:	2003      	movs	r0, #3
 800109e:	f000 fd49 	bl	8001b34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010a2:	2000      	movs	r0, #0
 80010a4:	f000 f808 	bl	80010b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a8:	f7ff fd66 	bl	8000b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40023c00 	.word	0x40023c00

080010b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <HAL_InitTick+0x54>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <HAL_InitTick+0x58>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	4619      	mov	r1, r3
 80010ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80010d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 fd61 	bl	8001b9e <HAL_SYSTICK_Config>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e00e      	b.n	8001104 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b0f      	cmp	r3, #15
 80010ea:	d80a      	bhi.n	8001102 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ec:	2200      	movs	r2, #0
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	f04f 30ff 	mov.w	r0, #4294967295
 80010f4:	f000 fd29 	bl	8001b4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f8:	4a06      	ldr	r2, [pc, #24]	; (8001114 <HAL_InitTick+0x5c>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
 8001100:	e000      	b.n	8001104 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
}
 8001104:	4618      	mov	r0, r3
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000000 	.word	0x20000000
 8001110:	20000008 	.word	0x20000008
 8001114:	20000004 	.word	0x20000004

08001118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_IncTick+0x20>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	461a      	mov	r2, r3
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_IncTick+0x24>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4413      	add	r3, r2
 8001128:	4a04      	ldr	r2, [pc, #16]	; (800113c <HAL_IncTick+0x24>)
 800112a:	6013      	str	r3, [r2, #0]
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000008 	.word	0x20000008
 800113c:	20000610 	.word	0x20000610

08001140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return uwTick;
 8001144:	4b03      	ldr	r3, [pc, #12]	; (8001154 <HAL_GetTick+0x14>)
 8001146:	681b      	ldr	r3, [r3, #0]
}
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000610 	.word	0x20000610

08001158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001160:	f7ff ffee 	bl	8001140 <HAL_GetTick>
 8001164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001170:	d005      	beq.n	800117e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001172:	4b0a      	ldr	r3, [pc, #40]	; (800119c <HAL_Delay+0x44>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	461a      	mov	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4413      	add	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800117e:	bf00      	nop
 8001180:	f7ff ffde 	bl	8001140 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	429a      	cmp	r2, r3
 800118e:	d8f7      	bhi.n	8001180 <HAL_Delay+0x28>
  {
  }
}
 8001190:	bf00      	nop
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000008 	.word	0x20000008

080011a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011a8:	2300      	movs	r3, #0
 80011aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e031      	b.n	800121a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d109      	bne.n	80011d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff fcfe 	bl	8000bc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f003 0310 	and.w	r3, r3, #16
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d116      	bne.n	800120c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <HAL_ADC_Init+0x84>)
 80011e4:	4013      	ands	r3, r2
 80011e6:	f043 0202 	orr.w	r2, r3, #2
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f000 fad6 	bl	80017a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	f023 0303 	bic.w	r3, r3, #3
 8001202:	f043 0201 	orr.w	r2, r3, #1
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	641a      	str	r2, [r3, #64]	; 0x40
 800120a:	e001      	b.n	8001210 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001218:	7bfb      	ldrb	r3, [r7, #15]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	ffffeefd 	.word	0xffffeefd

08001228 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800123a:	2b01      	cmp	r3, #1
 800123c:	d101      	bne.n	8001242 <HAL_ADC_Start+0x1a>
 800123e:	2302      	movs	r3, #2
 8001240:	e0ad      	b.n	800139e <HAL_ADC_Start+0x176>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2201      	movs	r2, #1
 8001246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	2b01      	cmp	r3, #1
 8001256:	d018      	beq.n	800128a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	689a      	ldr	r2, [r3, #8]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f042 0201 	orr.w	r2, r2, #1
 8001266:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001268:	4b50      	ldr	r3, [pc, #320]	; (80013ac <HAL_ADC_Start+0x184>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a50      	ldr	r2, [pc, #320]	; (80013b0 <HAL_ADC_Start+0x188>)
 800126e:	fba2 2303 	umull	r2, r3, r2, r3
 8001272:	0c9a      	lsrs	r2, r3, #18
 8001274:	4613      	mov	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4413      	add	r3, r2
 800127a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800127c:	e002      	b.n	8001284 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	3b01      	subs	r3, #1
 8001282:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f9      	bne.n	800127e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	2b01      	cmp	r3, #1
 8001296:	d175      	bne.n	8001384 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800129c:	4b45      	ldr	r3, [pc, #276]	; (80013b4 <HAL_ADC_Start+0x18c>)
 800129e:	4013      	ands	r3, r2
 80012a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d007      	beq.n	80012c6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012d2:	d106      	bne.n	80012e2 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d8:	f023 0206 	bic.w	r2, r3, #6
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	645a      	str	r2, [r3, #68]	; 0x44
 80012e0:	e002      	b.n	80012e8 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80012f8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80012fa:	4b2f      	ldr	r3, [pc, #188]	; (80013b8 <HAL_ADC_Start+0x190>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f003 031f 	and.w	r3, r3, #31
 8001302:	2b00      	cmp	r3, #0
 8001304:	d10f      	bne.n	8001326 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d143      	bne.n	800139c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	e03a      	b.n	800139c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a24      	ldr	r2, [pc, #144]	; (80013bc <HAL_ADC_Start+0x194>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d10e      	bne.n	800134e <HAL_ADC_Start+0x126>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d107      	bne.n	800134e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800134c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800134e:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <HAL_ADC_Start+0x190>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 0310 	and.w	r3, r3, #16
 8001356:	2b00      	cmp	r3, #0
 8001358:	d120      	bne.n	800139c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a18      	ldr	r2, [pc, #96]	; (80013c0 <HAL_ADC_Start+0x198>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d11b      	bne.n	800139c <HAL_ADC_Start+0x174>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d114      	bne.n	800139c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	e00b      	b.n	800139c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	f043 0210 	orr.w	r2, r3, #16
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001394:	f043 0201 	orr.w	r2, r3, #1
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20000000 	.word	0x20000000
 80013b0:	431bde83 	.word	0x431bde83
 80013b4:	fffff8fe 	.word	0xfffff8fe
 80013b8:	40012300 	.word	0x40012300
 80013bc:	40012000 	.word	0x40012000
 80013c0:	40012200 	.word	0x40012200

080013c4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013e0:	d113      	bne.n	800140a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80013ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013f0:	d10b      	bne.n	800140a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	f043 0220 	orr.w	r2, r3, #32
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e063      	b.n	80014d2 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800140a:	f7ff fe99 	bl	8001140 <HAL_GetTick>
 800140e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001410:	e021      	b.n	8001456 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001418:	d01d      	beq.n	8001456 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d007      	beq.n	8001430 <HAL_ADC_PollForConversion+0x6c>
 8001420:	f7ff fe8e 	bl	8001140 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	429a      	cmp	r2, r3
 800142e:	d212      	bcs.n	8001456 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b02      	cmp	r3, #2
 800143c:	d00b      	beq.n	8001456 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	f043 0204 	orr.w	r2, r3, #4
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e03d      	b.n	80014d2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b02      	cmp	r3, #2
 8001462:	d1d6      	bne.n	8001412 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f06f 0212 	mvn.w	r2, #18
 800146c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d123      	bne.n	80014d0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800148c:	2b00      	cmp	r3, #0
 800148e:	d11f      	bne.n	80014d0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001496:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800149a:	2b00      	cmp	r3, #0
 800149c:	d006      	beq.n	80014ac <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d111      	bne.n	80014d0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d105      	bne.n	80014d0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c8:	f043 0201 	orr.w	r2, r3, #1
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001508:	2b01      	cmp	r3, #1
 800150a:	d101      	bne.n	8001510 <HAL_ADC_ConfigChannel+0x1c>
 800150c:	2302      	movs	r3, #2
 800150e:	e136      	b.n	800177e <HAL_ADC_ConfigChannel+0x28a>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2201      	movs	r2, #1
 8001514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b09      	cmp	r3, #9
 800151e:	d93a      	bls.n	8001596 <HAL_ADC_ConfigChannel+0xa2>
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001528:	d035      	beq.n	8001596 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68d9      	ldr	r1, [r3, #12]
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	b29b      	uxth	r3, r3
 8001536:	461a      	mov	r2, r3
 8001538:	4613      	mov	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	4413      	add	r3, r2
 800153e:	3b1e      	subs	r3, #30
 8001540:	2207      	movs	r2, #7
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43da      	mvns	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	400a      	ands	r2, r1
 800154e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a8d      	ldr	r2, [pc, #564]	; (800178c <HAL_ADC_ConfigChannel+0x298>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d10a      	bne.n	8001570 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	68d9      	ldr	r1, [r3, #12]
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	061a      	lsls	r2, r3, #24
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800156e:	e035      	b.n	80015dc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	68d9      	ldr	r1, [r3, #12]
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	b29b      	uxth	r3, r3
 8001580:	4618      	mov	r0, r3
 8001582:	4603      	mov	r3, r0
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4403      	add	r3, r0
 8001588:	3b1e      	subs	r3, #30
 800158a:	409a      	lsls	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	430a      	orrs	r2, r1
 8001592:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001594:	e022      	b.n	80015dc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6919      	ldr	r1, [r3, #16]
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	461a      	mov	r2, r3
 80015a4:	4613      	mov	r3, r2
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	4413      	add	r3, r2
 80015aa:	2207      	movs	r2, #7
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43da      	mvns	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	400a      	ands	r2, r1
 80015b8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6919      	ldr	r1, [r3, #16]
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	4618      	mov	r0, r3
 80015cc:	4603      	mov	r3, r0
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	4403      	add	r3, r0
 80015d2:	409a      	lsls	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	430a      	orrs	r2, r1
 80015da:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b06      	cmp	r3, #6
 80015e2:	d824      	bhi.n	800162e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685a      	ldr	r2, [r3, #4]
 80015ee:	4613      	mov	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4413      	add	r3, r2
 80015f4:	3b05      	subs	r3, #5
 80015f6:	221f      	movs	r2, #31
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43da      	mvns	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	400a      	ands	r2, r1
 8001604:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	b29b      	uxth	r3, r3
 8001612:	4618      	mov	r0, r3
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	4613      	mov	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	3b05      	subs	r3, #5
 8001620:	fa00 f203 	lsl.w	r2, r0, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	430a      	orrs	r2, r1
 800162a:	635a      	str	r2, [r3, #52]	; 0x34
 800162c:	e04c      	b.n	80016c8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b0c      	cmp	r3, #12
 8001634:	d824      	bhi.n	8001680 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	3b23      	subs	r3, #35	; 0x23
 8001648:	221f      	movs	r2, #31
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43da      	mvns	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	400a      	ands	r2, r1
 8001656:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	b29b      	uxth	r3, r3
 8001664:	4618      	mov	r0, r3
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	4613      	mov	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	3b23      	subs	r3, #35	; 0x23
 8001672:	fa00 f203 	lsl.w	r2, r0, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	430a      	orrs	r2, r1
 800167c:	631a      	str	r2, [r3, #48]	; 0x30
 800167e:	e023      	b.n	80016c8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	4613      	mov	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	3b41      	subs	r3, #65	; 0x41
 8001692:	221f      	movs	r2, #31
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43da      	mvns	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	400a      	ands	r2, r1
 80016a0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	4618      	mov	r0, r3
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	4613      	mov	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	3b41      	subs	r3, #65	; 0x41
 80016bc:	fa00 f203 	lsl.w	r2, r0, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	430a      	orrs	r2, r1
 80016c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a30      	ldr	r2, [pc, #192]	; (8001790 <HAL_ADC_ConfigChannel+0x29c>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d10a      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x1f4>
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016da:	d105      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80016dc:	4b2d      	ldr	r3, [pc, #180]	; (8001794 <HAL_ADC_ConfigChannel+0x2a0>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	4a2c      	ldr	r2, [pc, #176]	; (8001794 <HAL_ADC_ConfigChannel+0x2a0>)
 80016e2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80016e6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a28      	ldr	r2, [pc, #160]	; (8001790 <HAL_ADC_ConfigChannel+0x29c>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d10f      	bne.n	8001712 <HAL_ADC_ConfigChannel+0x21e>
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2b12      	cmp	r3, #18
 80016f8:	d10b      	bne.n	8001712 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80016fa:	4b26      	ldr	r3, [pc, #152]	; (8001794 <HAL_ADC_ConfigChannel+0x2a0>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	4a25      	ldr	r2, [pc, #148]	; (8001794 <HAL_ADC_ConfigChannel+0x2a0>)
 8001700:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001704:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001706:	4b23      	ldr	r3, [pc, #140]	; (8001794 <HAL_ADC_ConfigChannel+0x2a0>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	4a22      	ldr	r2, [pc, #136]	; (8001794 <HAL_ADC_ConfigChannel+0x2a0>)
 800170c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001710:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a1e      	ldr	r2, [pc, #120]	; (8001790 <HAL_ADC_ConfigChannel+0x29c>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d12b      	bne.n	8001774 <HAL_ADC_ConfigChannel+0x280>
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a1a      	ldr	r2, [pc, #104]	; (800178c <HAL_ADC_ConfigChannel+0x298>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d003      	beq.n	800172e <HAL_ADC_ConfigChannel+0x23a>
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b11      	cmp	r3, #17
 800172c:	d122      	bne.n	8001774 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800172e:	4b19      	ldr	r3, [pc, #100]	; (8001794 <HAL_ADC_ConfigChannel+0x2a0>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	4a18      	ldr	r2, [pc, #96]	; (8001794 <HAL_ADC_ConfigChannel+0x2a0>)
 8001734:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001738:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800173a:	4b16      	ldr	r3, [pc, #88]	; (8001794 <HAL_ADC_ConfigChannel+0x2a0>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	4a15      	ldr	r2, [pc, #84]	; (8001794 <HAL_ADC_ConfigChannel+0x2a0>)
 8001740:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001744:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a10      	ldr	r2, [pc, #64]	; (800178c <HAL_ADC_ConfigChannel+0x298>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d111      	bne.n	8001774 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001750:	4b11      	ldr	r3, [pc, #68]	; (8001798 <HAL_ADC_ConfigChannel+0x2a4>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a11      	ldr	r2, [pc, #68]	; (800179c <HAL_ADC_ConfigChannel+0x2a8>)
 8001756:	fba2 2303 	umull	r2, r3, r2, r3
 800175a:	0c9a      	lsrs	r2, r3, #18
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001766:	e002      	b.n	800176e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	3b01      	subs	r3, #1
 800176c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1f9      	bne.n	8001768 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	10000012 	.word	0x10000012
 8001790:	40012000 	.word	0x40012000
 8001794:	40012300 	.word	0x40012300
 8001798:	20000000 	.word	0x20000000
 800179c:	431bde83 	.word	0x431bde83

080017a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80017a8:	4b78      	ldr	r3, [pc, #480]	; (800198c <ADC_Init+0x1ec>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	4a77      	ldr	r2, [pc, #476]	; (800198c <ADC_Init+0x1ec>)
 80017ae:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80017b2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80017b4:	4b75      	ldr	r3, [pc, #468]	; (800198c <ADC_Init+0x1ec>)
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	4973      	ldr	r1, [pc, #460]	; (800198c <ADC_Init+0x1ec>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6859      	ldr	r1, [r3, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	021a      	lsls	r2, r3, #8
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80017f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6859      	ldr	r1, [r3, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	430a      	orrs	r2, r1
 8001806:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001816:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6899      	ldr	r1, [r3, #8]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68da      	ldr	r2, [r3, #12]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	430a      	orrs	r2, r1
 8001828:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182e:	4a58      	ldr	r2, [pc, #352]	; (8001990 <ADC_Init+0x1f0>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d022      	beq.n	800187a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001842:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6899      	ldr	r1, [r3, #8]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	430a      	orrs	r2, r1
 8001854:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001864:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6899      	ldr	r1, [r3, #8]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	430a      	orrs	r2, r1
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	e00f      	b.n	800189a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001888:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001898:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 0202 	bic.w	r2, r2, #2
 80018a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6899      	ldr	r1, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	005a      	lsls	r2, r3, #1
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d01b      	beq.n	8001900 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80018e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6859      	ldr	r1, [r3, #4]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f2:	3b01      	subs	r3, #1
 80018f4:	035a      	lsls	r2, r3, #13
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	430a      	orrs	r2, r1
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	e007      	b.n	8001910 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800190e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800191e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	3b01      	subs	r3, #1
 800192c:	051a      	lsls	r2, r3, #20
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	430a      	orrs	r2, r1
 8001934:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001944:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6899      	ldr	r1, [r3, #8]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001952:	025a      	lsls	r2, r3, #9
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	430a      	orrs	r2, r1
 800195a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800196a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6899      	ldr	r1, [r3, #8]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	029a      	lsls	r2, r3, #10
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	430a      	orrs	r2, r1
 800197e:	609a      	str	r2, [r3, #8]
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	40012300 	.word	0x40012300
 8001990:	0f000001 	.word	0x0f000001

08001994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a4:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <__NVIC_SetPriorityGrouping+0x40>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019aa:	68ba      	ldr	r2, [r7, #8]
 80019ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019b0:	4013      	ands	r3, r2
 80019b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <__NVIC_SetPriorityGrouping+0x44>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019c2:	4a04      	ldr	r2, [pc, #16]	; (80019d4 <__NVIC_SetPriorityGrouping+0x40>)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	60d3      	str	r3, [r2, #12]
}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000ed00 	.word	0xe000ed00
 80019d8:	05fa0000 	.word	0x05fa0000

080019dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e0:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <__NVIC_GetPriorityGrouping+0x18>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	0a1b      	lsrs	r3, r3, #8
 80019e6:	f003 0307 	and.w	r3, r3, #7
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	db0b      	blt.n	8001a22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	f003 021f 	and.w	r2, r3, #31
 8001a10:	4907      	ldr	r1, [pc, #28]	; (8001a30 <__NVIC_EnableIRQ+0x38>)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	095b      	lsrs	r3, r3, #5
 8001a18:	2001      	movs	r0, #1
 8001a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000e100 	.word	0xe000e100

08001a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	6039      	str	r1, [r7, #0]
 8001a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	db0a      	blt.n	8001a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	490c      	ldr	r1, [pc, #48]	; (8001a80 <__NVIC_SetPriority+0x4c>)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	0112      	lsls	r2, r2, #4
 8001a54:	b2d2      	uxtb	r2, r2
 8001a56:	440b      	add	r3, r1
 8001a58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a5c:	e00a      	b.n	8001a74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	4908      	ldr	r1, [pc, #32]	; (8001a84 <__NVIC_SetPriority+0x50>)
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	3b04      	subs	r3, #4
 8001a6c:	0112      	lsls	r2, r2, #4
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	440b      	add	r3, r1
 8001a72:	761a      	strb	r2, [r3, #24]
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000e100 	.word	0xe000e100
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b089      	sub	sp, #36	; 0x24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f1c3 0307 	rsb	r3, r3, #7
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	bf28      	it	cs
 8001aa6:	2304      	movcs	r3, #4
 8001aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3304      	adds	r3, #4
 8001aae:	2b06      	cmp	r3, #6
 8001ab0:	d902      	bls.n	8001ab8 <NVIC_EncodePriority+0x30>
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	3b03      	subs	r3, #3
 8001ab6:	e000      	b.n	8001aba <NVIC_EncodePriority+0x32>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001abc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43da      	mvns	r2, r3
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	401a      	ands	r2, r3
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ada:	43d9      	mvns	r1, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae0:	4313      	orrs	r3, r2
         );
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3724      	adds	r7, #36	; 0x24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
	...

08001af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b00:	d301      	bcc.n	8001b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b02:	2301      	movs	r3, #1
 8001b04:	e00f      	b.n	8001b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b06:	4a0a      	ldr	r2, [pc, #40]	; (8001b30 <SysTick_Config+0x40>)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b0e:	210f      	movs	r1, #15
 8001b10:	f04f 30ff 	mov.w	r0, #4294967295
 8001b14:	f7ff ff8e 	bl	8001a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <SysTick_Config+0x40>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b1e:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <SysTick_Config+0x40>)
 8001b20:	2207      	movs	r2, #7
 8001b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	e000e010 	.word	0xe000e010

08001b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff ff29 	bl	8001994 <__NVIC_SetPriorityGrouping>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b086      	sub	sp, #24
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	4603      	mov	r3, r0
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
 8001b56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b5c:	f7ff ff3e 	bl	80019dc <__NVIC_GetPriorityGrouping>
 8001b60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	68b9      	ldr	r1, [r7, #8]
 8001b66:	6978      	ldr	r0, [r7, #20]
 8001b68:	f7ff ff8e 	bl	8001a88 <NVIC_EncodePriority>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b72:	4611      	mov	r1, r2
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff ff5d 	bl	8001a34 <__NVIC_SetPriority>
}
 8001b7a:	bf00      	nop
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	4603      	mov	r3, r0
 8001b8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff31 	bl	80019f8 <__NVIC_EnableIRQ>
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff ffa2 	bl	8001af0 <SysTick_Config>
 8001bac:	4603      	mov	r3, r0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
	...

08001bb8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61fb      	str	r3, [r7, #28]
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001bc8:	4ba9      	ldr	r3, [pc, #676]	; (8001e70 <HAL_ETH_Init+0x2b8>)
 8001bca:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e181      	b.n	8001ee2 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d106      	bne.n	8001bf8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff f824 	bl	8000c40 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf8:	4b9e      	ldr	r3, [pc, #632]	; (8001e74 <HAL_ETH_Init+0x2bc>)
 8001bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfc:	4a9d      	ldr	r2, [pc, #628]	; (8001e74 <HAL_ETH_Init+0x2bc>)
 8001bfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c02:	6453      	str	r3, [r2, #68]	; 0x44
 8001c04:	4b9b      	ldr	r3, [pc, #620]	; (8001e74 <HAL_ETH_Init+0x2bc>)
 8001c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001c10:	4b99      	ldr	r3, [pc, #612]	; (8001e78 <HAL_ETH_Init+0x2c0>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	4a98      	ldr	r2, [pc, #608]	; (8001e78 <HAL_ETH_Init+0x2c0>)
 8001c16:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c1a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001c1c:	4b96      	ldr	r3, [pc, #600]	; (8001e78 <HAL_ETH_Init+0x2c0>)
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	4994      	ldr	r1, [pc, #592]	; (8001e78 <HAL_ETH_Init+0x2c0>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f042 0201 	orr.w	r2, r2, #1
 8001c3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c40:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c42:	f7ff fa7d 	bl	8001140 <HAL_GetTick>
 8001c46:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001c48:	e011      	b.n	8001c6e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001c4a:	f7ff fa79 	bl	8001140 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c58:	d909      	bls.n	8001c6e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e139      	b.n	8001ee2 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1e4      	bne.n	8001c4a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f023 031c 	bic.w	r3, r3, #28
 8001c8e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001c90:	f001 fba4 	bl	80033dc <HAL_RCC_GetHCLKFreq>
 8001c94:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	4a78      	ldr	r2, [pc, #480]	; (8001e7c <HAL_ETH_Init+0x2c4>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d908      	bls.n	8001cb0 <HAL_ETH_Init+0xf8>
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	4a77      	ldr	r2, [pc, #476]	; (8001e80 <HAL_ETH_Init+0x2c8>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d804      	bhi.n	8001cb0 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	f043 0308 	orr.w	r3, r3, #8
 8001cac:	61fb      	str	r3, [r7, #28]
 8001cae:	e027      	b.n	8001d00 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	4a73      	ldr	r2, [pc, #460]	; (8001e80 <HAL_ETH_Init+0x2c8>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d908      	bls.n	8001cca <HAL_ETH_Init+0x112>
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	4a6d      	ldr	r2, [pc, #436]	; (8001e70 <HAL_ETH_Init+0x2b8>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d204      	bcs.n	8001cca <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f043 030c 	orr.w	r3, r3, #12
 8001cc6:	61fb      	str	r3, [r7, #28]
 8001cc8:	e01a      	b.n	8001d00 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	4a68      	ldr	r2, [pc, #416]	; (8001e70 <HAL_ETH_Init+0x2b8>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d303      	bcc.n	8001cda <HAL_ETH_Init+0x122>
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	4a6b      	ldr	r2, [pc, #428]	; (8001e84 <HAL_ETH_Init+0x2cc>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d911      	bls.n	8001cfe <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	4a69      	ldr	r2, [pc, #420]	; (8001e84 <HAL_ETH_Init+0x2cc>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d908      	bls.n	8001cf4 <HAL_ETH_Init+0x13c>
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	4a68      	ldr	r2, [pc, #416]	; (8001e88 <HAL_ETH_Init+0x2d0>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d804      	bhi.n	8001cf4 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	f043 0304 	orr.w	r3, r3, #4
 8001cf0:	61fb      	str	r3, [r7, #28]
 8001cf2:	e005      	b.n	8001d00 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f043 0310 	orr.w	r3, r3, #16
 8001cfa:	61fb      	str	r3, [r7, #28]
 8001cfc:	e000      	b.n	8001d00 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001cfe:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	69fa      	ldr	r2, [r7, #28]
 8001d06:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001d08:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f954 	bl	8001fbc <HAL_ETH_WritePHYRegister>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00b      	beq.n	8001d32 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001d1e:	6939      	ldr	r1, [r7, #16]
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f9b1 	bl	8002088 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e0d7      	b.n	8001ee2 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001d32:	20ff      	movs	r0, #255	; 0xff
 8001d34:	f7ff fa10 	bl	8001158 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 80a5 	beq.w	8001e8c <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d42:	f7ff f9fd 	bl	8001140 <HAL_GetTick>
 8001d46:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001d48:	f107 030c 	add.w	r3, r7, #12
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	2101      	movs	r1, #1
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f8cb 	bl	8001eec <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001d56:	f7ff f9f3 	bl	8001140 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d90f      	bls.n	8001d88 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001d6c:	6939      	ldr	r1, [r7, #16]
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f98a 	bl	8002088 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e0ac      	b.n	8001ee2 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0da      	beq.n	8001d48 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001d92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d96:	2100      	movs	r1, #0
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f90f 	bl	8001fbc <HAL_ETH_WritePHYRegister>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00b      	beq.n	8001dbc <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001da8:	6939      	ldr	r1, [r7, #16]
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f96c 	bl	8002088 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001db8:	2301      	movs	r3, #1
 8001dba:	e092      	b.n	8001ee2 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001dbc:	f7ff f9c0 	bl	8001140 <HAL_GetTick>
 8001dc0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001dc2:	f107 030c 	add.w	r3, r7, #12
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	2101      	movs	r1, #1
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f88e 	bl	8001eec <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001dd0:	f7ff f9b6 	bl	8001140 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d90f      	bls.n	8001e02 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001de6:	6939      	ldr	r1, [r7, #16]
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f94d 	bl	8002088 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e06f      	b.n	8001ee2 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f003 0320 	and.w	r3, r3, #32
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0da      	beq.n	8001dc2 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001e0c:	f107 030c 	add.w	r3, r7, #12
 8001e10:	461a      	mov	r2, r3
 8001e12:	211f      	movs	r1, #31
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f869 	bl	8001eec <HAL_ETH_ReadPHYRegister>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00b      	beq.n	8001e38 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001e24:	6939      	ldr	r1, [r7, #16]
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f92e 	bl	8002088 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001e34:	2301      	movs	r3, #1
 8001e36:	e054      	b.n	8001ee2 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f003 0310 	and.w	r3, r3, #16
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d004      	beq.n	8001e4c <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	e002      	b.n	8001e52 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
 8001e62:	e035      	b.n	8001ed0 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	e030      	b.n	8001ed0 <HAL_ETH_Init+0x318>
 8001e6e:	bf00      	nop
 8001e70:	03938700 	.word	0x03938700
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40013800 	.word	0x40013800
 8001e7c:	01312cff 	.word	0x01312cff
 8001e80:	02160ebf 	.word	0x02160ebf
 8001e84:	05f5e0ff 	.word	0x05f5e0ff
 8001e88:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	08db      	lsrs	r3, r3, #3
 8001e92:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	085b      	lsrs	r3, r3, #1
 8001e9a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f889 	bl	8001fbc <HAL_ETH_WritePHYRegister>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00b      	beq.n	8001ec8 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001eb4:	6939      	ldr	r1, [r7, #16]
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f8e6 	bl	8002088 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e00c      	b.n	8001ee2 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001ec8:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001ecc:	f7ff f944 	bl	8001158 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001ed0:	6939      	ldr	r1, [r7, #16]
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f8d8 	bl	8002088 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3720      	adds	r7, #32
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop

08001eec <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	607a      	str	r2, [r7, #4]
 8001ef8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b82      	cmp	r3, #130	; 0x82
 8001f0c:	d101      	bne.n	8001f12 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e050      	b.n	8001fb4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2282      	movs	r2, #130	; 0x82
 8001f16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f003 031c 	and.w	r3, r3, #28
 8001f28:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	8a1b      	ldrh	r3, [r3, #16]
 8001f2e:	02db      	lsls	r3, r3, #11
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001f38:	897b      	ldrh	r3, [r7, #10]
 8001f3a:	019b      	lsls	r3, r3, #6
 8001f3c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f023 0302 	bic.w	r3, r3, #2
 8001f4c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001f5e:	f7ff f8ef 	bl	8001140 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f64:	e015      	b.n	8001f92 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001f66:	f7ff f8eb 	bl	8001140 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f74:	d309      	bcc.n	8001f8a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e014      	b.n	8001fb4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1e4      	bne.n	8001f66 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	607a      	str	r2, [r7, #4]
 8001fc8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b42      	cmp	r3, #66	; 0x42
 8001fdc:	d101      	bne.n	8001fe2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e04e      	b.n	8002080 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2242      	movs	r2, #66	; 0x42
 8001fe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f003 031c 	and.w	r3, r3, #28
 8001ff8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8a1b      	ldrh	r3, [r3, #16]
 8001ffe:	02db      	lsls	r3, r3, #11
 8002000:	b29b      	uxth	r3, r3
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	4313      	orrs	r3, r2
 8002006:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002008:	897b      	ldrh	r3, [r7, #10]
 800200a:	019b      	lsls	r3, r3, #6
 800200c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	4313      	orrs	r3, r2
 8002014:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f043 0302 	orr.w	r3, r3, #2
 800201c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	b29a      	uxth	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002038:	f7ff f882 	bl	8001140 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800203e:	e015      	b.n	800206c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002040:	f7ff f87e 	bl	8001140 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800204e:	d309      	bcc.n	8002064 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e00d      	b.n	8002080 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1e4      	bne.n	8002040 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b0b0      	sub	sp, #192	; 0xc0
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002092:	2300      	movs	r3, #0
 8002094:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d007      	beq.n	80020ae <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020a4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80020ae:	2300      	movs	r3, #0
 80020b0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80020b2:	2300      	movs	r3, #0
 80020b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80020b6:	2300      	movs	r3, #0
 80020b8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80020be:	2300      	movs	r3, #0
 80020c0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80020c2:	2300      	movs	r3, #0
 80020c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d103      	bne.n	80020d6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80020ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020d2:	663b      	str	r3, [r7, #96]	; 0x60
 80020d4:	e001      	b.n	80020da <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80020d6:	2300      	movs	r3, #0
 80020d8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80020da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020de:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80020e0:	2300      	movs	r3, #0
 80020e2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80020e4:	2300      	movs	r3, #0
 80020e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80020e8:	2300      	movs	r3, #0
 80020ea:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80020ec:	2300      	movs	r3, #0
 80020ee:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80020f0:	2300      	movs	r3, #0
 80020f2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80020f4:	2340      	movs	r3, #64	; 0x40
 80020f6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80020fe:	2300      	movs	r3, #0
 8002100:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002104:	2300      	movs	r3, #0
 8002106:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800210a:	2300      	movs	r3, #0
 800210c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002110:	2300      	movs	r3, #0
 8002112:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8002116:	2300      	movs	r3, #0
 8002118:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 800211c:	2300      	movs	r3, #0
 800211e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8002122:	2300      	movs	r3, #0
 8002124:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002128:	2380      	movs	r3, #128	; 0x80
 800212a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800212e:	2300      	movs	r3, #0
 8002130:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002134:	2300      	movs	r3, #0
 8002136:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800213a:	2300      	movs	r3, #0
 800213c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002140:	2300      	movs	r3, #0
 8002142:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002146:	2300      	movs	r3, #0
 8002148:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 800214c:	2300      	movs	r3, #0
 800214e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800215c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002160:	4bab      	ldr	r3, [pc, #684]	; (8002410 <ETH_MACDMAConfig+0x388>)
 8002162:	4013      	ands	r3, r2
 8002164:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002168:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800216a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800216c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800216e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002170:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002174:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800217a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800217c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800217e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002180:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002182:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002188:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800218a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800218c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800218e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002190:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002192:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002194:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002198:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800219a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800219c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800219e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021a2:	4313      	orrs	r3, r2
 80021a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021b0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021bc:	2001      	movs	r0, #1
 80021be:	f7fe ffcb 	bl	8001158 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021ca:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021cc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80021ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021d0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80021d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80021d4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80021d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80021da:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80021dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80021e0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80021e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80021e6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80021e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80021ec:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80021f0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80021f8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021fa:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002206:	2001      	movs	r0, #1
 8002208:	f7fe ffa6 	bl	8001158 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002214:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800221e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002228:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002234:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002238:	f64f 7341 	movw	r3, #65345	; 0xff41
 800223c:	4013      	ands	r3, r2
 800223e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002242:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002246:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002248:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800224c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800224e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002252:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002254:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002258:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800225a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800225e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002260:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002264:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002266:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800226a:	4313      	orrs	r3, r2
 800226c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002278:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002284:	2001      	movs	r0, #1
 8002286:	f7fe ff67 	bl	8001158 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002292:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002294:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002298:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022ae:	2001      	movs	r0, #1
 80022b0:	f7fe ff52 	bl	8001158 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022bc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80022be:	2300      	movs	r3, #0
 80022c0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80022c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022c6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80022c8:	2300      	movs	r3, #0
 80022ca:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80022cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022d0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80022da:	2300      	movs	r3, #0
 80022dc:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80022de:	2300      	movs	r3, #0
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80022e2:	2304      	movs	r3, #4
 80022e4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80022e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80022ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022f0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80022f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022f6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80022f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022fc:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80022fe:	2380      	movs	r3, #128	; 0x80
 8002300:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002302:	2300      	movs	r3, #0
 8002304:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002306:	2300      	movs	r3, #0
 8002308:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	f241 0318 	movw	r3, #4120	; 0x1018
 8002312:	4413      	add	r3, r2
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800231a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800231e:	4b3d      	ldr	r3, [pc, #244]	; (8002414 <ETH_MACDMAConfig+0x38c>)
 8002320:	4013      	ands	r3, r2
 8002322:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002326:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002328:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800232a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800232c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800232e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002330:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002332:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002334:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002336:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002338:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800233a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800233c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800233e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002342:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002344:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002346:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002348:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800234c:	4313      	orrs	r3, r2
 800234e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	f241 0318 	movw	r3, #4120	; 0x1018
 800235a:	4413      	add	r3, r2
 800235c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002360:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	f241 0318 	movw	r3, #4120	; 0x1018
 800236a:	4413      	add	r3, r2
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002372:	2001      	movs	r0, #1
 8002374:	f7fe fef0 	bl	8001158 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002380:	4413      	add	r3, r2
 8002382:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002386:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800238a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800238c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800238e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002390:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002394:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002398:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800239a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800239c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800239e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80023a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80023a2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80023ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80023c0:	2001      	movs	r0, #1
 80023c2:	f7fe fec9 	bl	8001158 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023d2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d10d      	bne.n	80023f8 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	f241 031c 	movw	r3, #4124	; 0x101c
 80023e4:	4413      	add	r3, r2
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6811      	ldr	r1, [r2, #0]
 80023ec:	4a0a      	ldr	r2, [pc, #40]	; (8002418 <ETH_MACDMAConfig+0x390>)
 80023ee:	431a      	orrs	r2, r3
 80023f0:	f241 031c 	movw	r3, #4124	; 0x101c
 80023f4:	440b      	add	r3, r1
 80023f6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	461a      	mov	r2, r3
 80023fe:	2100      	movs	r1, #0
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 f80b 	bl	800241c <ETH_MACAddressConfig>
}
 8002406:	bf00      	nop
 8002408:	37c0      	adds	r7, #192	; 0xc0
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	ff20810f 	.word	0xff20810f
 8002414:	f8de3f23 	.word	0xf8de3f23
 8002418:	00010040 	.word	0x00010040

0800241c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800241c:	b480      	push	{r7}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3305      	adds	r3, #5
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	021b      	lsls	r3, r3, #8
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	3204      	adds	r2, #4
 8002434:	7812      	ldrb	r2, [r2, #0]
 8002436:	4313      	orrs	r3, r2
 8002438:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	4b11      	ldr	r3, [pc, #68]	; (8002484 <ETH_MACAddressConfig+0x68>)
 800243e:	4413      	add	r3, r2
 8002440:	461a      	mov	r2, r3
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3303      	adds	r3, #3
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	061a      	lsls	r2, r3, #24
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3302      	adds	r3, #2
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	041b      	lsls	r3, r3, #16
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3301      	adds	r3, #1
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	4313      	orrs	r3, r2
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	7812      	ldrb	r2, [r2, #0]
 8002466:	4313      	orrs	r3, r2
 8002468:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	4b06      	ldr	r3, [pc, #24]	; (8002488 <ETH_MACAddressConfig+0x6c>)
 800246e:	4413      	add	r3, r2
 8002470:	461a      	mov	r2, r3
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	6013      	str	r3, [r2, #0]
}
 8002476:	bf00      	nop
 8002478:	371c      	adds	r7, #28
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40028040 	.word	0x40028040
 8002488:	40028044 	.word	0x40028044

0800248c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800248c:	b480      	push	{r7}
 800248e:	b089      	sub	sp, #36	; 0x24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80024a6:	2300      	movs	r3, #0
 80024a8:	61fb      	str	r3, [r7, #28]
 80024aa:	e175      	b.n	8002798 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024ac:	2201      	movs	r2, #1
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	4013      	ands	r3, r2
 80024be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	f040 8164 	bne.w	8002792 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d005      	beq.n	80024e2 <HAL_GPIO_Init+0x56>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d130      	bne.n	8002544 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	2203      	movs	r2, #3
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4013      	ands	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002518:	2201      	movs	r2, #1
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	091b      	lsrs	r3, r3, #4
 800252e:	f003 0201 	and.w	r2, r3, #1
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	2b03      	cmp	r3, #3
 800254e:	d017      	beq.n	8002580 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	2203      	movs	r2, #3
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 0303 	and.w	r3, r3, #3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d123      	bne.n	80025d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	08da      	lsrs	r2, r3, #3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3208      	adds	r2, #8
 8002594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	220f      	movs	r2, #15
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	08da      	lsrs	r2, r3, #3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	3208      	adds	r2, #8
 80025ce:	69b9      	ldr	r1, [r7, #24]
 80025d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	2203      	movs	r2, #3
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 0203 	and.w	r2, r3, #3
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 80be 	beq.w	8002792 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002616:	4b66      	ldr	r3, [pc, #408]	; (80027b0 <HAL_GPIO_Init+0x324>)
 8002618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261a:	4a65      	ldr	r2, [pc, #404]	; (80027b0 <HAL_GPIO_Init+0x324>)
 800261c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002620:	6453      	str	r3, [r2, #68]	; 0x44
 8002622:	4b63      	ldr	r3, [pc, #396]	; (80027b0 <HAL_GPIO_Init+0x324>)
 8002624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800262e:	4a61      	ldr	r2, [pc, #388]	; (80027b4 <HAL_GPIO_Init+0x328>)
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	089b      	lsrs	r3, r3, #2
 8002634:	3302      	adds	r3, #2
 8002636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	220f      	movs	r2, #15
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4013      	ands	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a58      	ldr	r2, [pc, #352]	; (80027b8 <HAL_GPIO_Init+0x32c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d037      	beq.n	80026ca <HAL_GPIO_Init+0x23e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a57      	ldr	r2, [pc, #348]	; (80027bc <HAL_GPIO_Init+0x330>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d031      	beq.n	80026c6 <HAL_GPIO_Init+0x23a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a56      	ldr	r2, [pc, #344]	; (80027c0 <HAL_GPIO_Init+0x334>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d02b      	beq.n	80026c2 <HAL_GPIO_Init+0x236>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a55      	ldr	r2, [pc, #340]	; (80027c4 <HAL_GPIO_Init+0x338>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d025      	beq.n	80026be <HAL_GPIO_Init+0x232>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a54      	ldr	r2, [pc, #336]	; (80027c8 <HAL_GPIO_Init+0x33c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d01f      	beq.n	80026ba <HAL_GPIO_Init+0x22e>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a53      	ldr	r2, [pc, #332]	; (80027cc <HAL_GPIO_Init+0x340>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d019      	beq.n	80026b6 <HAL_GPIO_Init+0x22a>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a52      	ldr	r2, [pc, #328]	; (80027d0 <HAL_GPIO_Init+0x344>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d013      	beq.n	80026b2 <HAL_GPIO_Init+0x226>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a51      	ldr	r2, [pc, #324]	; (80027d4 <HAL_GPIO_Init+0x348>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d00d      	beq.n	80026ae <HAL_GPIO_Init+0x222>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a50      	ldr	r2, [pc, #320]	; (80027d8 <HAL_GPIO_Init+0x34c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d007      	beq.n	80026aa <HAL_GPIO_Init+0x21e>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a4f      	ldr	r2, [pc, #316]	; (80027dc <HAL_GPIO_Init+0x350>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d101      	bne.n	80026a6 <HAL_GPIO_Init+0x21a>
 80026a2:	2309      	movs	r3, #9
 80026a4:	e012      	b.n	80026cc <HAL_GPIO_Init+0x240>
 80026a6:	230a      	movs	r3, #10
 80026a8:	e010      	b.n	80026cc <HAL_GPIO_Init+0x240>
 80026aa:	2308      	movs	r3, #8
 80026ac:	e00e      	b.n	80026cc <HAL_GPIO_Init+0x240>
 80026ae:	2307      	movs	r3, #7
 80026b0:	e00c      	b.n	80026cc <HAL_GPIO_Init+0x240>
 80026b2:	2306      	movs	r3, #6
 80026b4:	e00a      	b.n	80026cc <HAL_GPIO_Init+0x240>
 80026b6:	2305      	movs	r3, #5
 80026b8:	e008      	b.n	80026cc <HAL_GPIO_Init+0x240>
 80026ba:	2304      	movs	r3, #4
 80026bc:	e006      	b.n	80026cc <HAL_GPIO_Init+0x240>
 80026be:	2303      	movs	r3, #3
 80026c0:	e004      	b.n	80026cc <HAL_GPIO_Init+0x240>
 80026c2:	2302      	movs	r3, #2
 80026c4:	e002      	b.n	80026cc <HAL_GPIO_Init+0x240>
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <HAL_GPIO_Init+0x240>
 80026ca:	2300      	movs	r3, #0
 80026cc:	69fa      	ldr	r2, [r7, #28]
 80026ce:	f002 0203 	and.w	r2, r2, #3
 80026d2:	0092      	lsls	r2, r2, #2
 80026d4:	4093      	lsls	r3, r2
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80026dc:	4935      	ldr	r1, [pc, #212]	; (80027b4 <HAL_GPIO_Init+0x328>)
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	089b      	lsrs	r3, r3, #2
 80026e2:	3302      	adds	r3, #2
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ea:	4b3d      	ldr	r3, [pc, #244]	; (80027e0 <HAL_GPIO_Init+0x354>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	43db      	mvns	r3, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4013      	ands	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4313      	orrs	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800270e:	4a34      	ldr	r2, [pc, #208]	; (80027e0 <HAL_GPIO_Init+0x354>)
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002714:	4b32      	ldr	r3, [pc, #200]	; (80027e0 <HAL_GPIO_Init+0x354>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4313      	orrs	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002738:	4a29      	ldr	r2, [pc, #164]	; (80027e0 <HAL_GPIO_Init+0x354>)
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800273e:	4b28      	ldr	r3, [pc, #160]	; (80027e0 <HAL_GPIO_Init+0x354>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	43db      	mvns	r3, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4013      	ands	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002762:	4a1f      	ldr	r2, [pc, #124]	; (80027e0 <HAL_GPIO_Init+0x354>)
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002768:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <HAL_GPIO_Init+0x354>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	43db      	mvns	r3, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800278c:	4a14      	ldr	r2, [pc, #80]	; (80027e0 <HAL_GPIO_Init+0x354>)
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3301      	adds	r3, #1
 8002796:	61fb      	str	r3, [r7, #28]
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	2b0f      	cmp	r3, #15
 800279c:	f67f ae86 	bls.w	80024ac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80027a0:	bf00      	nop
 80027a2:	bf00      	nop
 80027a4:	3724      	adds	r7, #36	; 0x24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40013800 	.word	0x40013800
 80027b8:	40020000 	.word	0x40020000
 80027bc:	40020400 	.word	0x40020400
 80027c0:	40020800 	.word	0x40020800
 80027c4:	40020c00 	.word	0x40020c00
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40021400 	.word	0x40021400
 80027d0:	40021800 	.word	0x40021800
 80027d4:	40021c00 	.word	0x40021c00
 80027d8:	40022000 	.word	0x40022000
 80027dc:	40022400 	.word	0x40022400
 80027e0:	40013c00 	.word	0x40013c00

080027e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	460b      	mov	r3, r1
 80027ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691a      	ldr	r2, [r3, #16]
 80027f4:	887b      	ldrh	r3, [r7, #2]
 80027f6:	4013      	ands	r3, r2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d002      	beq.n	8002802 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027fc:	2301      	movs	r3, #1
 80027fe:	73fb      	strb	r3, [r7, #15]
 8002800:	e001      	b.n	8002806 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002802:	2300      	movs	r3, #0
 8002804:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002806:	7bfb      	ldrb	r3, [r7, #15]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	807b      	strh	r3, [r7, #2]
 8002820:	4613      	mov	r3, r2
 8002822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002824:	787b      	ldrb	r3, [r7, #1]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800282a:	887a      	ldrh	r2, [r7, #2]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002830:	e003      	b.n	800283a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002832:	887b      	ldrh	r3, [r7, #2]
 8002834:	041a      	lsls	r2, r3, #16
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	619a      	str	r2, [r3, #24]
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002846:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002848:	b08f      	sub	sp, #60	; 0x3c
 800284a:	af0a      	add	r7, sp, #40	; 0x28
 800284c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e116      	b.n	8002a86 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d106      	bne.n	8002878 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7fe fb04 	bl	8000e80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2203      	movs	r2, #3
 800287c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002888:	2b00      	cmp	r3, #0
 800288a:	d102      	bne.n	8002892 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f002 fbc2 	bl	8005020 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	603b      	str	r3, [r7, #0]
 80028a2:	687e      	ldr	r6, [r7, #4]
 80028a4:	466d      	mov	r5, sp
 80028a6:	f106 0410 	add.w	r4, r6, #16
 80028aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80028ba:	1d33      	adds	r3, r6, #4
 80028bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028be:	6838      	ldr	r0, [r7, #0]
 80028c0:	f002 fb56 	bl	8004f70 <USB_CoreInit>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d005      	beq.n	80028d6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2202      	movs	r2, #2
 80028ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e0d7      	b.n	8002a86 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2100      	movs	r1, #0
 80028dc:	4618      	mov	r0, r3
 80028de:	f002 fbb0 	bl	8005042 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028e2:	2300      	movs	r3, #0
 80028e4:	73fb      	strb	r3, [r7, #15]
 80028e6:	e04a      	b.n	800297e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028e8:	7bfa      	ldrb	r2, [r7, #15]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	333d      	adds	r3, #61	; 0x3d
 80028f8:	2201      	movs	r2, #1
 80028fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028fc:	7bfa      	ldrb	r2, [r7, #15]
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	1a9b      	subs	r3, r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	333c      	adds	r3, #60	; 0x3c
 800290c:	7bfa      	ldrb	r2, [r7, #15]
 800290e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002910:	7bfa      	ldrb	r2, [r7, #15]
 8002912:	7bfb      	ldrb	r3, [r7, #15]
 8002914:	b298      	uxth	r0, r3
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	3342      	adds	r3, #66	; 0x42
 8002924:	4602      	mov	r2, r0
 8002926:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002928:	7bfa      	ldrb	r2, [r7, #15]
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	4613      	mov	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	1a9b      	subs	r3, r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	333f      	adds	r3, #63	; 0x3f
 8002938:	2200      	movs	r2, #0
 800293a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800293c:	7bfa      	ldrb	r2, [r7, #15]
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	1a9b      	subs	r3, r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	3344      	adds	r3, #68	; 0x44
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002950:	7bfa      	ldrb	r2, [r7, #15]
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	3348      	adds	r3, #72	; 0x48
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002964:	7bfa      	ldrb	r2, [r7, #15]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	1a9b      	subs	r3, r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	3350      	adds	r3, #80	; 0x50
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002978:	7bfb      	ldrb	r3, [r7, #15]
 800297a:	3301      	adds	r3, #1
 800297c:	73fb      	strb	r3, [r7, #15]
 800297e:	7bfa      	ldrb	r2, [r7, #15]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	429a      	cmp	r2, r3
 8002986:	d3af      	bcc.n	80028e8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002988:	2300      	movs	r3, #0
 800298a:	73fb      	strb	r3, [r7, #15]
 800298c:	e044      	b.n	8002a18 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800298e:	7bfa      	ldrb	r2, [r7, #15]
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	4613      	mov	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	1a9b      	subs	r3, r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	440b      	add	r3, r1
 800299c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80029a0:	2200      	movs	r2, #0
 80029a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029a4:	7bfa      	ldrb	r2, [r7, #15]
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	4613      	mov	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	1a9b      	subs	r3, r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80029b6:	7bfa      	ldrb	r2, [r7, #15]
 80029b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029ba:	7bfa      	ldrb	r2, [r7, #15]
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	4613      	mov	r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	1a9b      	subs	r3, r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	440b      	add	r3, r1
 80029c8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80029cc:	2200      	movs	r2, #0
 80029ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029d0:	7bfa      	ldrb	r2, [r7, #15]
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	4613      	mov	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	1a9b      	subs	r3, r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029e6:	7bfa      	ldrb	r2, [r7, #15]
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	4613      	mov	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	1a9b      	subs	r3, r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	440b      	add	r3, r1
 80029f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029fc:	7bfa      	ldrb	r2, [r7, #15]
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	1a9b      	subs	r3, r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
 8002a14:	3301      	adds	r3, #1
 8002a16:	73fb      	strb	r3, [r7, #15]
 8002a18:	7bfa      	ldrb	r2, [r7, #15]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d3b5      	bcc.n	800298e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	687e      	ldr	r6, [r7, #4]
 8002a2a:	466d      	mov	r5, sp
 8002a2c:	f106 0410 	add.w	r4, r6, #16
 8002a30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a3c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a40:	1d33      	adds	r3, r6, #4
 8002a42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a44:	6838      	ldr	r0, [r7, #0]
 8002a46:	f002 fb49 	bl	80050dc <USB_DevInit>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2202      	movs	r2, #2
 8002a54:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e014      	b.n	8002a86 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d102      	bne.n	8002a7a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f80b 	bl	8002a90 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f002 fd03 	bl	800548a <USB_DevDisconnect>

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002a90 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002abe:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <HAL_PCDEx_ActivateLPM+0x44>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	10000003 	.word	0x10000003

08002ad8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002adc:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a04      	ldr	r2, [pc, #16]	; (8002af4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae6:	6013      	str	r3, [r2, #0]
}
 8002ae8:	bf00      	nop
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	40007000 	.word	0x40007000

08002af8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b00:	2300      	movs	r3, #0
 8002b02:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e291      	b.n	8003032 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 8087 	beq.w	8002c2a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b1c:	4b96      	ldr	r3, [pc, #600]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 030c 	and.w	r3, r3, #12
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d00c      	beq.n	8002b42 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b28:	4b93      	ldr	r3, [pc, #588]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 030c 	and.w	r3, r3, #12
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d112      	bne.n	8002b5a <HAL_RCC_OscConfig+0x62>
 8002b34:	4b90      	ldr	r3, [pc, #576]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b40:	d10b      	bne.n	8002b5a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b42:	4b8d      	ldr	r3, [pc, #564]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d06c      	beq.n	8002c28 <HAL_RCC_OscConfig+0x130>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d168      	bne.n	8002c28 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e26b      	b.n	8003032 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b62:	d106      	bne.n	8002b72 <HAL_RCC_OscConfig+0x7a>
 8002b64:	4b84      	ldr	r3, [pc, #528]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a83      	ldr	r2, [pc, #524]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b6e:	6013      	str	r3, [r2, #0]
 8002b70:	e02e      	b.n	8002bd0 <HAL_RCC_OscConfig+0xd8>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10c      	bne.n	8002b94 <HAL_RCC_OscConfig+0x9c>
 8002b7a:	4b7f      	ldr	r3, [pc, #508]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a7e      	ldr	r2, [pc, #504]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002b80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b84:	6013      	str	r3, [r2, #0]
 8002b86:	4b7c      	ldr	r3, [pc, #496]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a7b      	ldr	r2, [pc, #492]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002b8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b90:	6013      	str	r3, [r2, #0]
 8002b92:	e01d      	b.n	8002bd0 <HAL_RCC_OscConfig+0xd8>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b9c:	d10c      	bne.n	8002bb8 <HAL_RCC_OscConfig+0xc0>
 8002b9e:	4b76      	ldr	r3, [pc, #472]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a75      	ldr	r2, [pc, #468]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	4b73      	ldr	r3, [pc, #460]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a72      	ldr	r2, [pc, #456]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	e00b      	b.n	8002bd0 <HAL_RCC_OscConfig+0xd8>
 8002bb8:	4b6f      	ldr	r3, [pc, #444]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a6e      	ldr	r2, [pc, #440]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc2:	6013      	str	r3, [r2, #0]
 8002bc4:	4b6c      	ldr	r3, [pc, #432]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a6b      	ldr	r2, [pc, #428]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d013      	beq.n	8002c00 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd8:	f7fe fab2 	bl	8001140 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002be0:	f7fe faae 	bl	8001140 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b64      	cmp	r3, #100	; 0x64
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e21f      	b.n	8003032 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf2:	4b61      	ldr	r3, [pc, #388]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0f0      	beq.n	8002be0 <HAL_RCC_OscConfig+0xe8>
 8002bfe:	e014      	b.n	8002c2a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c00:	f7fe fa9e 	bl	8001140 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c08:	f7fe fa9a 	bl	8001140 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b64      	cmp	r3, #100	; 0x64
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e20b      	b.n	8003032 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c1a:	4b57      	ldr	r3, [pc, #348]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f0      	bne.n	8002c08 <HAL_RCC_OscConfig+0x110>
 8002c26:	e000      	b.n	8002c2a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d069      	beq.n	8002d0a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c36:	4b50      	ldr	r3, [pc, #320]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00b      	beq.n	8002c5a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c42:	4b4d      	ldr	r3, [pc, #308]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
 8002c4a:	2b08      	cmp	r3, #8
 8002c4c:	d11c      	bne.n	8002c88 <HAL_RCC_OscConfig+0x190>
 8002c4e:	4b4a      	ldr	r3, [pc, #296]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d116      	bne.n	8002c88 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c5a:	4b47      	ldr	r3, [pc, #284]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d005      	beq.n	8002c72 <HAL_RCC_OscConfig+0x17a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d001      	beq.n	8002c72 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e1df      	b.n	8003032 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c72:	4b41      	ldr	r3, [pc, #260]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	493d      	ldr	r1, [pc, #244]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c86:	e040      	b.n	8002d0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d023      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c90:	4b39      	ldr	r3, [pc, #228]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a38      	ldr	r2, [pc, #224]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002c96:	f043 0301 	orr.w	r3, r3, #1
 8002c9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9c:	f7fe fa50 	bl	8001140 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ca4:	f7fe fa4c 	bl	8001140 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e1bd      	b.n	8003032 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb6:	4b30      	ldr	r3, [pc, #192]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0f0      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc2:	4b2d      	ldr	r3, [pc, #180]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	4929      	ldr	r1, [pc, #164]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	600b      	str	r3, [r1, #0]
 8002cd6:	e018      	b.n	8002d0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cd8:	4b27      	ldr	r3, [pc, #156]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a26      	ldr	r2, [pc, #152]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002cde:	f023 0301 	bic.w	r3, r3, #1
 8002ce2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7fe fa2c 	bl	8001140 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cec:	f7fe fa28 	bl	8001140 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e199      	b.n	8003032 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cfe:	4b1e      	ldr	r3, [pc, #120]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f0      	bne.n	8002cec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d038      	beq.n	8002d88 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d019      	beq.n	8002d52 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d1e:	4b16      	ldr	r3, [pc, #88]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d22:	4a15      	ldr	r2, [pc, #84]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002d24:	f043 0301 	orr.w	r3, r3, #1
 8002d28:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2a:	f7fe fa09 	bl	8001140 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d32:	f7fe fa05 	bl	8001140 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e176      	b.n	8003032 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d44:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0f0      	beq.n	8002d32 <HAL_RCC_OscConfig+0x23a>
 8002d50:	e01a      	b.n	8002d88 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d52:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d56:	4a08      	ldr	r2, [pc, #32]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002d58:	f023 0301 	bic.w	r3, r3, #1
 8002d5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5e:	f7fe f9ef 	bl	8001140 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d64:	e00a      	b.n	8002d7c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d66:	f7fe f9eb 	bl	8001140 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d903      	bls.n	8002d7c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e15c      	b.n	8003032 <HAL_RCC_OscConfig+0x53a>
 8002d78:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d7c:	4b91      	ldr	r3, [pc, #580]	; (8002fc4 <HAL_RCC_OscConfig+0x4cc>)
 8002d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1ee      	bne.n	8002d66 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80a4 	beq.w	8002ede <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d96:	4b8b      	ldr	r3, [pc, #556]	; (8002fc4 <HAL_RCC_OscConfig+0x4cc>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10d      	bne.n	8002dbe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da2:	4b88      	ldr	r3, [pc, #544]	; (8002fc4 <HAL_RCC_OscConfig+0x4cc>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	4a87      	ldr	r2, [pc, #540]	; (8002fc4 <HAL_RCC_OscConfig+0x4cc>)
 8002da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dac:	6413      	str	r3, [r2, #64]	; 0x40
 8002dae:	4b85      	ldr	r3, [pc, #532]	; (8002fc4 <HAL_RCC_OscConfig+0x4cc>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db6:	60bb      	str	r3, [r7, #8]
 8002db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dbe:	4b82      	ldr	r3, [pc, #520]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d118      	bne.n	8002dfc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002dca:	4b7f      	ldr	r3, [pc, #508]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a7e      	ldr	r2, [pc, #504]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dd6:	f7fe f9b3 	bl	8001140 <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dde:	f7fe f9af 	bl	8001140 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b64      	cmp	r3, #100	; 0x64
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e120      	b.n	8003032 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002df0:	4b75      	ldr	r3, [pc, #468]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0f0      	beq.n	8002dde <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d106      	bne.n	8002e12 <HAL_RCC_OscConfig+0x31a>
 8002e04:	4b6f      	ldr	r3, [pc, #444]	; (8002fc4 <HAL_RCC_OscConfig+0x4cc>)
 8002e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e08:	4a6e      	ldr	r2, [pc, #440]	; (8002fc4 <HAL_RCC_OscConfig+0x4cc>)
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e10:	e02d      	b.n	8002e6e <HAL_RCC_OscConfig+0x376>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10c      	bne.n	8002e34 <HAL_RCC_OscConfig+0x33c>
 8002e1a:	4b6a      	ldr	r3, [pc, #424]	; (8002fc4 <HAL_RCC_OscConfig+0x4cc>)
 8002e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1e:	4a69      	ldr	r2, [pc, #420]	; (8002fc4 <HAL_RCC_OscConfig+0x4cc>)
 8002e20:	f023 0301 	bic.w	r3, r3, #1
 8002e24:	6713      	str	r3, [r2, #112]	; 0x70
 8002e26:	4b67      	ldr	r3, [pc, #412]	; (8002fc4 <HAL_RCC_OscConfig+0x4cc>)
 8002e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2a:	4a66      	ldr	r2, [pc, #408]	; (8002fc4 <HAL_RCC_OscConfig+0x4cc>)
 8002e2c:	f023 0304 	bic.w	r3, r3, #4
 8002e30:	6713      	str	r3, [r2, #112]	; 0x70
 8002e32:	e01c      	b.n	8002e6e <HAL_RCC_OscConfig+0x376>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	2b05      	cmp	r3, #5
 8002e3a:	d10c      	bne.n	8002e56 <HAL_RCC_OscConfig+0x35e>
 8002e3c:	4b61      	ldr	r3, [pc, #388]	; (8002fc4 <HAL_RCC_OscConfig+0x4cc>)
 8002e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e40:	4a60      	ldr	r2, [pc, #384]	; (8002fc4 <HAL_RCC_OscConfig+0x4cc>)
 8002e42:	f043 0304 	orr.w	r3, r3, #4
 8002e46:	6713      	str	r3, [r2, #112]	; 0x70
 8002e48:	4b5e      	ldr	r3, [pc, #376]	; (8002fc4 <HAL_RCC_OscConfig+0x4cc>)
 8002e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4c:	4a5d      	ldr	r2, [pc, #372]	; (8002fc4 <HAL_RCC_OscConfig+0x4cc>)
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	6713      	str	r3, [r2, #112]	; 0x70
 8002e54:	e00b      	b.n	8002e6e <HAL_RCC_OscConfig+0x376>
 8002e56:	4b5b      	ldr	r3, [pc, #364]	; (8002fc4 <HAL_RCC_OscConfig+0x4cc>)
 8002e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5a:	4a5a      	ldr	r2, [pc, #360]	; (8002fc4 <HAL_RCC_OscConfig+0x4cc>)
 8002e5c:	f023 0301 	bic.w	r3, r3, #1
 8002e60:	6713      	str	r3, [r2, #112]	; 0x70
 8002e62:	4b58      	ldr	r3, [pc, #352]	; (8002fc4 <HAL_RCC_OscConfig+0x4cc>)
 8002e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e66:	4a57      	ldr	r2, [pc, #348]	; (8002fc4 <HAL_RCC_OscConfig+0x4cc>)
 8002e68:	f023 0304 	bic.w	r3, r3, #4
 8002e6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d015      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e76:	f7fe f963 	bl	8001140 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e7c:	e00a      	b.n	8002e94 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e7e:	f7fe f95f 	bl	8001140 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e0ce      	b.n	8003032 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e94:	4b4b      	ldr	r3, [pc, #300]	; (8002fc4 <HAL_RCC_OscConfig+0x4cc>)
 8002e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0ee      	beq.n	8002e7e <HAL_RCC_OscConfig+0x386>
 8002ea0:	e014      	b.n	8002ecc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea2:	f7fe f94d 	bl	8001140 <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea8:	e00a      	b.n	8002ec0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eaa:	f7fe f949 	bl	8001140 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e0b8      	b.n	8003032 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec0:	4b40      	ldr	r3, [pc, #256]	; (8002fc4 <HAL_RCC_OscConfig+0x4cc>)
 8002ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1ee      	bne.n	8002eaa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ecc:	7dfb      	ldrb	r3, [r7, #23]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d105      	bne.n	8002ede <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ed2:	4b3c      	ldr	r3, [pc, #240]	; (8002fc4 <HAL_RCC_OscConfig+0x4cc>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	4a3b      	ldr	r2, [pc, #236]	; (8002fc4 <HAL_RCC_OscConfig+0x4cc>)
 8002ed8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002edc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 80a4 	beq.w	8003030 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ee8:	4b36      	ldr	r3, [pc, #216]	; (8002fc4 <HAL_RCC_OscConfig+0x4cc>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 030c 	and.w	r3, r3, #12
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d06b      	beq.n	8002fcc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d149      	bne.n	8002f90 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002efc:	4b31      	ldr	r3, [pc, #196]	; (8002fc4 <HAL_RCC_OscConfig+0x4cc>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a30      	ldr	r2, [pc, #192]	; (8002fc4 <HAL_RCC_OscConfig+0x4cc>)
 8002f02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f08:	f7fe f91a 	bl	8001140 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f10:	f7fe f916 	bl	8001140 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e087      	b.n	8003032 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f22:	4b28      	ldr	r3, [pc, #160]	; (8002fc4 <HAL_RCC_OscConfig+0x4cc>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f0      	bne.n	8002f10 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69da      	ldr	r2, [r3, #28]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	019b      	lsls	r3, r3, #6
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f44:	085b      	lsrs	r3, r3, #1
 8002f46:	3b01      	subs	r3, #1
 8002f48:	041b      	lsls	r3, r3, #16
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	061b      	lsls	r3, r3, #24
 8002f52:	4313      	orrs	r3, r2
 8002f54:	4a1b      	ldr	r2, [pc, #108]	; (8002fc4 <HAL_RCC_OscConfig+0x4cc>)
 8002f56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002f5a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f5c:	4b19      	ldr	r3, [pc, #100]	; (8002fc4 <HAL_RCC_OscConfig+0x4cc>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a18      	ldr	r2, [pc, #96]	; (8002fc4 <HAL_RCC_OscConfig+0x4cc>)
 8002f62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f68:	f7fe f8ea 	bl	8001140 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f70:	f7fe f8e6 	bl	8001140 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e057      	b.n	8003032 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f82:	4b10      	ldr	r3, [pc, #64]	; (8002fc4 <HAL_RCC_OscConfig+0x4cc>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0f0      	beq.n	8002f70 <HAL_RCC_OscConfig+0x478>
 8002f8e:	e04f      	b.n	8003030 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f90:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <HAL_RCC_OscConfig+0x4cc>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a0b      	ldr	r2, [pc, #44]	; (8002fc4 <HAL_RCC_OscConfig+0x4cc>)
 8002f96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9c:	f7fe f8d0 	bl	8001140 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa4:	f7fe f8cc 	bl	8001140 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e03d      	b.n	8003032 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb6:	4b03      	ldr	r3, [pc, #12]	; (8002fc4 <HAL_RCC_OscConfig+0x4cc>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f0      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x4ac>
 8002fc2:	e035      	b.n	8003030 <HAL_RCC_OscConfig+0x538>
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002fcc:	4b1b      	ldr	r3, [pc, #108]	; (800303c <HAL_RCC_OscConfig+0x544>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d028      	beq.n	800302c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d121      	bne.n	800302c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d11a      	bne.n	800302c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003002:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003004:	4293      	cmp	r3, r2
 8003006:	d111      	bne.n	800302c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003012:	085b      	lsrs	r3, r3, #1
 8003014:	3b01      	subs	r3, #1
 8003016:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003018:	429a      	cmp	r2, r3
 800301a:	d107      	bne.n	800302c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003026:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003028:	429a      	cmp	r2, r3
 800302a:	d001      	beq.n	8003030 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e000      	b.n	8003032 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40023800 	.word	0x40023800

08003040 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800304a:	2300      	movs	r3, #0
 800304c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e0d0      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003058:	4b6a      	ldr	r3, [pc, #424]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d910      	bls.n	8003088 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003066:	4b67      	ldr	r3, [pc, #412]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f023 020f 	bic.w	r2, r3, #15
 800306e:	4965      	ldr	r1, [pc, #404]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	4313      	orrs	r3, r2
 8003074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003076:	4b63      	ldr	r3, [pc, #396]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d001      	beq.n	8003088 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e0b8      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d020      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030a0:	4b59      	ldr	r3, [pc, #356]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	4a58      	ldr	r2, [pc, #352]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 80030a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030b8:	4b53      	ldr	r3, [pc, #332]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	4a52      	ldr	r2, [pc, #328]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 80030be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030c4:	4b50      	ldr	r3, [pc, #320]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	494d      	ldr	r1, [pc, #308]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d040      	beq.n	8003164 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d107      	bne.n	80030fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ea:	4b47      	ldr	r3, [pc, #284]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d115      	bne.n	8003122 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e07f      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d107      	bne.n	8003112 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003102:	4b41      	ldr	r3, [pc, #260]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d109      	bne.n	8003122 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e073      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003112:	4b3d      	ldr	r3, [pc, #244]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e06b      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003122:	4b39      	ldr	r3, [pc, #228]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f023 0203 	bic.w	r2, r3, #3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	4936      	ldr	r1, [pc, #216]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 8003130:	4313      	orrs	r3, r2
 8003132:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003134:	f7fe f804 	bl	8001140 <HAL_GetTick>
 8003138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313a:	e00a      	b.n	8003152 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800313c:	f7fe f800 	bl	8001140 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	f241 3288 	movw	r2, #5000	; 0x1388
 800314a:	4293      	cmp	r3, r2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e053      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003152:	4b2d      	ldr	r3, [pc, #180]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 020c 	and.w	r2, r3, #12
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	429a      	cmp	r2, r3
 8003162:	d1eb      	bne.n	800313c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003164:	4b27      	ldr	r3, [pc, #156]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 030f 	and.w	r3, r3, #15
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d210      	bcs.n	8003194 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003172:	4b24      	ldr	r3, [pc, #144]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 020f 	bic.w	r2, r3, #15
 800317a:	4922      	ldr	r1, [pc, #136]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	4313      	orrs	r3, r2
 8003180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003182:	4b20      	ldr	r3, [pc, #128]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d001      	beq.n	8003194 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e032      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d008      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031a0:	4b19      	ldr	r3, [pc, #100]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	4916      	ldr	r1, [pc, #88]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d009      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031be:	4b12      	ldr	r3, [pc, #72]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	490e      	ldr	r1, [pc, #56]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031d2:	f000 f821 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 80031d6:	4602      	mov	r2, r0
 80031d8:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	091b      	lsrs	r3, r3, #4
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	490a      	ldr	r1, [pc, #40]	; (800320c <HAL_RCC_ClockConfig+0x1cc>)
 80031e4:	5ccb      	ldrb	r3, [r1, r3]
 80031e6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ea:	4a09      	ldr	r2, [pc, #36]	; (8003210 <HAL_RCC_ClockConfig+0x1d0>)
 80031ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031ee:	4b09      	ldr	r3, [pc, #36]	; (8003214 <HAL_RCC_ClockConfig+0x1d4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fd ff60 	bl	80010b8 <HAL_InitTick>

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40023c00 	.word	0x40023c00
 8003208:	40023800 	.word	0x40023800
 800320c:	08005e2c 	.word	0x08005e2c
 8003210:	20000000 	.word	0x20000000
 8003214:	20000004 	.word	0x20000004

08003218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003218:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800321c:	b084      	sub	sp, #16
 800321e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003220:	2300      	movs	r3, #0
 8003222:	607b      	str	r3, [r7, #4]
 8003224:	2300      	movs	r3, #0
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	2300      	movs	r3, #0
 800322a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800322c:	2300      	movs	r3, #0
 800322e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003230:	4b67      	ldr	r3, [pc, #412]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 030c 	and.w	r3, r3, #12
 8003238:	2b08      	cmp	r3, #8
 800323a:	d00d      	beq.n	8003258 <HAL_RCC_GetSysClockFreq+0x40>
 800323c:	2b08      	cmp	r3, #8
 800323e:	f200 80bd 	bhi.w	80033bc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <HAL_RCC_GetSysClockFreq+0x34>
 8003246:	2b04      	cmp	r3, #4
 8003248:	d003      	beq.n	8003252 <HAL_RCC_GetSysClockFreq+0x3a>
 800324a:	e0b7      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800324c:	4b61      	ldr	r3, [pc, #388]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800324e:	60bb      	str	r3, [r7, #8]
      break;
 8003250:	e0b7      	b.n	80033c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003252:	4b61      	ldr	r3, [pc, #388]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003254:	60bb      	str	r3, [r7, #8]
      break;
 8003256:	e0b4      	b.n	80033c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003258:	4b5d      	ldr	r3, [pc, #372]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003260:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003262:	4b5b      	ldr	r3, [pc, #364]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d04d      	beq.n	800330a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800326e:	4b58      	ldr	r3, [pc, #352]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	099b      	lsrs	r3, r3, #6
 8003274:	461a      	mov	r2, r3
 8003276:	f04f 0300 	mov.w	r3, #0
 800327a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800327e:	f04f 0100 	mov.w	r1, #0
 8003282:	ea02 0800 	and.w	r8, r2, r0
 8003286:	ea03 0901 	and.w	r9, r3, r1
 800328a:	4640      	mov	r0, r8
 800328c:	4649      	mov	r1, r9
 800328e:	f04f 0200 	mov.w	r2, #0
 8003292:	f04f 0300 	mov.w	r3, #0
 8003296:	014b      	lsls	r3, r1, #5
 8003298:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800329c:	0142      	lsls	r2, r0, #5
 800329e:	4610      	mov	r0, r2
 80032a0:	4619      	mov	r1, r3
 80032a2:	ebb0 0008 	subs.w	r0, r0, r8
 80032a6:	eb61 0109 	sbc.w	r1, r1, r9
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	f04f 0300 	mov.w	r3, #0
 80032b2:	018b      	lsls	r3, r1, #6
 80032b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032b8:	0182      	lsls	r2, r0, #6
 80032ba:	1a12      	subs	r2, r2, r0
 80032bc:	eb63 0301 	sbc.w	r3, r3, r1
 80032c0:	f04f 0000 	mov.w	r0, #0
 80032c4:	f04f 0100 	mov.w	r1, #0
 80032c8:	00d9      	lsls	r1, r3, #3
 80032ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032ce:	00d0      	lsls	r0, r2, #3
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	eb12 0208 	adds.w	r2, r2, r8
 80032d8:	eb43 0309 	adc.w	r3, r3, r9
 80032dc:	f04f 0000 	mov.w	r0, #0
 80032e0:	f04f 0100 	mov.w	r1, #0
 80032e4:	0259      	lsls	r1, r3, #9
 80032e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80032ea:	0250      	lsls	r0, r2, #9
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4610      	mov	r0, r2
 80032f2:	4619      	mov	r1, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	461a      	mov	r2, r3
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	f7fc ffe0 	bl	80002c0 <__aeabi_uldivmod>
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	4613      	mov	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	e04a      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800330a:	4b31      	ldr	r3, [pc, #196]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	099b      	lsrs	r3, r3, #6
 8003310:	461a      	mov	r2, r3
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	f240 10ff 	movw	r0, #511	; 0x1ff
 800331a:	f04f 0100 	mov.w	r1, #0
 800331e:	ea02 0400 	and.w	r4, r2, r0
 8003322:	ea03 0501 	and.w	r5, r3, r1
 8003326:	4620      	mov	r0, r4
 8003328:	4629      	mov	r1, r5
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	014b      	lsls	r3, r1, #5
 8003334:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003338:	0142      	lsls	r2, r0, #5
 800333a:	4610      	mov	r0, r2
 800333c:	4619      	mov	r1, r3
 800333e:	1b00      	subs	r0, r0, r4
 8003340:	eb61 0105 	sbc.w	r1, r1, r5
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	f04f 0300 	mov.w	r3, #0
 800334c:	018b      	lsls	r3, r1, #6
 800334e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003352:	0182      	lsls	r2, r0, #6
 8003354:	1a12      	subs	r2, r2, r0
 8003356:	eb63 0301 	sbc.w	r3, r3, r1
 800335a:	f04f 0000 	mov.w	r0, #0
 800335e:	f04f 0100 	mov.w	r1, #0
 8003362:	00d9      	lsls	r1, r3, #3
 8003364:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003368:	00d0      	lsls	r0, r2, #3
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	1912      	adds	r2, r2, r4
 8003370:	eb45 0303 	adc.w	r3, r5, r3
 8003374:	f04f 0000 	mov.w	r0, #0
 8003378:	f04f 0100 	mov.w	r1, #0
 800337c:	0299      	lsls	r1, r3, #10
 800337e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003382:	0290      	lsls	r0, r2, #10
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4610      	mov	r0, r2
 800338a:	4619      	mov	r1, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	461a      	mov	r2, r3
 8003390:	f04f 0300 	mov.w	r3, #0
 8003394:	f7fc ff94 	bl	80002c0 <__aeabi_uldivmod>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4613      	mov	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80033a0:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	0c1b      	lsrs	r3, r3, #16
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	3301      	adds	r3, #1
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b8:	60bb      	str	r3, [r7, #8]
      break;
 80033ba:	e002      	b.n	80033c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033bc:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80033be:	60bb      	str	r3, [r7, #8]
      break;
 80033c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033c2:	68bb      	ldr	r3, [r7, #8]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80033ce:	bf00      	nop
 80033d0:	40023800 	.word	0x40023800
 80033d4:	00f42400 	.word	0x00f42400
 80033d8:	007a1200 	.word	0x007a1200

080033dc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033e0:	4b03      	ldr	r3, [pc, #12]	; (80033f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033e2:	681b      	ldr	r3, [r3, #0]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	20000000 	.word	0x20000000

080033f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033f8:	f7ff fff0 	bl	80033dc <HAL_RCC_GetHCLKFreq>
 80033fc:	4602      	mov	r2, r0
 80033fe:	4b05      	ldr	r3, [pc, #20]	; (8003414 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	0a9b      	lsrs	r3, r3, #10
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	4903      	ldr	r1, [pc, #12]	; (8003418 <HAL_RCC_GetPCLK1Freq+0x24>)
 800340a:	5ccb      	ldrb	r3, [r1, r3]
 800340c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003410:	4618      	mov	r0, r3
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40023800 	.word	0x40023800
 8003418:	08005e3c 	.word	0x08005e3c

0800341c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003420:	f7ff ffdc 	bl	80033dc <HAL_RCC_GetHCLKFreq>
 8003424:	4602      	mov	r2, r0
 8003426:	4b05      	ldr	r3, [pc, #20]	; (800343c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	0b5b      	lsrs	r3, r3, #13
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	4903      	ldr	r1, [pc, #12]	; (8003440 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003432:	5ccb      	ldrb	r3, [r1, r3]
 8003434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003438:	4618      	mov	r0, r3
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40023800 	.word	0x40023800
 8003440:	08005e3c 	.word	0x08005e3c

08003444 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b088      	sub	sp, #32
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003450:	2300      	movs	r3, #0
 8003452:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003454:	2300      	movs	r3, #0
 8003456:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003458:	2300      	movs	r3, #0
 800345a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800345c:	2300      	movs	r3, #0
 800345e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b00      	cmp	r3, #0
 800346a:	d012      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800346c:	4b69      	ldr	r3, [pc, #420]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	4a68      	ldr	r2, [pc, #416]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003472:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003476:	6093      	str	r3, [r2, #8]
 8003478:	4b66      	ldr	r3, [pc, #408]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800347a:	689a      	ldr	r2, [r3, #8]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003480:	4964      	ldr	r1, [pc, #400]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003482:	4313      	orrs	r3, r2
 8003484:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800348e:	2301      	movs	r3, #1
 8003490:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d017      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800349e:	4b5d      	ldr	r3, [pc, #372]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ac:	4959      	ldr	r1, [pc, #356]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034bc:	d101      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80034be:	2301      	movs	r3, #1
 80034c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80034ca:	2301      	movs	r3, #1
 80034cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d017      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034da:	4b4e      	ldr	r3, [pc, #312]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e8:	494a      	ldr	r1, [pc, #296]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034f8:	d101      	bne.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80034fa:	2301      	movs	r3, #1
 80034fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003506:	2301      	movs	r3, #1
 8003508:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003516:	2301      	movs	r3, #1
 8003518:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0320 	and.w	r3, r3, #32
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 808b 	beq.w	800363e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003528:	4b3a      	ldr	r3, [pc, #232]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352c:	4a39      	ldr	r2, [pc, #228]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003532:	6413      	str	r3, [r2, #64]	; 0x40
 8003534:	4b37      	ldr	r3, [pc, #220]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353c:	60bb      	str	r3, [r7, #8]
 800353e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003540:	4b35      	ldr	r3, [pc, #212]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a34      	ldr	r2, [pc, #208]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800354a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800354c:	f7fd fdf8 	bl	8001140 <HAL_GetTick>
 8003550:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003552:	e008      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003554:	f7fd fdf4 	bl	8001140 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b64      	cmp	r3, #100	; 0x64
 8003560:	d901      	bls.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e357      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003566:	4b2c      	ldr	r3, [pc, #176]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003572:	4b28      	ldr	r3, [pc, #160]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800357a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d035      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	429a      	cmp	r2, r3
 800358e:	d02e      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003590:	4b20      	ldr	r3, [pc, #128]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003598:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800359a:	4b1e      	ldr	r3, [pc, #120]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800359c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359e:	4a1d      	ldr	r2, [pc, #116]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035a6:	4b1b      	ldr	r3, [pc, #108]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035aa:	4a1a      	ldr	r2, [pc, #104]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80035b2:	4a18      	ldr	r2, [pc, #96]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80035b8:	4b16      	ldr	r3, [pc, #88]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d114      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c4:	f7fd fdbc 	bl	8001140 <HAL_GetTick>
 80035c8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ca:	e00a      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035cc:	f7fd fdb8 	bl	8001140 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035da:	4293      	cmp	r3, r2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e319      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e2:	4b0c      	ldr	r3, [pc, #48]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0ee      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035fa:	d111      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80035fc:	4b05      	ldr	r3, [pc, #20]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003608:	4b04      	ldr	r3, [pc, #16]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800360a:	400b      	ands	r3, r1
 800360c:	4901      	ldr	r1, [pc, #4]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800360e:	4313      	orrs	r3, r2
 8003610:	608b      	str	r3, [r1, #8]
 8003612:	e00b      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003614:	40023800 	.word	0x40023800
 8003618:	40007000 	.word	0x40007000
 800361c:	0ffffcff 	.word	0x0ffffcff
 8003620:	4bb1      	ldr	r3, [pc, #708]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	4ab0      	ldr	r2, [pc, #704]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003626:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800362a:	6093      	str	r3, [r2, #8]
 800362c:	4bae      	ldr	r3, [pc, #696]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800362e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003638:	49ab      	ldr	r1, [pc, #684]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800363a:	4313      	orrs	r3, r2
 800363c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0310 	and.w	r3, r3, #16
 8003646:	2b00      	cmp	r3, #0
 8003648:	d010      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800364a:	4ba7      	ldr	r3, [pc, #668]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800364c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003650:	4aa5      	ldr	r2, [pc, #660]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003652:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003656:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800365a:	4ba3      	ldr	r3, [pc, #652]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800365c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003664:	49a0      	ldr	r1, [pc, #640]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003666:	4313      	orrs	r3, r2
 8003668:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00a      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003678:	4b9b      	ldr	r3, [pc, #620]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800367a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003686:	4998      	ldr	r1, [pc, #608]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800369a:	4b93      	ldr	r3, [pc, #588]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800369c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036a8:	498f      	ldr	r1, [pc, #572]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00a      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036bc:	4b8a      	ldr	r3, [pc, #552]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80036be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ca:	4987      	ldr	r1, [pc, #540]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036de:	4b82      	ldr	r3, [pc, #520]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80036e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ec:	497e      	ldr	r1, [pc, #504]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00a      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003700:	4b79      	ldr	r3, [pc, #484]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003706:	f023 0203 	bic.w	r2, r3, #3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370e:	4976      	ldr	r1, [pc, #472]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003710:	4313      	orrs	r3, r2
 8003712:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00a      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003722:	4b71      	ldr	r3, [pc, #452]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003728:	f023 020c 	bic.w	r2, r3, #12
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003730:	496d      	ldr	r1, [pc, #436]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003732:	4313      	orrs	r3, r2
 8003734:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00a      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003744:	4b68      	ldr	r3, [pc, #416]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003752:	4965      	ldr	r1, [pc, #404]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003754:	4313      	orrs	r3, r2
 8003756:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00a      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003766:	4b60      	ldr	r3, [pc, #384]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003774:	495c      	ldr	r1, [pc, #368]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003776:	4313      	orrs	r3, r2
 8003778:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00a      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003788:	4b57      	ldr	r3, [pc, #348]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800378a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003796:	4954      	ldr	r1, [pc, #336]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00a      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80037aa:	4b4f      	ldr	r3, [pc, #316]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b8:	494b      	ldr	r1, [pc, #300]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00a      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80037cc:	4b46      	ldr	r3, [pc, #280]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037da:	4943      	ldr	r1, [pc, #268]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00a      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80037ee:	4b3e      	ldr	r3, [pc, #248]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037fc:	493a      	ldr	r1, [pc, #232]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00a      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003810:	4b35      	ldr	r3, [pc, #212]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003816:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800381e:	4932      	ldr	r1, [pc, #200]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003820:	4313      	orrs	r3, r2
 8003822:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d011      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003832:	4b2d      	ldr	r3, [pc, #180]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003838:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003840:	4929      	ldr	r1, [pc, #164]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800384c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003850:	d101      	bne.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003852:	2301      	movs	r3, #1
 8003854:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003862:	2301      	movs	r3, #1
 8003864:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00a      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003872:	4b1d      	ldr	r3, [pc, #116]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003878:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003880:	4919      	ldr	r1, [pc, #100]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003882:	4313      	orrs	r3, r2
 8003884:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00b      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003894:	4b14      	ldr	r3, [pc, #80]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038a4:	4910      	ldr	r1, [pc, #64]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d006      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 80d9 	beq.w	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80038c0:	4b09      	ldr	r3, [pc, #36]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a08      	ldr	r2, [pc, #32]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038cc:	f7fd fc38 	bl	8001140 <HAL_GetTick>
 80038d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038d2:	e00b      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038d4:	f7fd fc34 	bl	8001140 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b64      	cmp	r3, #100	; 0x64
 80038e0:	d904      	bls.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e197      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80038e6:	bf00      	nop
 80038e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038ec:	4b6c      	ldr	r3, [pc, #432]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1ed      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b00      	cmp	r3, #0
 8003902:	d021      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003908:	2b00      	cmp	r3, #0
 800390a:	d11d      	bne.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800390c:	4b64      	ldr	r3, [pc, #400]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800390e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003912:	0c1b      	lsrs	r3, r3, #16
 8003914:	f003 0303 	and.w	r3, r3, #3
 8003918:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800391a:	4b61      	ldr	r3, [pc, #388]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800391c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003920:	0e1b      	lsrs	r3, r3, #24
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	019a      	lsls	r2, r3, #6
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	041b      	lsls	r3, r3, #16
 8003932:	431a      	orrs	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	061b      	lsls	r3, r3, #24
 8003938:	431a      	orrs	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	071b      	lsls	r3, r3, #28
 8003940:	4957      	ldr	r1, [pc, #348]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d004      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003958:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800395c:	d00a      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003966:	2b00      	cmp	r3, #0
 8003968:	d02e      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003972:	d129      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003974:	4b4a      	ldr	r3, [pc, #296]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003976:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800397a:	0c1b      	lsrs	r3, r3, #16
 800397c:	f003 0303 	and.w	r3, r3, #3
 8003980:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003982:	4b47      	ldr	r3, [pc, #284]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003984:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003988:	0f1b      	lsrs	r3, r3, #28
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	019a      	lsls	r2, r3, #6
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	041b      	lsls	r3, r3, #16
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	061b      	lsls	r3, r3, #24
 80039a2:	431a      	orrs	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	071b      	lsls	r3, r3, #28
 80039a8:	493d      	ldr	r1, [pc, #244]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80039b0:	4b3b      	ldr	r3, [pc, #236]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039b6:	f023 021f 	bic.w	r2, r3, #31
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	3b01      	subs	r3, #1
 80039c0:	4937      	ldr	r1, [pc, #220]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d01d      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039d4:	4b32      	ldr	r3, [pc, #200]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039da:	0e1b      	lsrs	r3, r3, #24
 80039dc:	f003 030f 	and.w	r3, r3, #15
 80039e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80039e2:	4b2f      	ldr	r3, [pc, #188]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039e8:	0f1b      	lsrs	r3, r3, #28
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	019a      	lsls	r2, r3, #6
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	041b      	lsls	r3, r3, #16
 80039fc:	431a      	orrs	r2, r3
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	061b      	lsls	r3, r3, #24
 8003a02:	431a      	orrs	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	071b      	lsls	r3, r3, #28
 8003a08:	4925      	ldr	r1, [pc, #148]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d011      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	019a      	lsls	r2, r3, #6
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	041b      	lsls	r3, r3, #16
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	061b      	lsls	r3, r3, #24
 8003a30:	431a      	orrs	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	071b      	lsls	r3, r3, #28
 8003a38:	4919      	ldr	r1, [pc, #100]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a40:	4b17      	ldr	r3, [pc, #92]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a16      	ldr	r2, [pc, #88]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a4c:	f7fd fb78 	bl	8001140 <HAL_GetTick>
 8003a50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a52:	e008      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a54:	f7fd fb74 	bl	8001140 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b64      	cmp	r3, #100	; 0x64
 8003a60:	d901      	bls.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e0d7      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a66:	4b0e      	ldr	r3, [pc, #56]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0f0      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	f040 80cd 	bne.w	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003a7a:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a08      	ldr	r2, [pc, #32]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a86:	f7fd fb5b 	bl	8001140 <HAL_GetTick>
 8003a8a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a8c:	e00a      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a8e:	f7fd fb57 	bl	8001140 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b64      	cmp	r3, #100	; 0x64
 8003a9a:	d903      	bls.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e0ba      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003aa0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003aa4:	4b5e      	ldr	r3, [pc, #376]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003aac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ab0:	d0ed      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d009      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d02e      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d12a      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ada:	4b51      	ldr	r3, [pc, #324]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae0:	0c1b      	lsrs	r3, r3, #16
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ae8:	4b4d      	ldr	r3, [pc, #308]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aee:	0f1b      	lsrs	r3, r3, #28
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	019a      	lsls	r2, r3, #6
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	041b      	lsls	r3, r3, #16
 8003b00:	431a      	orrs	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	061b      	lsls	r3, r3, #24
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	071b      	lsls	r3, r3, #28
 8003b0e:	4944      	ldr	r1, [pc, #272]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b16:	4b42      	ldr	r3, [pc, #264]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b1c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b24:	3b01      	subs	r3, #1
 8003b26:	021b      	lsls	r3, r3, #8
 8003b28:	493d      	ldr	r1, [pc, #244]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d022      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b44:	d11d      	bne.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b46:	4b36      	ldr	r3, [pc, #216]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4c:	0e1b      	lsrs	r3, r3, #24
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b54:	4b32      	ldr	r3, [pc, #200]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5a:	0f1b      	lsrs	r3, r3, #28
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	019a      	lsls	r2, r3, #6
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	041b      	lsls	r3, r3, #16
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	061b      	lsls	r3, r3, #24
 8003b74:	431a      	orrs	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	071b      	lsls	r3, r3, #28
 8003b7a:	4929      	ldr	r1, [pc, #164]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d028      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b8e:	4b24      	ldr	r3, [pc, #144]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b94:	0e1b      	lsrs	r3, r3, #24
 8003b96:	f003 030f 	and.w	r3, r3, #15
 8003b9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b9c:	4b20      	ldr	r3, [pc, #128]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba2:	0c1b      	lsrs	r3, r3, #16
 8003ba4:	f003 0303 	and.w	r3, r3, #3
 8003ba8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	019a      	lsls	r2, r3, #6
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	041b      	lsls	r3, r3, #16
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	061b      	lsls	r3, r3, #24
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	071b      	lsls	r3, r3, #28
 8003bc2:	4917      	ldr	r1, [pc, #92]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003bca:	4b15      	ldr	r3, [pc, #84]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd8:	4911      	ldr	r1, [pc, #68]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003be0:	4b0f      	ldr	r3, [pc, #60]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a0e      	ldr	r2, [pc, #56]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bec:	f7fd faa8 	bl	8001140 <HAL_GetTick>
 8003bf0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bf4:	f7fd faa4 	bl	8001140 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b64      	cmp	r3, #100	; 0x64
 8003c00:	d901      	bls.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e007      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c06:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c12:	d1ef      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3720      	adds	r7, #32
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40023800 	.word	0x40023800

08003c24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e049      	b.n	8003cca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d106      	bne.n	8003c50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7fd f8b0 	bl	8000db0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3304      	adds	r3, #4
 8003c60:	4619      	mov	r1, r3
 8003c62:	4610      	mov	r0, r2
 8003c64:	f000 fac0 	bl	80041e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
	...

08003cd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d001      	beq.n	8003cec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e054      	b.n	8003d96 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f042 0201 	orr.w	r2, r2, #1
 8003d02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a26      	ldr	r2, [pc, #152]	; (8003da4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d022      	beq.n	8003d54 <HAL_TIM_Base_Start_IT+0x80>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d16:	d01d      	beq.n	8003d54 <HAL_TIM_Base_Start_IT+0x80>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a22      	ldr	r2, [pc, #136]	; (8003da8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d018      	beq.n	8003d54 <HAL_TIM_Base_Start_IT+0x80>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a21      	ldr	r2, [pc, #132]	; (8003dac <HAL_TIM_Base_Start_IT+0xd8>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d013      	beq.n	8003d54 <HAL_TIM_Base_Start_IT+0x80>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a1f      	ldr	r2, [pc, #124]	; (8003db0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d00e      	beq.n	8003d54 <HAL_TIM_Base_Start_IT+0x80>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a1e      	ldr	r2, [pc, #120]	; (8003db4 <HAL_TIM_Base_Start_IT+0xe0>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d009      	beq.n	8003d54 <HAL_TIM_Base_Start_IT+0x80>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a1c      	ldr	r2, [pc, #112]	; (8003db8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d004      	beq.n	8003d54 <HAL_TIM_Base_Start_IT+0x80>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a1b      	ldr	r2, [pc, #108]	; (8003dbc <HAL_TIM_Base_Start_IT+0xe8>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d115      	bne.n	8003d80 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689a      	ldr	r2, [r3, #8]
 8003d5a:	4b19      	ldr	r3, [pc, #100]	; (8003dc0 <HAL_TIM_Base_Start_IT+0xec>)
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2b06      	cmp	r3, #6
 8003d64:	d015      	beq.n	8003d92 <HAL_TIM_Base_Start_IT+0xbe>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d6c:	d011      	beq.n	8003d92 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f042 0201 	orr.w	r2, r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d7e:	e008      	b.n	8003d92 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 0201 	orr.w	r2, r2, #1
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	e000      	b.n	8003d94 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40010000 	.word	0x40010000
 8003da8:	40000400 	.word	0x40000400
 8003dac:	40000800 	.word	0x40000800
 8003db0:	40000c00 	.word	0x40000c00
 8003db4:	40010400 	.word	0x40010400
 8003db8:	40014000 	.word	0x40014000
 8003dbc:	40001800 	.word	0x40001800
 8003dc0:	00010007 	.word	0x00010007

08003dc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d122      	bne.n	8003e20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d11b      	bne.n	8003e20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f06f 0202 	mvn.w	r2, #2
 8003df0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d003      	beq.n	8003e0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f9d0 	bl	80041ac <HAL_TIM_IC_CaptureCallback>
 8003e0c:	e005      	b.n	8003e1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f9c2 	bl	8004198 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f9d3 	bl	80041c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	f003 0304 	and.w	r3, r3, #4
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	d122      	bne.n	8003e74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d11b      	bne.n	8003e74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f06f 0204 	mvn.w	r2, #4
 8003e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2202      	movs	r2, #2
 8003e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d003      	beq.n	8003e62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f9a6 	bl	80041ac <HAL_TIM_IC_CaptureCallback>
 8003e60:	e005      	b.n	8003e6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f998 	bl	8004198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 f9a9 	bl	80041c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b08      	cmp	r3, #8
 8003e80:	d122      	bne.n	8003ec8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d11b      	bne.n	8003ec8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f06f 0208 	mvn.w	r2, #8
 8003e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2204      	movs	r2, #4
 8003e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	f003 0303 	and.w	r3, r3, #3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f97c 	bl	80041ac <HAL_TIM_IC_CaptureCallback>
 8003eb4:	e005      	b.n	8003ec2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f96e 	bl	8004198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f97f 	bl	80041c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f003 0310 	and.w	r3, r3, #16
 8003ed2:	2b10      	cmp	r3, #16
 8003ed4:	d122      	bne.n	8003f1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f003 0310 	and.w	r3, r3, #16
 8003ee0:	2b10      	cmp	r3, #16
 8003ee2:	d11b      	bne.n	8003f1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f06f 0210 	mvn.w	r2, #16
 8003eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2208      	movs	r2, #8
 8003ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f952 	bl	80041ac <HAL_TIM_IC_CaptureCallback>
 8003f08:	e005      	b.n	8003f16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f944 	bl	8004198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f955 	bl	80041c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d10e      	bne.n	8003f48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d107      	bne.n	8003f48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f06f 0201 	mvn.w	r2, #1
 8003f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7fc fdcc 	bl	8000ae0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f52:	2b80      	cmp	r3, #128	; 0x80
 8003f54:	d10e      	bne.n	8003f74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f60:	2b80      	cmp	r3, #128	; 0x80
 8003f62:	d107      	bne.n	8003f74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 fb0c 	bl	800458c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f82:	d10e      	bne.n	8003fa2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8e:	2b80      	cmp	r3, #128	; 0x80
 8003f90:	d107      	bne.n	8003fa2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 faff 	bl	80045a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fac:	2b40      	cmp	r3, #64	; 0x40
 8003fae:	d10e      	bne.n	8003fce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fba:	2b40      	cmp	r3, #64	; 0x40
 8003fbc:	d107      	bne.n	8003fce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f903 	bl	80041d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	f003 0320 	and.w	r3, r3, #32
 8003fd8:	2b20      	cmp	r3, #32
 8003fda:	d10e      	bne.n	8003ffa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f003 0320 	and.w	r3, r3, #32
 8003fe6:	2b20      	cmp	r3, #32
 8003fe8:	d107      	bne.n	8003ffa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f06f 0220 	mvn.w	r2, #32
 8003ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 fabf 	bl	8004578 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ffa:	bf00      	nop
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
	...

08004004 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800400e:	2300      	movs	r3, #0
 8004010:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <HAL_TIM_ConfigClockSource+0x1c>
 800401c:	2302      	movs	r3, #2
 800401e:	e0b4      	b.n	800418a <HAL_TIM_ConfigClockSource+0x186>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2202      	movs	r2, #2
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	4b56      	ldr	r3, [pc, #344]	; (8004194 <HAL_TIM_ConfigClockSource+0x190>)
 800403c:	4013      	ands	r3, r2
 800403e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004046:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004058:	d03e      	beq.n	80040d8 <HAL_TIM_ConfigClockSource+0xd4>
 800405a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800405e:	f200 8087 	bhi.w	8004170 <HAL_TIM_ConfigClockSource+0x16c>
 8004062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004066:	f000 8086 	beq.w	8004176 <HAL_TIM_ConfigClockSource+0x172>
 800406a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800406e:	d87f      	bhi.n	8004170 <HAL_TIM_ConfigClockSource+0x16c>
 8004070:	2b70      	cmp	r3, #112	; 0x70
 8004072:	d01a      	beq.n	80040aa <HAL_TIM_ConfigClockSource+0xa6>
 8004074:	2b70      	cmp	r3, #112	; 0x70
 8004076:	d87b      	bhi.n	8004170 <HAL_TIM_ConfigClockSource+0x16c>
 8004078:	2b60      	cmp	r3, #96	; 0x60
 800407a:	d050      	beq.n	800411e <HAL_TIM_ConfigClockSource+0x11a>
 800407c:	2b60      	cmp	r3, #96	; 0x60
 800407e:	d877      	bhi.n	8004170 <HAL_TIM_ConfigClockSource+0x16c>
 8004080:	2b50      	cmp	r3, #80	; 0x50
 8004082:	d03c      	beq.n	80040fe <HAL_TIM_ConfigClockSource+0xfa>
 8004084:	2b50      	cmp	r3, #80	; 0x50
 8004086:	d873      	bhi.n	8004170 <HAL_TIM_ConfigClockSource+0x16c>
 8004088:	2b40      	cmp	r3, #64	; 0x40
 800408a:	d058      	beq.n	800413e <HAL_TIM_ConfigClockSource+0x13a>
 800408c:	2b40      	cmp	r3, #64	; 0x40
 800408e:	d86f      	bhi.n	8004170 <HAL_TIM_ConfigClockSource+0x16c>
 8004090:	2b30      	cmp	r3, #48	; 0x30
 8004092:	d064      	beq.n	800415e <HAL_TIM_ConfigClockSource+0x15a>
 8004094:	2b30      	cmp	r3, #48	; 0x30
 8004096:	d86b      	bhi.n	8004170 <HAL_TIM_ConfigClockSource+0x16c>
 8004098:	2b20      	cmp	r3, #32
 800409a:	d060      	beq.n	800415e <HAL_TIM_ConfigClockSource+0x15a>
 800409c:	2b20      	cmp	r3, #32
 800409e:	d867      	bhi.n	8004170 <HAL_TIM_ConfigClockSource+0x16c>
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d05c      	beq.n	800415e <HAL_TIM_ConfigClockSource+0x15a>
 80040a4:	2b10      	cmp	r3, #16
 80040a6:	d05a      	beq.n	800415e <HAL_TIM_ConfigClockSource+0x15a>
 80040a8:	e062      	b.n	8004170 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6818      	ldr	r0, [r3, #0]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	6899      	ldr	r1, [r3, #8]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f000 f9af 	bl	800441c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	609a      	str	r2, [r3, #8]
      break;
 80040d6:	e04f      	b.n	8004178 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6818      	ldr	r0, [r3, #0]
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	6899      	ldr	r1, [r3, #8]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f000 f998 	bl	800441c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040fa:	609a      	str	r2, [r3, #8]
      break;
 80040fc:	e03c      	b.n	8004178 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6818      	ldr	r0, [r3, #0]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	6859      	ldr	r1, [r3, #4]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	461a      	mov	r2, r3
 800410c:	f000 f90c 	bl	8004328 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2150      	movs	r1, #80	; 0x50
 8004116:	4618      	mov	r0, r3
 8004118:	f000 f965 	bl	80043e6 <TIM_ITRx_SetConfig>
      break;
 800411c:	e02c      	b.n	8004178 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6818      	ldr	r0, [r3, #0]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	6859      	ldr	r1, [r3, #4]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	461a      	mov	r2, r3
 800412c:	f000 f92b 	bl	8004386 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2160      	movs	r1, #96	; 0x60
 8004136:	4618      	mov	r0, r3
 8004138:	f000 f955 	bl	80043e6 <TIM_ITRx_SetConfig>
      break;
 800413c:	e01c      	b.n	8004178 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6818      	ldr	r0, [r3, #0]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	6859      	ldr	r1, [r3, #4]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	461a      	mov	r2, r3
 800414c:	f000 f8ec 	bl	8004328 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2140      	movs	r1, #64	; 0x40
 8004156:	4618      	mov	r0, r3
 8004158:	f000 f945 	bl	80043e6 <TIM_ITRx_SetConfig>
      break;
 800415c:	e00c      	b.n	8004178 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4619      	mov	r1, r3
 8004168:	4610      	mov	r0, r2
 800416a:	f000 f93c 	bl	80043e6 <TIM_ITRx_SetConfig>
      break;
 800416e:	e003      	b.n	8004178 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	73fb      	strb	r3, [r7, #15]
      break;
 8004174:	e000      	b.n	8004178 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004176:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004188:	7bfb      	ldrb	r3, [r7, #15]
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	fffeff88 	.word	0xfffeff88

08004198 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a40      	ldr	r2, [pc, #256]	; (80042fc <TIM_Base_SetConfig+0x114>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d013      	beq.n	8004228 <TIM_Base_SetConfig+0x40>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004206:	d00f      	beq.n	8004228 <TIM_Base_SetConfig+0x40>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a3d      	ldr	r2, [pc, #244]	; (8004300 <TIM_Base_SetConfig+0x118>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d00b      	beq.n	8004228 <TIM_Base_SetConfig+0x40>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a3c      	ldr	r2, [pc, #240]	; (8004304 <TIM_Base_SetConfig+0x11c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d007      	beq.n	8004228 <TIM_Base_SetConfig+0x40>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a3b      	ldr	r2, [pc, #236]	; (8004308 <TIM_Base_SetConfig+0x120>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d003      	beq.n	8004228 <TIM_Base_SetConfig+0x40>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a3a      	ldr	r2, [pc, #232]	; (800430c <TIM_Base_SetConfig+0x124>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d108      	bne.n	800423a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800422e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	4313      	orrs	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a2f      	ldr	r2, [pc, #188]	; (80042fc <TIM_Base_SetConfig+0x114>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d02b      	beq.n	800429a <TIM_Base_SetConfig+0xb2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004248:	d027      	beq.n	800429a <TIM_Base_SetConfig+0xb2>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a2c      	ldr	r2, [pc, #176]	; (8004300 <TIM_Base_SetConfig+0x118>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d023      	beq.n	800429a <TIM_Base_SetConfig+0xb2>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a2b      	ldr	r2, [pc, #172]	; (8004304 <TIM_Base_SetConfig+0x11c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d01f      	beq.n	800429a <TIM_Base_SetConfig+0xb2>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a2a      	ldr	r2, [pc, #168]	; (8004308 <TIM_Base_SetConfig+0x120>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d01b      	beq.n	800429a <TIM_Base_SetConfig+0xb2>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a29      	ldr	r2, [pc, #164]	; (800430c <TIM_Base_SetConfig+0x124>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d017      	beq.n	800429a <TIM_Base_SetConfig+0xb2>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a28      	ldr	r2, [pc, #160]	; (8004310 <TIM_Base_SetConfig+0x128>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d013      	beq.n	800429a <TIM_Base_SetConfig+0xb2>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a27      	ldr	r2, [pc, #156]	; (8004314 <TIM_Base_SetConfig+0x12c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d00f      	beq.n	800429a <TIM_Base_SetConfig+0xb2>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a26      	ldr	r2, [pc, #152]	; (8004318 <TIM_Base_SetConfig+0x130>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d00b      	beq.n	800429a <TIM_Base_SetConfig+0xb2>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a25      	ldr	r2, [pc, #148]	; (800431c <TIM_Base_SetConfig+0x134>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d007      	beq.n	800429a <TIM_Base_SetConfig+0xb2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a24      	ldr	r2, [pc, #144]	; (8004320 <TIM_Base_SetConfig+0x138>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d003      	beq.n	800429a <TIM_Base_SetConfig+0xb2>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a23      	ldr	r2, [pc, #140]	; (8004324 <TIM_Base_SetConfig+0x13c>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d108      	bne.n	80042ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a0a      	ldr	r2, [pc, #40]	; (80042fc <TIM_Base_SetConfig+0x114>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d003      	beq.n	80042e0 <TIM_Base_SetConfig+0xf8>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a0c      	ldr	r2, [pc, #48]	; (800430c <TIM_Base_SetConfig+0x124>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d103      	bne.n	80042e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	691a      	ldr	r2, [r3, #16]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	615a      	str	r2, [r3, #20]
}
 80042ee:	bf00      	nop
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	40010000 	.word	0x40010000
 8004300:	40000400 	.word	0x40000400
 8004304:	40000800 	.word	0x40000800
 8004308:	40000c00 	.word	0x40000c00
 800430c:	40010400 	.word	0x40010400
 8004310:	40014000 	.word	0x40014000
 8004314:	40014400 	.word	0x40014400
 8004318:	40014800 	.word	0x40014800
 800431c:	40001800 	.word	0x40001800
 8004320:	40001c00 	.word	0x40001c00
 8004324:	40002000 	.word	0x40002000

08004328 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004328:	b480      	push	{r7}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	f023 0201 	bic.w	r2, r3, #1
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004352:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	4313      	orrs	r3, r2
 800435c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f023 030a 	bic.w	r3, r3, #10
 8004364:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	4313      	orrs	r3, r2
 800436c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	621a      	str	r2, [r3, #32]
}
 800437a:	bf00      	nop
 800437c:	371c      	adds	r7, #28
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004386:	b480      	push	{r7}
 8004388:	b087      	sub	sp, #28
 800438a:	af00      	add	r7, sp, #0
 800438c:	60f8      	str	r0, [r7, #12]
 800438e:	60b9      	str	r1, [r7, #8]
 8004390:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	f023 0210 	bic.w	r2, r3, #16
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	031b      	lsls	r3, r3, #12
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	011b      	lsls	r3, r3, #4
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	621a      	str	r2, [r3, #32]
}
 80043da:	bf00      	nop
 80043dc:	371c      	adds	r7, #28
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b085      	sub	sp, #20
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
 80043ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4313      	orrs	r3, r2
 8004404:	f043 0307 	orr.w	r3, r3, #7
 8004408:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	609a      	str	r2, [r3, #8]
}
 8004410:	bf00      	nop
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800441c:	b480      	push	{r7}
 800441e:	b087      	sub	sp, #28
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
 8004428:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004436:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	021a      	lsls	r2, r3, #8
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	431a      	orrs	r2, r3
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	4313      	orrs	r3, r2
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	4313      	orrs	r3, r2
 8004448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	609a      	str	r2, [r3, #8]
}
 8004450:	bf00      	nop
 8004452:	371c      	adds	r7, #28
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800446c:	2b01      	cmp	r3, #1
 800446e:	d101      	bne.n	8004474 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004470:	2302      	movs	r3, #2
 8004472:	e06d      	b.n	8004550 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2202      	movs	r2, #2
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a30      	ldr	r2, [pc, #192]	; (800455c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d004      	beq.n	80044a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a2f      	ldr	r2, [pc, #188]	; (8004560 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d108      	bne.n	80044ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80044ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a20      	ldr	r2, [pc, #128]	; (800455c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d022      	beq.n	8004524 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e6:	d01d      	beq.n	8004524 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a1d      	ldr	r2, [pc, #116]	; (8004564 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d018      	beq.n	8004524 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a1c      	ldr	r2, [pc, #112]	; (8004568 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d013      	beq.n	8004524 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a1a      	ldr	r2, [pc, #104]	; (800456c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d00e      	beq.n	8004524 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a15      	ldr	r2, [pc, #84]	; (8004560 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d009      	beq.n	8004524 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a16      	ldr	r2, [pc, #88]	; (8004570 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d004      	beq.n	8004524 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a15      	ldr	r2, [pc, #84]	; (8004574 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d10c      	bne.n	800453e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800452a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	4313      	orrs	r3, r2
 8004534:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3714      	adds	r7, #20
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	40010000 	.word	0x40010000
 8004560:	40010400 	.word	0x40010400
 8004564:	40000400 	.word	0x40000400
 8004568:	40000800 	.word	0x40000800
 800456c:	40000c00 	.word	0x40000c00
 8004570:	40014000 	.word	0x40014000
 8004574:	40001800 	.word	0x40001800

08004578 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e040      	b.n	8004648 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d106      	bne.n	80045dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7fc fc0e 	bl	8000df8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2224      	movs	r2, #36	; 0x24
 80045e0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0201 	bic.w	r2, r2, #1
 80045f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f8c0 	bl	8004778 <UART_SetConfig>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d101      	bne.n	8004602 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e022      	b.n	8004648 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	2b00      	cmp	r3, #0
 8004608:	d002      	beq.n	8004610 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 fb16 	bl	8004c3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800461e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689a      	ldr	r2, [r3, #8]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800462e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 0201 	orr.w	r2, r2, #1
 800463e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 fb9d 	bl	8004d80 <UART_CheckIdleState>
 8004646:	4603      	mov	r3, r0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3708      	adds	r7, #8
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b08a      	sub	sp, #40	; 0x28
 8004654:	af02      	add	r7, sp, #8
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	603b      	str	r3, [r7, #0]
 800465c:	4613      	mov	r3, r2
 800465e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004664:	2b20      	cmp	r3, #32
 8004666:	f040 8081 	bne.w	800476c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d002      	beq.n	8004676 <HAL_UART_Transmit+0x26>
 8004670:	88fb      	ldrh	r3, [r7, #6]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e079      	b.n	800476e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004680:	2b01      	cmp	r3, #1
 8004682:	d101      	bne.n	8004688 <HAL_UART_Transmit+0x38>
 8004684:	2302      	movs	r3, #2
 8004686:	e072      	b.n	800476e <HAL_UART_Transmit+0x11e>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2221      	movs	r2, #33	; 0x21
 800469c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800469e:	f7fc fd4f 	bl	8001140 <HAL_GetTick>
 80046a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	88fa      	ldrh	r2, [r7, #6]
 80046a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	88fa      	ldrh	r2, [r7, #6]
 80046b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046bc:	d108      	bne.n	80046d0 <HAL_UART_Transmit+0x80>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d104      	bne.n	80046d0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80046c6:	2300      	movs	r3, #0
 80046c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	61bb      	str	r3, [r7, #24]
 80046ce:	e003      	b.n	80046d8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046d4:	2300      	movs	r3, #0
 80046d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80046e0:	e02c      	b.n	800473c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	2200      	movs	r2, #0
 80046ea:	2180      	movs	r1, #128	; 0x80
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f000 fb7a 	bl	8004de6 <UART_WaitOnFlagUntilTimeout>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e038      	b.n	800476e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10b      	bne.n	800471a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	881b      	ldrh	r3, [r3, #0]
 8004706:	461a      	mov	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004710:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	3302      	adds	r3, #2
 8004716:	61bb      	str	r3, [r7, #24]
 8004718:	e007      	b.n	800472a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	781a      	ldrb	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	3301      	adds	r3, #1
 8004728:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004730:	b29b      	uxth	r3, r3
 8004732:	3b01      	subs	r3, #1
 8004734:	b29a      	uxth	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004742:	b29b      	uxth	r3, r3
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1cc      	bne.n	80046e2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	9300      	str	r3, [sp, #0]
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	2200      	movs	r2, #0
 8004750:	2140      	movs	r1, #64	; 0x40
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f000 fb47 	bl	8004de6 <UART_WaitOnFlagUntilTimeout>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e005      	b.n	800476e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2220      	movs	r2, #32
 8004766:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004768:	2300      	movs	r3, #0
 800476a:	e000      	b.n	800476e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800476c:	2302      	movs	r3, #2
  }
}
 800476e:	4618      	mov	r0, r3
 8004770:	3720      	adds	r7, #32
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b088      	sub	sp, #32
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004780:	2300      	movs	r3, #0
 8004782:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	431a      	orrs	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	4313      	orrs	r3, r2
 800479a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	4ba7      	ldr	r3, [pc, #668]	; (8004a40 <UART_SetConfig+0x2c8>)
 80047a4:	4013      	ands	r3, r2
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6812      	ldr	r2, [r2, #0]
 80047aa:	6979      	ldr	r1, [r7, #20]
 80047ac:	430b      	orrs	r3, r1
 80047ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68da      	ldr	r2, [r3, #12]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a95      	ldr	r2, [pc, #596]	; (8004a44 <UART_SetConfig+0x2cc>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d120      	bne.n	8004836 <UART_SetConfig+0xbe>
 80047f4:	4b94      	ldr	r3, [pc, #592]	; (8004a48 <UART_SetConfig+0x2d0>)
 80047f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fa:	f003 0303 	and.w	r3, r3, #3
 80047fe:	2b03      	cmp	r3, #3
 8004800:	d816      	bhi.n	8004830 <UART_SetConfig+0xb8>
 8004802:	a201      	add	r2, pc, #4	; (adr r2, 8004808 <UART_SetConfig+0x90>)
 8004804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004808:	08004819 	.word	0x08004819
 800480c:	08004825 	.word	0x08004825
 8004810:	0800481f 	.word	0x0800481f
 8004814:	0800482b 	.word	0x0800482b
 8004818:	2301      	movs	r3, #1
 800481a:	77fb      	strb	r3, [r7, #31]
 800481c:	e14f      	b.n	8004abe <UART_SetConfig+0x346>
 800481e:	2302      	movs	r3, #2
 8004820:	77fb      	strb	r3, [r7, #31]
 8004822:	e14c      	b.n	8004abe <UART_SetConfig+0x346>
 8004824:	2304      	movs	r3, #4
 8004826:	77fb      	strb	r3, [r7, #31]
 8004828:	e149      	b.n	8004abe <UART_SetConfig+0x346>
 800482a:	2308      	movs	r3, #8
 800482c:	77fb      	strb	r3, [r7, #31]
 800482e:	e146      	b.n	8004abe <UART_SetConfig+0x346>
 8004830:	2310      	movs	r3, #16
 8004832:	77fb      	strb	r3, [r7, #31]
 8004834:	e143      	b.n	8004abe <UART_SetConfig+0x346>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a84      	ldr	r2, [pc, #528]	; (8004a4c <UART_SetConfig+0x2d4>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d132      	bne.n	80048a6 <UART_SetConfig+0x12e>
 8004840:	4b81      	ldr	r3, [pc, #516]	; (8004a48 <UART_SetConfig+0x2d0>)
 8004842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004846:	f003 030c 	and.w	r3, r3, #12
 800484a:	2b0c      	cmp	r3, #12
 800484c:	d828      	bhi.n	80048a0 <UART_SetConfig+0x128>
 800484e:	a201      	add	r2, pc, #4	; (adr r2, 8004854 <UART_SetConfig+0xdc>)
 8004850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004854:	08004889 	.word	0x08004889
 8004858:	080048a1 	.word	0x080048a1
 800485c:	080048a1 	.word	0x080048a1
 8004860:	080048a1 	.word	0x080048a1
 8004864:	08004895 	.word	0x08004895
 8004868:	080048a1 	.word	0x080048a1
 800486c:	080048a1 	.word	0x080048a1
 8004870:	080048a1 	.word	0x080048a1
 8004874:	0800488f 	.word	0x0800488f
 8004878:	080048a1 	.word	0x080048a1
 800487c:	080048a1 	.word	0x080048a1
 8004880:	080048a1 	.word	0x080048a1
 8004884:	0800489b 	.word	0x0800489b
 8004888:	2300      	movs	r3, #0
 800488a:	77fb      	strb	r3, [r7, #31]
 800488c:	e117      	b.n	8004abe <UART_SetConfig+0x346>
 800488e:	2302      	movs	r3, #2
 8004890:	77fb      	strb	r3, [r7, #31]
 8004892:	e114      	b.n	8004abe <UART_SetConfig+0x346>
 8004894:	2304      	movs	r3, #4
 8004896:	77fb      	strb	r3, [r7, #31]
 8004898:	e111      	b.n	8004abe <UART_SetConfig+0x346>
 800489a:	2308      	movs	r3, #8
 800489c:	77fb      	strb	r3, [r7, #31]
 800489e:	e10e      	b.n	8004abe <UART_SetConfig+0x346>
 80048a0:	2310      	movs	r3, #16
 80048a2:	77fb      	strb	r3, [r7, #31]
 80048a4:	e10b      	b.n	8004abe <UART_SetConfig+0x346>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a69      	ldr	r2, [pc, #420]	; (8004a50 <UART_SetConfig+0x2d8>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d120      	bne.n	80048f2 <UART_SetConfig+0x17a>
 80048b0:	4b65      	ldr	r3, [pc, #404]	; (8004a48 <UART_SetConfig+0x2d0>)
 80048b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048ba:	2b30      	cmp	r3, #48	; 0x30
 80048bc:	d013      	beq.n	80048e6 <UART_SetConfig+0x16e>
 80048be:	2b30      	cmp	r3, #48	; 0x30
 80048c0:	d814      	bhi.n	80048ec <UART_SetConfig+0x174>
 80048c2:	2b20      	cmp	r3, #32
 80048c4:	d009      	beq.n	80048da <UART_SetConfig+0x162>
 80048c6:	2b20      	cmp	r3, #32
 80048c8:	d810      	bhi.n	80048ec <UART_SetConfig+0x174>
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <UART_SetConfig+0x15c>
 80048ce:	2b10      	cmp	r3, #16
 80048d0:	d006      	beq.n	80048e0 <UART_SetConfig+0x168>
 80048d2:	e00b      	b.n	80048ec <UART_SetConfig+0x174>
 80048d4:	2300      	movs	r3, #0
 80048d6:	77fb      	strb	r3, [r7, #31]
 80048d8:	e0f1      	b.n	8004abe <UART_SetConfig+0x346>
 80048da:	2302      	movs	r3, #2
 80048dc:	77fb      	strb	r3, [r7, #31]
 80048de:	e0ee      	b.n	8004abe <UART_SetConfig+0x346>
 80048e0:	2304      	movs	r3, #4
 80048e2:	77fb      	strb	r3, [r7, #31]
 80048e4:	e0eb      	b.n	8004abe <UART_SetConfig+0x346>
 80048e6:	2308      	movs	r3, #8
 80048e8:	77fb      	strb	r3, [r7, #31]
 80048ea:	e0e8      	b.n	8004abe <UART_SetConfig+0x346>
 80048ec:	2310      	movs	r3, #16
 80048ee:	77fb      	strb	r3, [r7, #31]
 80048f0:	e0e5      	b.n	8004abe <UART_SetConfig+0x346>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a57      	ldr	r2, [pc, #348]	; (8004a54 <UART_SetConfig+0x2dc>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d120      	bne.n	800493e <UART_SetConfig+0x1c6>
 80048fc:	4b52      	ldr	r3, [pc, #328]	; (8004a48 <UART_SetConfig+0x2d0>)
 80048fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004902:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004906:	2bc0      	cmp	r3, #192	; 0xc0
 8004908:	d013      	beq.n	8004932 <UART_SetConfig+0x1ba>
 800490a:	2bc0      	cmp	r3, #192	; 0xc0
 800490c:	d814      	bhi.n	8004938 <UART_SetConfig+0x1c0>
 800490e:	2b80      	cmp	r3, #128	; 0x80
 8004910:	d009      	beq.n	8004926 <UART_SetConfig+0x1ae>
 8004912:	2b80      	cmp	r3, #128	; 0x80
 8004914:	d810      	bhi.n	8004938 <UART_SetConfig+0x1c0>
 8004916:	2b00      	cmp	r3, #0
 8004918:	d002      	beq.n	8004920 <UART_SetConfig+0x1a8>
 800491a:	2b40      	cmp	r3, #64	; 0x40
 800491c:	d006      	beq.n	800492c <UART_SetConfig+0x1b4>
 800491e:	e00b      	b.n	8004938 <UART_SetConfig+0x1c0>
 8004920:	2300      	movs	r3, #0
 8004922:	77fb      	strb	r3, [r7, #31]
 8004924:	e0cb      	b.n	8004abe <UART_SetConfig+0x346>
 8004926:	2302      	movs	r3, #2
 8004928:	77fb      	strb	r3, [r7, #31]
 800492a:	e0c8      	b.n	8004abe <UART_SetConfig+0x346>
 800492c:	2304      	movs	r3, #4
 800492e:	77fb      	strb	r3, [r7, #31]
 8004930:	e0c5      	b.n	8004abe <UART_SetConfig+0x346>
 8004932:	2308      	movs	r3, #8
 8004934:	77fb      	strb	r3, [r7, #31]
 8004936:	e0c2      	b.n	8004abe <UART_SetConfig+0x346>
 8004938:	2310      	movs	r3, #16
 800493a:	77fb      	strb	r3, [r7, #31]
 800493c:	e0bf      	b.n	8004abe <UART_SetConfig+0x346>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a45      	ldr	r2, [pc, #276]	; (8004a58 <UART_SetConfig+0x2e0>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d125      	bne.n	8004994 <UART_SetConfig+0x21c>
 8004948:	4b3f      	ldr	r3, [pc, #252]	; (8004a48 <UART_SetConfig+0x2d0>)
 800494a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800494e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004952:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004956:	d017      	beq.n	8004988 <UART_SetConfig+0x210>
 8004958:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800495c:	d817      	bhi.n	800498e <UART_SetConfig+0x216>
 800495e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004962:	d00b      	beq.n	800497c <UART_SetConfig+0x204>
 8004964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004968:	d811      	bhi.n	800498e <UART_SetConfig+0x216>
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <UART_SetConfig+0x1fe>
 800496e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004972:	d006      	beq.n	8004982 <UART_SetConfig+0x20a>
 8004974:	e00b      	b.n	800498e <UART_SetConfig+0x216>
 8004976:	2300      	movs	r3, #0
 8004978:	77fb      	strb	r3, [r7, #31]
 800497a:	e0a0      	b.n	8004abe <UART_SetConfig+0x346>
 800497c:	2302      	movs	r3, #2
 800497e:	77fb      	strb	r3, [r7, #31]
 8004980:	e09d      	b.n	8004abe <UART_SetConfig+0x346>
 8004982:	2304      	movs	r3, #4
 8004984:	77fb      	strb	r3, [r7, #31]
 8004986:	e09a      	b.n	8004abe <UART_SetConfig+0x346>
 8004988:	2308      	movs	r3, #8
 800498a:	77fb      	strb	r3, [r7, #31]
 800498c:	e097      	b.n	8004abe <UART_SetConfig+0x346>
 800498e:	2310      	movs	r3, #16
 8004990:	77fb      	strb	r3, [r7, #31]
 8004992:	e094      	b.n	8004abe <UART_SetConfig+0x346>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a30      	ldr	r2, [pc, #192]	; (8004a5c <UART_SetConfig+0x2e4>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d125      	bne.n	80049ea <UART_SetConfig+0x272>
 800499e:	4b2a      	ldr	r3, [pc, #168]	; (8004a48 <UART_SetConfig+0x2d0>)
 80049a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049ac:	d017      	beq.n	80049de <UART_SetConfig+0x266>
 80049ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049b2:	d817      	bhi.n	80049e4 <UART_SetConfig+0x26c>
 80049b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049b8:	d00b      	beq.n	80049d2 <UART_SetConfig+0x25a>
 80049ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049be:	d811      	bhi.n	80049e4 <UART_SetConfig+0x26c>
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <UART_SetConfig+0x254>
 80049c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049c8:	d006      	beq.n	80049d8 <UART_SetConfig+0x260>
 80049ca:	e00b      	b.n	80049e4 <UART_SetConfig+0x26c>
 80049cc:	2301      	movs	r3, #1
 80049ce:	77fb      	strb	r3, [r7, #31]
 80049d0:	e075      	b.n	8004abe <UART_SetConfig+0x346>
 80049d2:	2302      	movs	r3, #2
 80049d4:	77fb      	strb	r3, [r7, #31]
 80049d6:	e072      	b.n	8004abe <UART_SetConfig+0x346>
 80049d8:	2304      	movs	r3, #4
 80049da:	77fb      	strb	r3, [r7, #31]
 80049dc:	e06f      	b.n	8004abe <UART_SetConfig+0x346>
 80049de:	2308      	movs	r3, #8
 80049e0:	77fb      	strb	r3, [r7, #31]
 80049e2:	e06c      	b.n	8004abe <UART_SetConfig+0x346>
 80049e4:	2310      	movs	r3, #16
 80049e6:	77fb      	strb	r3, [r7, #31]
 80049e8:	e069      	b.n	8004abe <UART_SetConfig+0x346>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a1c      	ldr	r2, [pc, #112]	; (8004a60 <UART_SetConfig+0x2e8>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d137      	bne.n	8004a64 <UART_SetConfig+0x2ec>
 80049f4:	4b14      	ldr	r3, [pc, #80]	; (8004a48 <UART_SetConfig+0x2d0>)
 80049f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80049fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a02:	d017      	beq.n	8004a34 <UART_SetConfig+0x2bc>
 8004a04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a08:	d817      	bhi.n	8004a3a <UART_SetConfig+0x2c2>
 8004a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a0e:	d00b      	beq.n	8004a28 <UART_SetConfig+0x2b0>
 8004a10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a14:	d811      	bhi.n	8004a3a <UART_SetConfig+0x2c2>
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <UART_SetConfig+0x2aa>
 8004a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a1e:	d006      	beq.n	8004a2e <UART_SetConfig+0x2b6>
 8004a20:	e00b      	b.n	8004a3a <UART_SetConfig+0x2c2>
 8004a22:	2300      	movs	r3, #0
 8004a24:	77fb      	strb	r3, [r7, #31]
 8004a26:	e04a      	b.n	8004abe <UART_SetConfig+0x346>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	77fb      	strb	r3, [r7, #31]
 8004a2c:	e047      	b.n	8004abe <UART_SetConfig+0x346>
 8004a2e:	2304      	movs	r3, #4
 8004a30:	77fb      	strb	r3, [r7, #31]
 8004a32:	e044      	b.n	8004abe <UART_SetConfig+0x346>
 8004a34:	2308      	movs	r3, #8
 8004a36:	77fb      	strb	r3, [r7, #31]
 8004a38:	e041      	b.n	8004abe <UART_SetConfig+0x346>
 8004a3a:	2310      	movs	r3, #16
 8004a3c:	77fb      	strb	r3, [r7, #31]
 8004a3e:	e03e      	b.n	8004abe <UART_SetConfig+0x346>
 8004a40:	efff69f3 	.word	0xefff69f3
 8004a44:	40011000 	.word	0x40011000
 8004a48:	40023800 	.word	0x40023800
 8004a4c:	40004400 	.word	0x40004400
 8004a50:	40004800 	.word	0x40004800
 8004a54:	40004c00 	.word	0x40004c00
 8004a58:	40005000 	.word	0x40005000
 8004a5c:	40011400 	.word	0x40011400
 8004a60:	40007800 	.word	0x40007800
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a71      	ldr	r2, [pc, #452]	; (8004c30 <UART_SetConfig+0x4b8>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d125      	bne.n	8004aba <UART_SetConfig+0x342>
 8004a6e:	4b71      	ldr	r3, [pc, #452]	; (8004c34 <UART_SetConfig+0x4bc>)
 8004a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004a78:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a7c:	d017      	beq.n	8004aae <UART_SetConfig+0x336>
 8004a7e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a82:	d817      	bhi.n	8004ab4 <UART_SetConfig+0x33c>
 8004a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a88:	d00b      	beq.n	8004aa2 <UART_SetConfig+0x32a>
 8004a8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a8e:	d811      	bhi.n	8004ab4 <UART_SetConfig+0x33c>
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d003      	beq.n	8004a9c <UART_SetConfig+0x324>
 8004a94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a98:	d006      	beq.n	8004aa8 <UART_SetConfig+0x330>
 8004a9a:	e00b      	b.n	8004ab4 <UART_SetConfig+0x33c>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	77fb      	strb	r3, [r7, #31]
 8004aa0:	e00d      	b.n	8004abe <UART_SetConfig+0x346>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	77fb      	strb	r3, [r7, #31]
 8004aa6:	e00a      	b.n	8004abe <UART_SetConfig+0x346>
 8004aa8:	2304      	movs	r3, #4
 8004aaa:	77fb      	strb	r3, [r7, #31]
 8004aac:	e007      	b.n	8004abe <UART_SetConfig+0x346>
 8004aae:	2308      	movs	r3, #8
 8004ab0:	77fb      	strb	r3, [r7, #31]
 8004ab2:	e004      	b.n	8004abe <UART_SetConfig+0x346>
 8004ab4:	2310      	movs	r3, #16
 8004ab6:	77fb      	strb	r3, [r7, #31]
 8004ab8:	e001      	b.n	8004abe <UART_SetConfig+0x346>
 8004aba:	2310      	movs	r3, #16
 8004abc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ac6:	d15a      	bne.n	8004b7e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8004ac8:	7ffb      	ldrb	r3, [r7, #31]
 8004aca:	2b08      	cmp	r3, #8
 8004acc:	d827      	bhi.n	8004b1e <UART_SetConfig+0x3a6>
 8004ace:	a201      	add	r2, pc, #4	; (adr r2, 8004ad4 <UART_SetConfig+0x35c>)
 8004ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad4:	08004af9 	.word	0x08004af9
 8004ad8:	08004b01 	.word	0x08004b01
 8004adc:	08004b09 	.word	0x08004b09
 8004ae0:	08004b1f 	.word	0x08004b1f
 8004ae4:	08004b0f 	.word	0x08004b0f
 8004ae8:	08004b1f 	.word	0x08004b1f
 8004aec:	08004b1f 	.word	0x08004b1f
 8004af0:	08004b1f 	.word	0x08004b1f
 8004af4:	08004b17 	.word	0x08004b17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004af8:	f7fe fc7c 	bl	80033f4 <HAL_RCC_GetPCLK1Freq>
 8004afc:	61b8      	str	r0, [r7, #24]
        break;
 8004afe:	e013      	b.n	8004b28 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b00:	f7fe fc8c 	bl	800341c <HAL_RCC_GetPCLK2Freq>
 8004b04:	61b8      	str	r0, [r7, #24]
        break;
 8004b06:	e00f      	b.n	8004b28 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b08:	4b4b      	ldr	r3, [pc, #300]	; (8004c38 <UART_SetConfig+0x4c0>)
 8004b0a:	61bb      	str	r3, [r7, #24]
        break;
 8004b0c:	e00c      	b.n	8004b28 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b0e:	f7fe fb83 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 8004b12:	61b8      	str	r0, [r7, #24]
        break;
 8004b14:	e008      	b.n	8004b28 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b1a:	61bb      	str	r3, [r7, #24]
        break;
 8004b1c:	e004      	b.n	8004b28 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	77bb      	strb	r3, [r7, #30]
        break;
 8004b26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d074      	beq.n	8004c18 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	005a      	lsls	r2, r3, #1
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	085b      	lsrs	r3, r3, #1
 8004b38:	441a      	add	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	2b0f      	cmp	r3, #15
 8004b48:	d916      	bls.n	8004b78 <UART_SetConfig+0x400>
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b50:	d212      	bcs.n	8004b78 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	f023 030f 	bic.w	r3, r3, #15
 8004b5a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	085b      	lsrs	r3, r3, #1
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	89fb      	ldrh	r3, [r7, #14]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	89fa      	ldrh	r2, [r7, #14]
 8004b74:	60da      	str	r2, [r3, #12]
 8004b76:	e04f      	b.n	8004c18 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	77bb      	strb	r3, [r7, #30]
 8004b7c:	e04c      	b.n	8004c18 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b7e:	7ffb      	ldrb	r3, [r7, #31]
 8004b80:	2b08      	cmp	r3, #8
 8004b82:	d828      	bhi.n	8004bd6 <UART_SetConfig+0x45e>
 8004b84:	a201      	add	r2, pc, #4	; (adr r2, 8004b8c <UART_SetConfig+0x414>)
 8004b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8a:	bf00      	nop
 8004b8c:	08004bb1 	.word	0x08004bb1
 8004b90:	08004bb9 	.word	0x08004bb9
 8004b94:	08004bc1 	.word	0x08004bc1
 8004b98:	08004bd7 	.word	0x08004bd7
 8004b9c:	08004bc7 	.word	0x08004bc7
 8004ba0:	08004bd7 	.word	0x08004bd7
 8004ba4:	08004bd7 	.word	0x08004bd7
 8004ba8:	08004bd7 	.word	0x08004bd7
 8004bac:	08004bcf 	.word	0x08004bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bb0:	f7fe fc20 	bl	80033f4 <HAL_RCC_GetPCLK1Freq>
 8004bb4:	61b8      	str	r0, [r7, #24]
        break;
 8004bb6:	e013      	b.n	8004be0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bb8:	f7fe fc30 	bl	800341c <HAL_RCC_GetPCLK2Freq>
 8004bbc:	61b8      	str	r0, [r7, #24]
        break;
 8004bbe:	e00f      	b.n	8004be0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bc0:	4b1d      	ldr	r3, [pc, #116]	; (8004c38 <UART_SetConfig+0x4c0>)
 8004bc2:	61bb      	str	r3, [r7, #24]
        break;
 8004bc4:	e00c      	b.n	8004be0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bc6:	f7fe fb27 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 8004bca:	61b8      	str	r0, [r7, #24]
        break;
 8004bcc:	e008      	b.n	8004be0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bd2:	61bb      	str	r3, [r7, #24]
        break;
 8004bd4:	e004      	b.n	8004be0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	77bb      	strb	r3, [r7, #30]
        break;
 8004bde:	bf00      	nop
    }

    if (pclk != 0U)
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d018      	beq.n	8004c18 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	085a      	lsrs	r2, r3, #1
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	441a      	add	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	2b0f      	cmp	r3, #15
 8004bfe:	d909      	bls.n	8004c14 <UART_SetConfig+0x49c>
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c06:	d205      	bcs.n	8004c14 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	60da      	str	r2, [r3, #12]
 8004c12:	e001      	b.n	8004c18 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004c24:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3720      	adds	r7, #32
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	40007c00 	.word	0x40007c00
 8004c34:	40023800 	.word	0x40023800
 8004c38:	00f42400 	.word	0x00f42400

08004c3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00a      	beq.n	8004c66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	430a      	orrs	r2, r1
 8004c64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00a      	beq.n	8004c88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8c:	f003 0304 	and.w	r3, r3, #4
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00a      	beq.n	8004caa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	f003 0308 	and.w	r3, r3, #8
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00a      	beq.n	8004ccc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	f003 0310 	and.w	r3, r3, #16
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00a      	beq.n	8004cee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	f003 0320 	and.w	r3, r3, #32
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d01a      	beq.n	8004d52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d3a:	d10a      	bne.n	8004d52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	605a      	str	r2, [r3, #4]
  }
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af02      	add	r7, sp, #8
 8004d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d90:	f7fc f9d6 	bl	8001140 <HAL_GetTick>
 8004d94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0308 	and.w	r3, r3, #8
 8004da0:	2b08      	cmp	r3, #8
 8004da2:	d10e      	bne.n	8004dc2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004da4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f817 	bl	8004de6 <UART_WaitOnFlagUntilTimeout>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e00d      	b.n	8004dde <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2220      	movs	r2, #32
 8004dc6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b09c      	sub	sp, #112	; 0x70
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	60f8      	str	r0, [r7, #12]
 8004dee:	60b9      	str	r1, [r7, #8]
 8004df0:	603b      	str	r3, [r7, #0]
 8004df2:	4613      	mov	r3, r2
 8004df4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004df6:	e0a5      	b.n	8004f44 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004df8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfe:	f000 80a1 	beq.w	8004f44 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e02:	f7fc f99d 	bl	8001140 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d302      	bcc.n	8004e18 <UART_WaitOnFlagUntilTimeout+0x32>
 8004e12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d13e      	bne.n	8004e96 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e20:	e853 3f00 	ldrex	r3, [r3]
 8004e24:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e2c:	667b      	str	r3, [r7, #100]	; 0x64
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	461a      	mov	r2, r3
 8004e34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e38:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e3e:	e841 2300 	strex	r3, r2, [r1]
 8004e42:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1e6      	bne.n	8004e18 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3308      	adds	r3, #8
 8004e50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e54:	e853 3f00 	ldrex	r3, [r3]
 8004e58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5c:	f023 0301 	bic.w	r3, r3, #1
 8004e60:	663b      	str	r3, [r7, #96]	; 0x60
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	3308      	adds	r3, #8
 8004e68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e6a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e6c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e72:	e841 2300 	strex	r3, r2, [r1]
 8004e76:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1e5      	bne.n	8004e4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2220      	movs	r2, #32
 8004e82:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2220      	movs	r2, #32
 8004e88:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e067      	b.n	8004f66 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d04f      	beq.n	8004f44 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eb2:	d147      	bne.n	8004f44 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ebc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec6:	e853 3f00 	ldrex	r3, [r3]
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ed2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	461a      	mov	r2, r3
 8004eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004edc:	637b      	str	r3, [r7, #52]	; 0x34
 8004ede:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ee2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ee4:	e841 2300 	strex	r3, r2, [r1]
 8004ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1e6      	bne.n	8004ebe <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	3308      	adds	r3, #8
 8004ef6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	e853 3f00 	ldrex	r3, [r3]
 8004efe:	613b      	str	r3, [r7, #16]
   return(result);
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f023 0301 	bic.w	r3, r3, #1
 8004f06:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3308      	adds	r3, #8
 8004f0e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f10:	623a      	str	r2, [r7, #32]
 8004f12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f14:	69f9      	ldr	r1, [r7, #28]
 8004f16:	6a3a      	ldr	r2, [r7, #32]
 8004f18:	e841 2300 	strex	r3, r2, [r1]
 8004f1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1e5      	bne.n	8004ef0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2220      	movs	r2, #32
 8004f28:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e010      	b.n	8004f66 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	69da      	ldr	r2, [r3, #28]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	bf0c      	ite	eq
 8004f54:	2301      	moveq	r3, #1
 8004f56:	2300      	movne	r3, #0
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	79fb      	ldrb	r3, [r7, #7]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	f43f af4a 	beq.w	8004df8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3770      	adds	r7, #112	; 0x70
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
	...

08004f70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f70:	b084      	sub	sp, #16
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b084      	sub	sp, #16
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
 8004f7a:	f107 001c 	add.w	r0, r7, #28
 8004f7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d120      	bne.n	8004fca <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68da      	ldr	r2, [r3, #12]
 8004f98:	4b20      	ldr	r3, [pc, #128]	; (800501c <USB_CoreInit+0xac>)
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d105      	bne.n	8004fbe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 fa92 	bl	80054e8 <USB_CoreReset>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	73fb      	strb	r3, [r7, #15]
 8004fc8:	e010      	b.n	8004fec <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 fa86 	bl	80054e8 <USB_CoreReset>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d10b      	bne.n	800500a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f043 0206 	orr.w	r2, r3, #6
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f043 0220 	orr.w	r2, r3, #32
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800500a:	7bfb      	ldrb	r3, [r7, #15]
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005016:	b004      	add	sp, #16
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	ffbdffbf 	.word	0xffbdffbf

08005020 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f023 0201 	bic.w	r2, r3, #1
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b084      	sub	sp, #16
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
 800504a:	460b      	mov	r3, r1
 800504c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800504e:	2300      	movs	r3, #0
 8005050:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800505e:	78fb      	ldrb	r3, [r7, #3]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d115      	bne.n	8005090 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005070:	2001      	movs	r0, #1
 8005072:	f7fc f871 	bl	8001158 <HAL_Delay>
      ms++;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	3301      	adds	r3, #1
 800507a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 fa25 	bl	80054cc <USB_GetMode>
 8005082:	4603      	mov	r3, r0
 8005084:	2b01      	cmp	r3, #1
 8005086:	d01e      	beq.n	80050c6 <USB_SetCurrentMode+0x84>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2b31      	cmp	r3, #49	; 0x31
 800508c:	d9f0      	bls.n	8005070 <USB_SetCurrentMode+0x2e>
 800508e:	e01a      	b.n	80050c6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005090:	78fb      	ldrb	r3, [r7, #3]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d115      	bne.n	80050c2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050a2:	2001      	movs	r0, #1
 80050a4:	f7fc f858 	bl	8001158 <HAL_Delay>
      ms++;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	3301      	adds	r3, #1
 80050ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 fa0c 	bl	80054cc <USB_GetMode>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d005      	beq.n	80050c6 <USB_SetCurrentMode+0x84>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2b31      	cmp	r3, #49	; 0x31
 80050be:	d9f0      	bls.n	80050a2 <USB_SetCurrentMode+0x60>
 80050c0:	e001      	b.n	80050c6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e005      	b.n	80050d2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2b32      	cmp	r3, #50	; 0x32
 80050ca:	d101      	bne.n	80050d0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e000      	b.n	80050d2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
	...

080050dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050dc:	b084      	sub	sp, #16
 80050de:	b580      	push	{r7, lr}
 80050e0:	b086      	sub	sp, #24
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80050ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80050ee:	2300      	movs	r3, #0
 80050f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80050f6:	2300      	movs	r3, #0
 80050f8:	613b      	str	r3, [r7, #16]
 80050fa:	e009      	b.n	8005110 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	3340      	adds	r3, #64	; 0x40
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4413      	add	r3, r2
 8005106:	2200      	movs	r2, #0
 8005108:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	3301      	adds	r3, #1
 800510e:	613b      	str	r3, [r7, #16]
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	2b0e      	cmp	r3, #14
 8005114:	d9f2      	bls.n	80050fc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005118:	2b00      	cmp	r3, #0
 800511a:	d11c      	bne.n	8005156 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800512a:	f043 0302 	orr.w	r3, r3, #2
 800512e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005134:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	601a      	str	r2, [r3, #0]
 8005154:	e005      	b.n	8005162 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005168:	461a      	mov	r2, r3
 800516a:	2300      	movs	r3, #0
 800516c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005174:	4619      	mov	r1, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800517c:	461a      	mov	r2, r3
 800517e:	680b      	ldr	r3, [r1, #0]
 8005180:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005184:	2b01      	cmp	r3, #1
 8005186:	d10c      	bne.n	80051a2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518a:	2b00      	cmp	r3, #0
 800518c:	d104      	bne.n	8005198 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800518e:	2100      	movs	r1, #0
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f961 	bl	8005458 <USB_SetDevSpeed>
 8005196:	e008      	b.n	80051aa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005198:	2101      	movs	r1, #1
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f95c 	bl	8005458 <USB_SetDevSpeed>
 80051a0:	e003      	b.n	80051aa <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80051a2:	2103      	movs	r1, #3
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f957 	bl	8005458 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80051aa:	2110      	movs	r1, #16
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 f8f3 	bl	8005398 <USB_FlushTxFifo>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d001      	beq.n	80051bc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 f91d 	bl	80053fc <USB_FlushRxFifo>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d001      	beq.n	80051cc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d2:	461a      	mov	r2, r3
 80051d4:	2300      	movs	r3, #0
 80051d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051de:	461a      	mov	r2, r3
 80051e0:	2300      	movs	r3, #0
 80051e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ea:	461a      	mov	r2, r3
 80051ec:	2300      	movs	r3, #0
 80051ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051f0:	2300      	movs	r3, #0
 80051f2:	613b      	str	r3, [r7, #16]
 80051f4:	e043      	b.n	800527e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005208:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800520c:	d118      	bne.n	8005240 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10a      	bne.n	800522a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005220:	461a      	mov	r2, r3
 8005222:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005226:	6013      	str	r3, [r2, #0]
 8005228:	e013      	b.n	8005252 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	4413      	add	r3, r2
 8005232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005236:	461a      	mov	r2, r3
 8005238:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	e008      	b.n	8005252 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4413      	add	r3, r2
 8005248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800524c:	461a      	mov	r2, r3
 800524e:	2300      	movs	r3, #0
 8005250:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	015a      	lsls	r2, r3, #5
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4413      	add	r3, r2
 800525a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800525e:	461a      	mov	r2, r3
 8005260:	2300      	movs	r3, #0
 8005262:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4413      	add	r3, r2
 800526c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005270:	461a      	mov	r2, r3
 8005272:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005276:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	3301      	adds	r3, #1
 800527c:	613b      	str	r3, [r7, #16]
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	429a      	cmp	r2, r3
 8005284:	d3b7      	bcc.n	80051f6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005286:	2300      	movs	r3, #0
 8005288:	613b      	str	r3, [r7, #16]
 800528a:	e043      	b.n	8005314 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4413      	add	r3, r2
 8005294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800529e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052a2:	d118      	bne.n	80052d6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10a      	bne.n	80052c0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b6:	461a      	mov	r2, r3
 80052b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80052bc:	6013      	str	r3, [r2, #0]
 80052be:	e013      	b.n	80052e8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052cc:	461a      	mov	r2, r3
 80052ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80052d2:	6013      	str	r3, [r2, #0]
 80052d4:	e008      	b.n	80052e8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	015a      	lsls	r2, r3, #5
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	4413      	add	r3, r2
 80052de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e2:	461a      	mov	r2, r3
 80052e4:	2300      	movs	r3, #0
 80052e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f4:	461a      	mov	r2, r3
 80052f6:	2300      	movs	r3, #0
 80052f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	4413      	add	r3, r2
 8005302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005306:	461a      	mov	r2, r3
 8005308:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800530c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	3301      	adds	r3, #1
 8005312:	613b      	str	r3, [r7, #16]
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	429a      	cmp	r2, r3
 800531a:	d3b7      	bcc.n	800528c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800532a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800532e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800533c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800533e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005340:	2b00      	cmp	r3, #0
 8005342:	d105      	bne.n	8005350 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	f043 0210 	orr.w	r2, r3, #16
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	699a      	ldr	r2, [r3, #24]
 8005354:	4b0e      	ldr	r3, [pc, #56]	; (8005390 <USB_DevInit+0x2b4>)
 8005356:	4313      	orrs	r3, r2
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800535c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800535e:	2b00      	cmp	r3, #0
 8005360:	d005      	beq.n	800536e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	f043 0208 	orr.w	r2, r3, #8
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800536e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005370:	2b01      	cmp	r3, #1
 8005372:	d105      	bne.n	8005380 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	699a      	ldr	r2, [r3, #24]
 8005378:	4b06      	ldr	r3, [pc, #24]	; (8005394 <USB_DevInit+0x2b8>)
 800537a:	4313      	orrs	r3, r2
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005380:	7dfb      	ldrb	r3, [r7, #23]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3718      	adds	r7, #24
 8005386:	46bd      	mov	sp, r7
 8005388:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800538c:	b004      	add	sp, #16
 800538e:	4770      	bx	lr
 8005390:	803c3800 	.word	0x803c3800
 8005394:	40000004 	.word	0x40000004

08005398 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	3301      	adds	r3, #1
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	4a12      	ldr	r2, [pc, #72]	; (80053f8 <USB_FlushTxFifo+0x60>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d901      	bls.n	80053b6 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e01a      	b.n	80053ec <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	daf3      	bge.n	80053a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80053be:	2300      	movs	r3, #0
 80053c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	019b      	lsls	r3, r3, #6
 80053c6:	f043 0220 	orr.w	r2, r3, #32
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	3301      	adds	r3, #1
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	4a08      	ldr	r2, [pc, #32]	; (80053f8 <USB_FlushTxFifo+0x60>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d901      	bls.n	80053de <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e006      	b.n	80053ec <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f003 0320 	and.w	r3, r3, #32
 80053e6:	2b20      	cmp	r3, #32
 80053e8:	d0f1      	beq.n	80053ce <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr
 80053f8:	00030d40 	.word	0x00030d40

080053fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005404:	2300      	movs	r3, #0
 8005406:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	3301      	adds	r3, #1
 800540c:	60fb      	str	r3, [r7, #12]
 800540e:	4a11      	ldr	r2, [pc, #68]	; (8005454 <USB_FlushRxFifo+0x58>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d901      	bls.n	8005418 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e017      	b.n	8005448 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	2b00      	cmp	r3, #0
 800541e:	daf3      	bge.n	8005408 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2210      	movs	r2, #16
 8005428:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	3301      	adds	r3, #1
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	4a08      	ldr	r2, [pc, #32]	; (8005454 <USB_FlushRxFifo+0x58>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d901      	bls.n	800543a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e006      	b.n	8005448 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	f003 0310 	and.w	r3, r3, #16
 8005442:	2b10      	cmp	r3, #16
 8005444:	d0f1      	beq.n	800542a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr
 8005454:	00030d40 	.word	0x00030d40

08005458 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	460b      	mov	r3, r1
 8005462:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	78fb      	ldrb	r3, [r7, #3]
 8005472:	68f9      	ldr	r1, [r7, #12]
 8005474:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005478:	4313      	orrs	r3, r2
 800547a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800548a:	b480      	push	{r7}
 800548c:	b085      	sub	sp, #20
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80054a4:	f023 0303 	bic.w	r3, r3, #3
 80054a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054b8:	f043 0302 	orr.w	r3, r3, #2
 80054bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	f003 0301 	and.w	r3, r3, #1
}
 80054dc:	4618      	mov	r0, r3
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054f0:	2300      	movs	r3, #0
 80054f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	3301      	adds	r3, #1
 80054f8:	60fb      	str	r3, [r7, #12]
 80054fa:	4a13      	ldr	r2, [pc, #76]	; (8005548 <USB_CoreReset+0x60>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d901      	bls.n	8005504 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e01a      	b.n	800553a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	2b00      	cmp	r3, #0
 800550a:	daf3      	bge.n	80054f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800550c:	2300      	movs	r3, #0
 800550e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	f043 0201 	orr.w	r2, r3, #1
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	3301      	adds	r3, #1
 8005520:	60fb      	str	r3, [r7, #12]
 8005522:	4a09      	ldr	r2, [pc, #36]	; (8005548 <USB_CoreReset+0x60>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d901      	bls.n	800552c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e006      	b.n	800553a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b01      	cmp	r3, #1
 8005536:	d0f1      	beq.n	800551c <USB_CoreReset+0x34>

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	00030d40 	.word	0x00030d40

0800554c <__errno>:
 800554c:	4b01      	ldr	r3, [pc, #4]	; (8005554 <__errno+0x8>)
 800554e:	6818      	ldr	r0, [r3, #0]
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	2000000c 	.word	0x2000000c

08005558 <__libc_init_array>:
 8005558:	b570      	push	{r4, r5, r6, lr}
 800555a:	4d0d      	ldr	r5, [pc, #52]	; (8005590 <__libc_init_array+0x38>)
 800555c:	4c0d      	ldr	r4, [pc, #52]	; (8005594 <__libc_init_array+0x3c>)
 800555e:	1b64      	subs	r4, r4, r5
 8005560:	10a4      	asrs	r4, r4, #2
 8005562:	2600      	movs	r6, #0
 8005564:	42a6      	cmp	r6, r4
 8005566:	d109      	bne.n	800557c <__libc_init_array+0x24>
 8005568:	4d0b      	ldr	r5, [pc, #44]	; (8005598 <__libc_init_array+0x40>)
 800556a:	4c0c      	ldr	r4, [pc, #48]	; (800559c <__libc_init_array+0x44>)
 800556c:	f000 fc4e 	bl	8005e0c <_init>
 8005570:	1b64      	subs	r4, r4, r5
 8005572:	10a4      	asrs	r4, r4, #2
 8005574:	2600      	movs	r6, #0
 8005576:	42a6      	cmp	r6, r4
 8005578:	d105      	bne.n	8005586 <__libc_init_array+0x2e>
 800557a:	bd70      	pop	{r4, r5, r6, pc}
 800557c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005580:	4798      	blx	r3
 8005582:	3601      	adds	r6, #1
 8005584:	e7ee      	b.n	8005564 <__libc_init_array+0xc>
 8005586:	f855 3b04 	ldr.w	r3, [r5], #4
 800558a:	4798      	blx	r3
 800558c:	3601      	adds	r6, #1
 800558e:	e7f2      	b.n	8005576 <__libc_init_array+0x1e>
 8005590:	08005e80 	.word	0x08005e80
 8005594:	08005e80 	.word	0x08005e80
 8005598:	08005e80 	.word	0x08005e80
 800559c:	08005e84 	.word	0x08005e84

080055a0 <memset>:
 80055a0:	4402      	add	r2, r0
 80055a2:	4603      	mov	r3, r0
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d100      	bne.n	80055aa <memset+0xa>
 80055a8:	4770      	bx	lr
 80055aa:	f803 1b01 	strb.w	r1, [r3], #1
 80055ae:	e7f9      	b.n	80055a4 <memset+0x4>

080055b0 <siprintf>:
 80055b0:	b40e      	push	{r1, r2, r3}
 80055b2:	b500      	push	{lr}
 80055b4:	b09c      	sub	sp, #112	; 0x70
 80055b6:	ab1d      	add	r3, sp, #116	; 0x74
 80055b8:	9002      	str	r0, [sp, #8]
 80055ba:	9006      	str	r0, [sp, #24]
 80055bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80055c0:	4809      	ldr	r0, [pc, #36]	; (80055e8 <siprintf+0x38>)
 80055c2:	9107      	str	r1, [sp, #28]
 80055c4:	9104      	str	r1, [sp, #16]
 80055c6:	4909      	ldr	r1, [pc, #36]	; (80055ec <siprintf+0x3c>)
 80055c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80055cc:	9105      	str	r1, [sp, #20]
 80055ce:	6800      	ldr	r0, [r0, #0]
 80055d0:	9301      	str	r3, [sp, #4]
 80055d2:	a902      	add	r1, sp, #8
 80055d4:	f000 f868 	bl	80056a8 <_svfiprintf_r>
 80055d8:	9b02      	ldr	r3, [sp, #8]
 80055da:	2200      	movs	r2, #0
 80055dc:	701a      	strb	r2, [r3, #0]
 80055de:	b01c      	add	sp, #112	; 0x70
 80055e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80055e4:	b003      	add	sp, #12
 80055e6:	4770      	bx	lr
 80055e8:	2000000c 	.word	0x2000000c
 80055ec:	ffff0208 	.word	0xffff0208

080055f0 <__ssputs_r>:
 80055f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055f4:	688e      	ldr	r6, [r1, #8]
 80055f6:	429e      	cmp	r6, r3
 80055f8:	4682      	mov	sl, r0
 80055fa:	460c      	mov	r4, r1
 80055fc:	4690      	mov	r8, r2
 80055fe:	461f      	mov	r7, r3
 8005600:	d838      	bhi.n	8005674 <__ssputs_r+0x84>
 8005602:	898a      	ldrh	r2, [r1, #12]
 8005604:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005608:	d032      	beq.n	8005670 <__ssputs_r+0x80>
 800560a:	6825      	ldr	r5, [r4, #0]
 800560c:	6909      	ldr	r1, [r1, #16]
 800560e:	eba5 0901 	sub.w	r9, r5, r1
 8005612:	6965      	ldr	r5, [r4, #20]
 8005614:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005618:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800561c:	3301      	adds	r3, #1
 800561e:	444b      	add	r3, r9
 8005620:	106d      	asrs	r5, r5, #1
 8005622:	429d      	cmp	r5, r3
 8005624:	bf38      	it	cc
 8005626:	461d      	movcc	r5, r3
 8005628:	0553      	lsls	r3, r2, #21
 800562a:	d531      	bpl.n	8005690 <__ssputs_r+0xa0>
 800562c:	4629      	mov	r1, r5
 800562e:	f000 fb47 	bl	8005cc0 <_malloc_r>
 8005632:	4606      	mov	r6, r0
 8005634:	b950      	cbnz	r0, 800564c <__ssputs_r+0x5c>
 8005636:	230c      	movs	r3, #12
 8005638:	f8ca 3000 	str.w	r3, [sl]
 800563c:	89a3      	ldrh	r3, [r4, #12]
 800563e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005642:	81a3      	strh	r3, [r4, #12]
 8005644:	f04f 30ff 	mov.w	r0, #4294967295
 8005648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800564c:	6921      	ldr	r1, [r4, #16]
 800564e:	464a      	mov	r2, r9
 8005650:	f000 fabe 	bl	8005bd0 <memcpy>
 8005654:	89a3      	ldrh	r3, [r4, #12]
 8005656:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800565a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800565e:	81a3      	strh	r3, [r4, #12]
 8005660:	6126      	str	r6, [r4, #16]
 8005662:	6165      	str	r5, [r4, #20]
 8005664:	444e      	add	r6, r9
 8005666:	eba5 0509 	sub.w	r5, r5, r9
 800566a:	6026      	str	r6, [r4, #0]
 800566c:	60a5      	str	r5, [r4, #8]
 800566e:	463e      	mov	r6, r7
 8005670:	42be      	cmp	r6, r7
 8005672:	d900      	bls.n	8005676 <__ssputs_r+0x86>
 8005674:	463e      	mov	r6, r7
 8005676:	4632      	mov	r2, r6
 8005678:	6820      	ldr	r0, [r4, #0]
 800567a:	4641      	mov	r1, r8
 800567c:	f000 fab6 	bl	8005bec <memmove>
 8005680:	68a3      	ldr	r3, [r4, #8]
 8005682:	6822      	ldr	r2, [r4, #0]
 8005684:	1b9b      	subs	r3, r3, r6
 8005686:	4432      	add	r2, r6
 8005688:	60a3      	str	r3, [r4, #8]
 800568a:	6022      	str	r2, [r4, #0]
 800568c:	2000      	movs	r0, #0
 800568e:	e7db      	b.n	8005648 <__ssputs_r+0x58>
 8005690:	462a      	mov	r2, r5
 8005692:	f000 fb6f 	bl	8005d74 <_realloc_r>
 8005696:	4606      	mov	r6, r0
 8005698:	2800      	cmp	r0, #0
 800569a:	d1e1      	bne.n	8005660 <__ssputs_r+0x70>
 800569c:	6921      	ldr	r1, [r4, #16]
 800569e:	4650      	mov	r0, sl
 80056a0:	f000 fabe 	bl	8005c20 <_free_r>
 80056a4:	e7c7      	b.n	8005636 <__ssputs_r+0x46>
	...

080056a8 <_svfiprintf_r>:
 80056a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ac:	4698      	mov	r8, r3
 80056ae:	898b      	ldrh	r3, [r1, #12]
 80056b0:	061b      	lsls	r3, r3, #24
 80056b2:	b09d      	sub	sp, #116	; 0x74
 80056b4:	4607      	mov	r7, r0
 80056b6:	460d      	mov	r5, r1
 80056b8:	4614      	mov	r4, r2
 80056ba:	d50e      	bpl.n	80056da <_svfiprintf_r+0x32>
 80056bc:	690b      	ldr	r3, [r1, #16]
 80056be:	b963      	cbnz	r3, 80056da <_svfiprintf_r+0x32>
 80056c0:	2140      	movs	r1, #64	; 0x40
 80056c2:	f000 fafd 	bl	8005cc0 <_malloc_r>
 80056c6:	6028      	str	r0, [r5, #0]
 80056c8:	6128      	str	r0, [r5, #16]
 80056ca:	b920      	cbnz	r0, 80056d6 <_svfiprintf_r+0x2e>
 80056cc:	230c      	movs	r3, #12
 80056ce:	603b      	str	r3, [r7, #0]
 80056d0:	f04f 30ff 	mov.w	r0, #4294967295
 80056d4:	e0d1      	b.n	800587a <_svfiprintf_r+0x1d2>
 80056d6:	2340      	movs	r3, #64	; 0x40
 80056d8:	616b      	str	r3, [r5, #20]
 80056da:	2300      	movs	r3, #0
 80056dc:	9309      	str	r3, [sp, #36]	; 0x24
 80056de:	2320      	movs	r3, #32
 80056e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80056e8:	2330      	movs	r3, #48	; 0x30
 80056ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005894 <_svfiprintf_r+0x1ec>
 80056ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056f2:	f04f 0901 	mov.w	r9, #1
 80056f6:	4623      	mov	r3, r4
 80056f8:	469a      	mov	sl, r3
 80056fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056fe:	b10a      	cbz	r2, 8005704 <_svfiprintf_r+0x5c>
 8005700:	2a25      	cmp	r2, #37	; 0x25
 8005702:	d1f9      	bne.n	80056f8 <_svfiprintf_r+0x50>
 8005704:	ebba 0b04 	subs.w	fp, sl, r4
 8005708:	d00b      	beq.n	8005722 <_svfiprintf_r+0x7a>
 800570a:	465b      	mov	r3, fp
 800570c:	4622      	mov	r2, r4
 800570e:	4629      	mov	r1, r5
 8005710:	4638      	mov	r0, r7
 8005712:	f7ff ff6d 	bl	80055f0 <__ssputs_r>
 8005716:	3001      	adds	r0, #1
 8005718:	f000 80aa 	beq.w	8005870 <_svfiprintf_r+0x1c8>
 800571c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800571e:	445a      	add	r2, fp
 8005720:	9209      	str	r2, [sp, #36]	; 0x24
 8005722:	f89a 3000 	ldrb.w	r3, [sl]
 8005726:	2b00      	cmp	r3, #0
 8005728:	f000 80a2 	beq.w	8005870 <_svfiprintf_r+0x1c8>
 800572c:	2300      	movs	r3, #0
 800572e:	f04f 32ff 	mov.w	r2, #4294967295
 8005732:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005736:	f10a 0a01 	add.w	sl, sl, #1
 800573a:	9304      	str	r3, [sp, #16]
 800573c:	9307      	str	r3, [sp, #28]
 800573e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005742:	931a      	str	r3, [sp, #104]	; 0x68
 8005744:	4654      	mov	r4, sl
 8005746:	2205      	movs	r2, #5
 8005748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800574c:	4851      	ldr	r0, [pc, #324]	; (8005894 <_svfiprintf_r+0x1ec>)
 800574e:	f7fa fd67 	bl	8000220 <memchr>
 8005752:	9a04      	ldr	r2, [sp, #16]
 8005754:	b9d8      	cbnz	r0, 800578e <_svfiprintf_r+0xe6>
 8005756:	06d0      	lsls	r0, r2, #27
 8005758:	bf44      	itt	mi
 800575a:	2320      	movmi	r3, #32
 800575c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005760:	0711      	lsls	r1, r2, #28
 8005762:	bf44      	itt	mi
 8005764:	232b      	movmi	r3, #43	; 0x2b
 8005766:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800576a:	f89a 3000 	ldrb.w	r3, [sl]
 800576e:	2b2a      	cmp	r3, #42	; 0x2a
 8005770:	d015      	beq.n	800579e <_svfiprintf_r+0xf6>
 8005772:	9a07      	ldr	r2, [sp, #28]
 8005774:	4654      	mov	r4, sl
 8005776:	2000      	movs	r0, #0
 8005778:	f04f 0c0a 	mov.w	ip, #10
 800577c:	4621      	mov	r1, r4
 800577e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005782:	3b30      	subs	r3, #48	; 0x30
 8005784:	2b09      	cmp	r3, #9
 8005786:	d94e      	bls.n	8005826 <_svfiprintf_r+0x17e>
 8005788:	b1b0      	cbz	r0, 80057b8 <_svfiprintf_r+0x110>
 800578a:	9207      	str	r2, [sp, #28]
 800578c:	e014      	b.n	80057b8 <_svfiprintf_r+0x110>
 800578e:	eba0 0308 	sub.w	r3, r0, r8
 8005792:	fa09 f303 	lsl.w	r3, r9, r3
 8005796:	4313      	orrs	r3, r2
 8005798:	9304      	str	r3, [sp, #16]
 800579a:	46a2      	mov	sl, r4
 800579c:	e7d2      	b.n	8005744 <_svfiprintf_r+0x9c>
 800579e:	9b03      	ldr	r3, [sp, #12]
 80057a0:	1d19      	adds	r1, r3, #4
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	9103      	str	r1, [sp, #12]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	bfbb      	ittet	lt
 80057aa:	425b      	neglt	r3, r3
 80057ac:	f042 0202 	orrlt.w	r2, r2, #2
 80057b0:	9307      	strge	r3, [sp, #28]
 80057b2:	9307      	strlt	r3, [sp, #28]
 80057b4:	bfb8      	it	lt
 80057b6:	9204      	strlt	r2, [sp, #16]
 80057b8:	7823      	ldrb	r3, [r4, #0]
 80057ba:	2b2e      	cmp	r3, #46	; 0x2e
 80057bc:	d10c      	bne.n	80057d8 <_svfiprintf_r+0x130>
 80057be:	7863      	ldrb	r3, [r4, #1]
 80057c0:	2b2a      	cmp	r3, #42	; 0x2a
 80057c2:	d135      	bne.n	8005830 <_svfiprintf_r+0x188>
 80057c4:	9b03      	ldr	r3, [sp, #12]
 80057c6:	1d1a      	adds	r2, r3, #4
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	9203      	str	r2, [sp, #12]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	bfb8      	it	lt
 80057d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80057d4:	3402      	adds	r4, #2
 80057d6:	9305      	str	r3, [sp, #20]
 80057d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80058a4 <_svfiprintf_r+0x1fc>
 80057dc:	7821      	ldrb	r1, [r4, #0]
 80057de:	2203      	movs	r2, #3
 80057e0:	4650      	mov	r0, sl
 80057e2:	f7fa fd1d 	bl	8000220 <memchr>
 80057e6:	b140      	cbz	r0, 80057fa <_svfiprintf_r+0x152>
 80057e8:	2340      	movs	r3, #64	; 0x40
 80057ea:	eba0 000a 	sub.w	r0, r0, sl
 80057ee:	fa03 f000 	lsl.w	r0, r3, r0
 80057f2:	9b04      	ldr	r3, [sp, #16]
 80057f4:	4303      	orrs	r3, r0
 80057f6:	3401      	adds	r4, #1
 80057f8:	9304      	str	r3, [sp, #16]
 80057fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057fe:	4826      	ldr	r0, [pc, #152]	; (8005898 <_svfiprintf_r+0x1f0>)
 8005800:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005804:	2206      	movs	r2, #6
 8005806:	f7fa fd0b 	bl	8000220 <memchr>
 800580a:	2800      	cmp	r0, #0
 800580c:	d038      	beq.n	8005880 <_svfiprintf_r+0x1d8>
 800580e:	4b23      	ldr	r3, [pc, #140]	; (800589c <_svfiprintf_r+0x1f4>)
 8005810:	bb1b      	cbnz	r3, 800585a <_svfiprintf_r+0x1b2>
 8005812:	9b03      	ldr	r3, [sp, #12]
 8005814:	3307      	adds	r3, #7
 8005816:	f023 0307 	bic.w	r3, r3, #7
 800581a:	3308      	adds	r3, #8
 800581c:	9303      	str	r3, [sp, #12]
 800581e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005820:	4433      	add	r3, r6
 8005822:	9309      	str	r3, [sp, #36]	; 0x24
 8005824:	e767      	b.n	80056f6 <_svfiprintf_r+0x4e>
 8005826:	fb0c 3202 	mla	r2, ip, r2, r3
 800582a:	460c      	mov	r4, r1
 800582c:	2001      	movs	r0, #1
 800582e:	e7a5      	b.n	800577c <_svfiprintf_r+0xd4>
 8005830:	2300      	movs	r3, #0
 8005832:	3401      	adds	r4, #1
 8005834:	9305      	str	r3, [sp, #20]
 8005836:	4619      	mov	r1, r3
 8005838:	f04f 0c0a 	mov.w	ip, #10
 800583c:	4620      	mov	r0, r4
 800583e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005842:	3a30      	subs	r2, #48	; 0x30
 8005844:	2a09      	cmp	r2, #9
 8005846:	d903      	bls.n	8005850 <_svfiprintf_r+0x1a8>
 8005848:	2b00      	cmp	r3, #0
 800584a:	d0c5      	beq.n	80057d8 <_svfiprintf_r+0x130>
 800584c:	9105      	str	r1, [sp, #20]
 800584e:	e7c3      	b.n	80057d8 <_svfiprintf_r+0x130>
 8005850:	fb0c 2101 	mla	r1, ip, r1, r2
 8005854:	4604      	mov	r4, r0
 8005856:	2301      	movs	r3, #1
 8005858:	e7f0      	b.n	800583c <_svfiprintf_r+0x194>
 800585a:	ab03      	add	r3, sp, #12
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	462a      	mov	r2, r5
 8005860:	4b0f      	ldr	r3, [pc, #60]	; (80058a0 <_svfiprintf_r+0x1f8>)
 8005862:	a904      	add	r1, sp, #16
 8005864:	4638      	mov	r0, r7
 8005866:	f3af 8000 	nop.w
 800586a:	1c42      	adds	r2, r0, #1
 800586c:	4606      	mov	r6, r0
 800586e:	d1d6      	bne.n	800581e <_svfiprintf_r+0x176>
 8005870:	89ab      	ldrh	r3, [r5, #12]
 8005872:	065b      	lsls	r3, r3, #25
 8005874:	f53f af2c 	bmi.w	80056d0 <_svfiprintf_r+0x28>
 8005878:	9809      	ldr	r0, [sp, #36]	; 0x24
 800587a:	b01d      	add	sp, #116	; 0x74
 800587c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005880:	ab03      	add	r3, sp, #12
 8005882:	9300      	str	r3, [sp, #0]
 8005884:	462a      	mov	r2, r5
 8005886:	4b06      	ldr	r3, [pc, #24]	; (80058a0 <_svfiprintf_r+0x1f8>)
 8005888:	a904      	add	r1, sp, #16
 800588a:	4638      	mov	r0, r7
 800588c:	f000 f87a 	bl	8005984 <_printf_i>
 8005890:	e7eb      	b.n	800586a <_svfiprintf_r+0x1c2>
 8005892:	bf00      	nop
 8005894:	08005e44 	.word	0x08005e44
 8005898:	08005e4e 	.word	0x08005e4e
 800589c:	00000000 	.word	0x00000000
 80058a0:	080055f1 	.word	0x080055f1
 80058a4:	08005e4a 	.word	0x08005e4a

080058a8 <_printf_common>:
 80058a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058ac:	4616      	mov	r6, r2
 80058ae:	4699      	mov	r9, r3
 80058b0:	688a      	ldr	r2, [r1, #8]
 80058b2:	690b      	ldr	r3, [r1, #16]
 80058b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058b8:	4293      	cmp	r3, r2
 80058ba:	bfb8      	it	lt
 80058bc:	4613      	movlt	r3, r2
 80058be:	6033      	str	r3, [r6, #0]
 80058c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058c4:	4607      	mov	r7, r0
 80058c6:	460c      	mov	r4, r1
 80058c8:	b10a      	cbz	r2, 80058ce <_printf_common+0x26>
 80058ca:	3301      	adds	r3, #1
 80058cc:	6033      	str	r3, [r6, #0]
 80058ce:	6823      	ldr	r3, [r4, #0]
 80058d0:	0699      	lsls	r1, r3, #26
 80058d2:	bf42      	ittt	mi
 80058d4:	6833      	ldrmi	r3, [r6, #0]
 80058d6:	3302      	addmi	r3, #2
 80058d8:	6033      	strmi	r3, [r6, #0]
 80058da:	6825      	ldr	r5, [r4, #0]
 80058dc:	f015 0506 	ands.w	r5, r5, #6
 80058e0:	d106      	bne.n	80058f0 <_printf_common+0x48>
 80058e2:	f104 0a19 	add.w	sl, r4, #25
 80058e6:	68e3      	ldr	r3, [r4, #12]
 80058e8:	6832      	ldr	r2, [r6, #0]
 80058ea:	1a9b      	subs	r3, r3, r2
 80058ec:	42ab      	cmp	r3, r5
 80058ee:	dc26      	bgt.n	800593e <_printf_common+0x96>
 80058f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058f4:	1e13      	subs	r3, r2, #0
 80058f6:	6822      	ldr	r2, [r4, #0]
 80058f8:	bf18      	it	ne
 80058fa:	2301      	movne	r3, #1
 80058fc:	0692      	lsls	r2, r2, #26
 80058fe:	d42b      	bmi.n	8005958 <_printf_common+0xb0>
 8005900:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005904:	4649      	mov	r1, r9
 8005906:	4638      	mov	r0, r7
 8005908:	47c0      	blx	r8
 800590a:	3001      	adds	r0, #1
 800590c:	d01e      	beq.n	800594c <_printf_common+0xa4>
 800590e:	6823      	ldr	r3, [r4, #0]
 8005910:	68e5      	ldr	r5, [r4, #12]
 8005912:	6832      	ldr	r2, [r6, #0]
 8005914:	f003 0306 	and.w	r3, r3, #6
 8005918:	2b04      	cmp	r3, #4
 800591a:	bf08      	it	eq
 800591c:	1aad      	subeq	r5, r5, r2
 800591e:	68a3      	ldr	r3, [r4, #8]
 8005920:	6922      	ldr	r2, [r4, #16]
 8005922:	bf0c      	ite	eq
 8005924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005928:	2500      	movne	r5, #0
 800592a:	4293      	cmp	r3, r2
 800592c:	bfc4      	itt	gt
 800592e:	1a9b      	subgt	r3, r3, r2
 8005930:	18ed      	addgt	r5, r5, r3
 8005932:	2600      	movs	r6, #0
 8005934:	341a      	adds	r4, #26
 8005936:	42b5      	cmp	r5, r6
 8005938:	d11a      	bne.n	8005970 <_printf_common+0xc8>
 800593a:	2000      	movs	r0, #0
 800593c:	e008      	b.n	8005950 <_printf_common+0xa8>
 800593e:	2301      	movs	r3, #1
 8005940:	4652      	mov	r2, sl
 8005942:	4649      	mov	r1, r9
 8005944:	4638      	mov	r0, r7
 8005946:	47c0      	blx	r8
 8005948:	3001      	adds	r0, #1
 800594a:	d103      	bne.n	8005954 <_printf_common+0xac>
 800594c:	f04f 30ff 	mov.w	r0, #4294967295
 8005950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005954:	3501      	adds	r5, #1
 8005956:	e7c6      	b.n	80058e6 <_printf_common+0x3e>
 8005958:	18e1      	adds	r1, r4, r3
 800595a:	1c5a      	adds	r2, r3, #1
 800595c:	2030      	movs	r0, #48	; 0x30
 800595e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005962:	4422      	add	r2, r4
 8005964:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005968:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800596c:	3302      	adds	r3, #2
 800596e:	e7c7      	b.n	8005900 <_printf_common+0x58>
 8005970:	2301      	movs	r3, #1
 8005972:	4622      	mov	r2, r4
 8005974:	4649      	mov	r1, r9
 8005976:	4638      	mov	r0, r7
 8005978:	47c0      	blx	r8
 800597a:	3001      	adds	r0, #1
 800597c:	d0e6      	beq.n	800594c <_printf_common+0xa4>
 800597e:	3601      	adds	r6, #1
 8005980:	e7d9      	b.n	8005936 <_printf_common+0x8e>
	...

08005984 <_printf_i>:
 8005984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005988:	460c      	mov	r4, r1
 800598a:	4691      	mov	r9, r2
 800598c:	7e27      	ldrb	r7, [r4, #24]
 800598e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005990:	2f78      	cmp	r7, #120	; 0x78
 8005992:	4680      	mov	r8, r0
 8005994:	469a      	mov	sl, r3
 8005996:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800599a:	d807      	bhi.n	80059ac <_printf_i+0x28>
 800599c:	2f62      	cmp	r7, #98	; 0x62
 800599e:	d80a      	bhi.n	80059b6 <_printf_i+0x32>
 80059a0:	2f00      	cmp	r7, #0
 80059a2:	f000 80d8 	beq.w	8005b56 <_printf_i+0x1d2>
 80059a6:	2f58      	cmp	r7, #88	; 0x58
 80059a8:	f000 80a3 	beq.w	8005af2 <_printf_i+0x16e>
 80059ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80059b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059b4:	e03a      	b.n	8005a2c <_printf_i+0xa8>
 80059b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059ba:	2b15      	cmp	r3, #21
 80059bc:	d8f6      	bhi.n	80059ac <_printf_i+0x28>
 80059be:	a001      	add	r0, pc, #4	; (adr r0, 80059c4 <_printf_i+0x40>)
 80059c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80059c4:	08005a1d 	.word	0x08005a1d
 80059c8:	08005a31 	.word	0x08005a31
 80059cc:	080059ad 	.word	0x080059ad
 80059d0:	080059ad 	.word	0x080059ad
 80059d4:	080059ad 	.word	0x080059ad
 80059d8:	080059ad 	.word	0x080059ad
 80059dc:	08005a31 	.word	0x08005a31
 80059e0:	080059ad 	.word	0x080059ad
 80059e4:	080059ad 	.word	0x080059ad
 80059e8:	080059ad 	.word	0x080059ad
 80059ec:	080059ad 	.word	0x080059ad
 80059f0:	08005b3d 	.word	0x08005b3d
 80059f4:	08005a61 	.word	0x08005a61
 80059f8:	08005b1f 	.word	0x08005b1f
 80059fc:	080059ad 	.word	0x080059ad
 8005a00:	080059ad 	.word	0x080059ad
 8005a04:	08005b5f 	.word	0x08005b5f
 8005a08:	080059ad 	.word	0x080059ad
 8005a0c:	08005a61 	.word	0x08005a61
 8005a10:	080059ad 	.word	0x080059ad
 8005a14:	080059ad 	.word	0x080059ad
 8005a18:	08005b27 	.word	0x08005b27
 8005a1c:	680b      	ldr	r3, [r1, #0]
 8005a1e:	1d1a      	adds	r2, r3, #4
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	600a      	str	r2, [r1, #0]
 8005a24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005a28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e0a3      	b.n	8005b78 <_printf_i+0x1f4>
 8005a30:	6825      	ldr	r5, [r4, #0]
 8005a32:	6808      	ldr	r0, [r1, #0]
 8005a34:	062e      	lsls	r6, r5, #24
 8005a36:	f100 0304 	add.w	r3, r0, #4
 8005a3a:	d50a      	bpl.n	8005a52 <_printf_i+0xce>
 8005a3c:	6805      	ldr	r5, [r0, #0]
 8005a3e:	600b      	str	r3, [r1, #0]
 8005a40:	2d00      	cmp	r5, #0
 8005a42:	da03      	bge.n	8005a4c <_printf_i+0xc8>
 8005a44:	232d      	movs	r3, #45	; 0x2d
 8005a46:	426d      	negs	r5, r5
 8005a48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a4c:	485e      	ldr	r0, [pc, #376]	; (8005bc8 <_printf_i+0x244>)
 8005a4e:	230a      	movs	r3, #10
 8005a50:	e019      	b.n	8005a86 <_printf_i+0x102>
 8005a52:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005a56:	6805      	ldr	r5, [r0, #0]
 8005a58:	600b      	str	r3, [r1, #0]
 8005a5a:	bf18      	it	ne
 8005a5c:	b22d      	sxthne	r5, r5
 8005a5e:	e7ef      	b.n	8005a40 <_printf_i+0xbc>
 8005a60:	680b      	ldr	r3, [r1, #0]
 8005a62:	6825      	ldr	r5, [r4, #0]
 8005a64:	1d18      	adds	r0, r3, #4
 8005a66:	6008      	str	r0, [r1, #0]
 8005a68:	0628      	lsls	r0, r5, #24
 8005a6a:	d501      	bpl.n	8005a70 <_printf_i+0xec>
 8005a6c:	681d      	ldr	r5, [r3, #0]
 8005a6e:	e002      	b.n	8005a76 <_printf_i+0xf2>
 8005a70:	0669      	lsls	r1, r5, #25
 8005a72:	d5fb      	bpl.n	8005a6c <_printf_i+0xe8>
 8005a74:	881d      	ldrh	r5, [r3, #0]
 8005a76:	4854      	ldr	r0, [pc, #336]	; (8005bc8 <_printf_i+0x244>)
 8005a78:	2f6f      	cmp	r7, #111	; 0x6f
 8005a7a:	bf0c      	ite	eq
 8005a7c:	2308      	moveq	r3, #8
 8005a7e:	230a      	movne	r3, #10
 8005a80:	2100      	movs	r1, #0
 8005a82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a86:	6866      	ldr	r6, [r4, #4]
 8005a88:	60a6      	str	r6, [r4, #8]
 8005a8a:	2e00      	cmp	r6, #0
 8005a8c:	bfa2      	ittt	ge
 8005a8e:	6821      	ldrge	r1, [r4, #0]
 8005a90:	f021 0104 	bicge.w	r1, r1, #4
 8005a94:	6021      	strge	r1, [r4, #0]
 8005a96:	b90d      	cbnz	r5, 8005a9c <_printf_i+0x118>
 8005a98:	2e00      	cmp	r6, #0
 8005a9a:	d04d      	beq.n	8005b38 <_printf_i+0x1b4>
 8005a9c:	4616      	mov	r6, r2
 8005a9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005aa2:	fb03 5711 	mls	r7, r3, r1, r5
 8005aa6:	5dc7      	ldrb	r7, [r0, r7]
 8005aa8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005aac:	462f      	mov	r7, r5
 8005aae:	42bb      	cmp	r3, r7
 8005ab0:	460d      	mov	r5, r1
 8005ab2:	d9f4      	bls.n	8005a9e <_printf_i+0x11a>
 8005ab4:	2b08      	cmp	r3, #8
 8005ab6:	d10b      	bne.n	8005ad0 <_printf_i+0x14c>
 8005ab8:	6823      	ldr	r3, [r4, #0]
 8005aba:	07df      	lsls	r7, r3, #31
 8005abc:	d508      	bpl.n	8005ad0 <_printf_i+0x14c>
 8005abe:	6923      	ldr	r3, [r4, #16]
 8005ac0:	6861      	ldr	r1, [r4, #4]
 8005ac2:	4299      	cmp	r1, r3
 8005ac4:	bfde      	ittt	le
 8005ac6:	2330      	movle	r3, #48	; 0x30
 8005ac8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005acc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ad0:	1b92      	subs	r2, r2, r6
 8005ad2:	6122      	str	r2, [r4, #16]
 8005ad4:	f8cd a000 	str.w	sl, [sp]
 8005ad8:	464b      	mov	r3, r9
 8005ada:	aa03      	add	r2, sp, #12
 8005adc:	4621      	mov	r1, r4
 8005ade:	4640      	mov	r0, r8
 8005ae0:	f7ff fee2 	bl	80058a8 <_printf_common>
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	d14c      	bne.n	8005b82 <_printf_i+0x1fe>
 8005ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8005aec:	b004      	add	sp, #16
 8005aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005af2:	4835      	ldr	r0, [pc, #212]	; (8005bc8 <_printf_i+0x244>)
 8005af4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005af8:	6823      	ldr	r3, [r4, #0]
 8005afa:	680e      	ldr	r6, [r1, #0]
 8005afc:	061f      	lsls	r7, r3, #24
 8005afe:	f856 5b04 	ldr.w	r5, [r6], #4
 8005b02:	600e      	str	r6, [r1, #0]
 8005b04:	d514      	bpl.n	8005b30 <_printf_i+0x1ac>
 8005b06:	07d9      	lsls	r1, r3, #31
 8005b08:	bf44      	itt	mi
 8005b0a:	f043 0320 	orrmi.w	r3, r3, #32
 8005b0e:	6023      	strmi	r3, [r4, #0]
 8005b10:	b91d      	cbnz	r5, 8005b1a <_printf_i+0x196>
 8005b12:	6823      	ldr	r3, [r4, #0]
 8005b14:	f023 0320 	bic.w	r3, r3, #32
 8005b18:	6023      	str	r3, [r4, #0]
 8005b1a:	2310      	movs	r3, #16
 8005b1c:	e7b0      	b.n	8005a80 <_printf_i+0xfc>
 8005b1e:	6823      	ldr	r3, [r4, #0]
 8005b20:	f043 0320 	orr.w	r3, r3, #32
 8005b24:	6023      	str	r3, [r4, #0]
 8005b26:	2378      	movs	r3, #120	; 0x78
 8005b28:	4828      	ldr	r0, [pc, #160]	; (8005bcc <_printf_i+0x248>)
 8005b2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b2e:	e7e3      	b.n	8005af8 <_printf_i+0x174>
 8005b30:	065e      	lsls	r6, r3, #25
 8005b32:	bf48      	it	mi
 8005b34:	b2ad      	uxthmi	r5, r5
 8005b36:	e7e6      	b.n	8005b06 <_printf_i+0x182>
 8005b38:	4616      	mov	r6, r2
 8005b3a:	e7bb      	b.n	8005ab4 <_printf_i+0x130>
 8005b3c:	680b      	ldr	r3, [r1, #0]
 8005b3e:	6826      	ldr	r6, [r4, #0]
 8005b40:	6960      	ldr	r0, [r4, #20]
 8005b42:	1d1d      	adds	r5, r3, #4
 8005b44:	600d      	str	r5, [r1, #0]
 8005b46:	0635      	lsls	r5, r6, #24
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	d501      	bpl.n	8005b50 <_printf_i+0x1cc>
 8005b4c:	6018      	str	r0, [r3, #0]
 8005b4e:	e002      	b.n	8005b56 <_printf_i+0x1d2>
 8005b50:	0671      	lsls	r1, r6, #25
 8005b52:	d5fb      	bpl.n	8005b4c <_printf_i+0x1c8>
 8005b54:	8018      	strh	r0, [r3, #0]
 8005b56:	2300      	movs	r3, #0
 8005b58:	6123      	str	r3, [r4, #16]
 8005b5a:	4616      	mov	r6, r2
 8005b5c:	e7ba      	b.n	8005ad4 <_printf_i+0x150>
 8005b5e:	680b      	ldr	r3, [r1, #0]
 8005b60:	1d1a      	adds	r2, r3, #4
 8005b62:	600a      	str	r2, [r1, #0]
 8005b64:	681e      	ldr	r6, [r3, #0]
 8005b66:	6862      	ldr	r2, [r4, #4]
 8005b68:	2100      	movs	r1, #0
 8005b6a:	4630      	mov	r0, r6
 8005b6c:	f7fa fb58 	bl	8000220 <memchr>
 8005b70:	b108      	cbz	r0, 8005b76 <_printf_i+0x1f2>
 8005b72:	1b80      	subs	r0, r0, r6
 8005b74:	6060      	str	r0, [r4, #4]
 8005b76:	6863      	ldr	r3, [r4, #4]
 8005b78:	6123      	str	r3, [r4, #16]
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b80:	e7a8      	b.n	8005ad4 <_printf_i+0x150>
 8005b82:	6923      	ldr	r3, [r4, #16]
 8005b84:	4632      	mov	r2, r6
 8005b86:	4649      	mov	r1, r9
 8005b88:	4640      	mov	r0, r8
 8005b8a:	47d0      	blx	sl
 8005b8c:	3001      	adds	r0, #1
 8005b8e:	d0ab      	beq.n	8005ae8 <_printf_i+0x164>
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	079b      	lsls	r3, r3, #30
 8005b94:	d413      	bmi.n	8005bbe <_printf_i+0x23a>
 8005b96:	68e0      	ldr	r0, [r4, #12]
 8005b98:	9b03      	ldr	r3, [sp, #12]
 8005b9a:	4298      	cmp	r0, r3
 8005b9c:	bfb8      	it	lt
 8005b9e:	4618      	movlt	r0, r3
 8005ba0:	e7a4      	b.n	8005aec <_printf_i+0x168>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	4632      	mov	r2, r6
 8005ba6:	4649      	mov	r1, r9
 8005ba8:	4640      	mov	r0, r8
 8005baa:	47d0      	blx	sl
 8005bac:	3001      	adds	r0, #1
 8005bae:	d09b      	beq.n	8005ae8 <_printf_i+0x164>
 8005bb0:	3501      	adds	r5, #1
 8005bb2:	68e3      	ldr	r3, [r4, #12]
 8005bb4:	9903      	ldr	r1, [sp, #12]
 8005bb6:	1a5b      	subs	r3, r3, r1
 8005bb8:	42ab      	cmp	r3, r5
 8005bba:	dcf2      	bgt.n	8005ba2 <_printf_i+0x21e>
 8005bbc:	e7eb      	b.n	8005b96 <_printf_i+0x212>
 8005bbe:	2500      	movs	r5, #0
 8005bc0:	f104 0619 	add.w	r6, r4, #25
 8005bc4:	e7f5      	b.n	8005bb2 <_printf_i+0x22e>
 8005bc6:	bf00      	nop
 8005bc8:	08005e55 	.word	0x08005e55
 8005bcc:	08005e66 	.word	0x08005e66

08005bd0 <memcpy>:
 8005bd0:	440a      	add	r2, r1
 8005bd2:	4291      	cmp	r1, r2
 8005bd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bd8:	d100      	bne.n	8005bdc <memcpy+0xc>
 8005bda:	4770      	bx	lr
 8005bdc:	b510      	push	{r4, lr}
 8005bde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005be2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005be6:	4291      	cmp	r1, r2
 8005be8:	d1f9      	bne.n	8005bde <memcpy+0xe>
 8005bea:	bd10      	pop	{r4, pc}

08005bec <memmove>:
 8005bec:	4288      	cmp	r0, r1
 8005bee:	b510      	push	{r4, lr}
 8005bf0:	eb01 0402 	add.w	r4, r1, r2
 8005bf4:	d902      	bls.n	8005bfc <memmove+0x10>
 8005bf6:	4284      	cmp	r4, r0
 8005bf8:	4623      	mov	r3, r4
 8005bfa:	d807      	bhi.n	8005c0c <memmove+0x20>
 8005bfc:	1e43      	subs	r3, r0, #1
 8005bfe:	42a1      	cmp	r1, r4
 8005c00:	d008      	beq.n	8005c14 <memmove+0x28>
 8005c02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c0a:	e7f8      	b.n	8005bfe <memmove+0x12>
 8005c0c:	4402      	add	r2, r0
 8005c0e:	4601      	mov	r1, r0
 8005c10:	428a      	cmp	r2, r1
 8005c12:	d100      	bne.n	8005c16 <memmove+0x2a>
 8005c14:	bd10      	pop	{r4, pc}
 8005c16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c1e:	e7f7      	b.n	8005c10 <memmove+0x24>

08005c20 <_free_r>:
 8005c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c22:	2900      	cmp	r1, #0
 8005c24:	d048      	beq.n	8005cb8 <_free_r+0x98>
 8005c26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c2a:	9001      	str	r0, [sp, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f1a1 0404 	sub.w	r4, r1, #4
 8005c32:	bfb8      	it	lt
 8005c34:	18e4      	addlt	r4, r4, r3
 8005c36:	f000 f8d3 	bl	8005de0 <__malloc_lock>
 8005c3a:	4a20      	ldr	r2, [pc, #128]	; (8005cbc <_free_r+0x9c>)
 8005c3c:	9801      	ldr	r0, [sp, #4]
 8005c3e:	6813      	ldr	r3, [r2, #0]
 8005c40:	4615      	mov	r5, r2
 8005c42:	b933      	cbnz	r3, 8005c52 <_free_r+0x32>
 8005c44:	6063      	str	r3, [r4, #4]
 8005c46:	6014      	str	r4, [r2, #0]
 8005c48:	b003      	add	sp, #12
 8005c4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c4e:	f000 b8cd 	b.w	8005dec <__malloc_unlock>
 8005c52:	42a3      	cmp	r3, r4
 8005c54:	d90b      	bls.n	8005c6e <_free_r+0x4e>
 8005c56:	6821      	ldr	r1, [r4, #0]
 8005c58:	1862      	adds	r2, r4, r1
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	bf04      	itt	eq
 8005c5e:	681a      	ldreq	r2, [r3, #0]
 8005c60:	685b      	ldreq	r3, [r3, #4]
 8005c62:	6063      	str	r3, [r4, #4]
 8005c64:	bf04      	itt	eq
 8005c66:	1852      	addeq	r2, r2, r1
 8005c68:	6022      	streq	r2, [r4, #0]
 8005c6a:	602c      	str	r4, [r5, #0]
 8005c6c:	e7ec      	b.n	8005c48 <_free_r+0x28>
 8005c6e:	461a      	mov	r2, r3
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	b10b      	cbz	r3, 8005c78 <_free_r+0x58>
 8005c74:	42a3      	cmp	r3, r4
 8005c76:	d9fa      	bls.n	8005c6e <_free_r+0x4e>
 8005c78:	6811      	ldr	r1, [r2, #0]
 8005c7a:	1855      	adds	r5, r2, r1
 8005c7c:	42a5      	cmp	r5, r4
 8005c7e:	d10b      	bne.n	8005c98 <_free_r+0x78>
 8005c80:	6824      	ldr	r4, [r4, #0]
 8005c82:	4421      	add	r1, r4
 8005c84:	1854      	adds	r4, r2, r1
 8005c86:	42a3      	cmp	r3, r4
 8005c88:	6011      	str	r1, [r2, #0]
 8005c8a:	d1dd      	bne.n	8005c48 <_free_r+0x28>
 8005c8c:	681c      	ldr	r4, [r3, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	6053      	str	r3, [r2, #4]
 8005c92:	4421      	add	r1, r4
 8005c94:	6011      	str	r1, [r2, #0]
 8005c96:	e7d7      	b.n	8005c48 <_free_r+0x28>
 8005c98:	d902      	bls.n	8005ca0 <_free_r+0x80>
 8005c9a:	230c      	movs	r3, #12
 8005c9c:	6003      	str	r3, [r0, #0]
 8005c9e:	e7d3      	b.n	8005c48 <_free_r+0x28>
 8005ca0:	6825      	ldr	r5, [r4, #0]
 8005ca2:	1961      	adds	r1, r4, r5
 8005ca4:	428b      	cmp	r3, r1
 8005ca6:	bf04      	itt	eq
 8005ca8:	6819      	ldreq	r1, [r3, #0]
 8005caa:	685b      	ldreq	r3, [r3, #4]
 8005cac:	6063      	str	r3, [r4, #4]
 8005cae:	bf04      	itt	eq
 8005cb0:	1949      	addeq	r1, r1, r5
 8005cb2:	6021      	streq	r1, [r4, #0]
 8005cb4:	6054      	str	r4, [r2, #4]
 8005cb6:	e7c7      	b.n	8005c48 <_free_r+0x28>
 8005cb8:	b003      	add	sp, #12
 8005cba:	bd30      	pop	{r4, r5, pc}
 8005cbc:	20000090 	.word	0x20000090

08005cc0 <_malloc_r>:
 8005cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc2:	1ccd      	adds	r5, r1, #3
 8005cc4:	f025 0503 	bic.w	r5, r5, #3
 8005cc8:	3508      	adds	r5, #8
 8005cca:	2d0c      	cmp	r5, #12
 8005ccc:	bf38      	it	cc
 8005cce:	250c      	movcc	r5, #12
 8005cd0:	2d00      	cmp	r5, #0
 8005cd2:	4606      	mov	r6, r0
 8005cd4:	db01      	blt.n	8005cda <_malloc_r+0x1a>
 8005cd6:	42a9      	cmp	r1, r5
 8005cd8:	d903      	bls.n	8005ce2 <_malloc_r+0x22>
 8005cda:	230c      	movs	r3, #12
 8005cdc:	6033      	str	r3, [r6, #0]
 8005cde:	2000      	movs	r0, #0
 8005ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ce2:	f000 f87d 	bl	8005de0 <__malloc_lock>
 8005ce6:	4921      	ldr	r1, [pc, #132]	; (8005d6c <_malloc_r+0xac>)
 8005ce8:	680a      	ldr	r2, [r1, #0]
 8005cea:	4614      	mov	r4, r2
 8005cec:	b99c      	cbnz	r4, 8005d16 <_malloc_r+0x56>
 8005cee:	4f20      	ldr	r7, [pc, #128]	; (8005d70 <_malloc_r+0xb0>)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	b923      	cbnz	r3, 8005cfe <_malloc_r+0x3e>
 8005cf4:	4621      	mov	r1, r4
 8005cf6:	4630      	mov	r0, r6
 8005cf8:	f000 f862 	bl	8005dc0 <_sbrk_r>
 8005cfc:	6038      	str	r0, [r7, #0]
 8005cfe:	4629      	mov	r1, r5
 8005d00:	4630      	mov	r0, r6
 8005d02:	f000 f85d 	bl	8005dc0 <_sbrk_r>
 8005d06:	1c43      	adds	r3, r0, #1
 8005d08:	d123      	bne.n	8005d52 <_malloc_r+0x92>
 8005d0a:	230c      	movs	r3, #12
 8005d0c:	6033      	str	r3, [r6, #0]
 8005d0e:	4630      	mov	r0, r6
 8005d10:	f000 f86c 	bl	8005dec <__malloc_unlock>
 8005d14:	e7e3      	b.n	8005cde <_malloc_r+0x1e>
 8005d16:	6823      	ldr	r3, [r4, #0]
 8005d18:	1b5b      	subs	r3, r3, r5
 8005d1a:	d417      	bmi.n	8005d4c <_malloc_r+0x8c>
 8005d1c:	2b0b      	cmp	r3, #11
 8005d1e:	d903      	bls.n	8005d28 <_malloc_r+0x68>
 8005d20:	6023      	str	r3, [r4, #0]
 8005d22:	441c      	add	r4, r3
 8005d24:	6025      	str	r5, [r4, #0]
 8005d26:	e004      	b.n	8005d32 <_malloc_r+0x72>
 8005d28:	6863      	ldr	r3, [r4, #4]
 8005d2a:	42a2      	cmp	r2, r4
 8005d2c:	bf0c      	ite	eq
 8005d2e:	600b      	streq	r3, [r1, #0]
 8005d30:	6053      	strne	r3, [r2, #4]
 8005d32:	4630      	mov	r0, r6
 8005d34:	f000 f85a 	bl	8005dec <__malloc_unlock>
 8005d38:	f104 000b 	add.w	r0, r4, #11
 8005d3c:	1d23      	adds	r3, r4, #4
 8005d3e:	f020 0007 	bic.w	r0, r0, #7
 8005d42:	1ac2      	subs	r2, r0, r3
 8005d44:	d0cc      	beq.n	8005ce0 <_malloc_r+0x20>
 8005d46:	1a1b      	subs	r3, r3, r0
 8005d48:	50a3      	str	r3, [r4, r2]
 8005d4a:	e7c9      	b.n	8005ce0 <_malloc_r+0x20>
 8005d4c:	4622      	mov	r2, r4
 8005d4e:	6864      	ldr	r4, [r4, #4]
 8005d50:	e7cc      	b.n	8005cec <_malloc_r+0x2c>
 8005d52:	1cc4      	adds	r4, r0, #3
 8005d54:	f024 0403 	bic.w	r4, r4, #3
 8005d58:	42a0      	cmp	r0, r4
 8005d5a:	d0e3      	beq.n	8005d24 <_malloc_r+0x64>
 8005d5c:	1a21      	subs	r1, r4, r0
 8005d5e:	4630      	mov	r0, r6
 8005d60:	f000 f82e 	bl	8005dc0 <_sbrk_r>
 8005d64:	3001      	adds	r0, #1
 8005d66:	d1dd      	bne.n	8005d24 <_malloc_r+0x64>
 8005d68:	e7cf      	b.n	8005d0a <_malloc_r+0x4a>
 8005d6a:	bf00      	nop
 8005d6c:	20000090 	.word	0x20000090
 8005d70:	20000094 	.word	0x20000094

08005d74 <_realloc_r>:
 8005d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d76:	4607      	mov	r7, r0
 8005d78:	4614      	mov	r4, r2
 8005d7a:	460e      	mov	r6, r1
 8005d7c:	b921      	cbnz	r1, 8005d88 <_realloc_r+0x14>
 8005d7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005d82:	4611      	mov	r1, r2
 8005d84:	f7ff bf9c 	b.w	8005cc0 <_malloc_r>
 8005d88:	b922      	cbnz	r2, 8005d94 <_realloc_r+0x20>
 8005d8a:	f7ff ff49 	bl	8005c20 <_free_r>
 8005d8e:	4625      	mov	r5, r4
 8005d90:	4628      	mov	r0, r5
 8005d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d94:	f000 f830 	bl	8005df8 <_malloc_usable_size_r>
 8005d98:	42a0      	cmp	r0, r4
 8005d9a:	d20f      	bcs.n	8005dbc <_realloc_r+0x48>
 8005d9c:	4621      	mov	r1, r4
 8005d9e:	4638      	mov	r0, r7
 8005da0:	f7ff ff8e 	bl	8005cc0 <_malloc_r>
 8005da4:	4605      	mov	r5, r0
 8005da6:	2800      	cmp	r0, #0
 8005da8:	d0f2      	beq.n	8005d90 <_realloc_r+0x1c>
 8005daa:	4631      	mov	r1, r6
 8005dac:	4622      	mov	r2, r4
 8005dae:	f7ff ff0f 	bl	8005bd0 <memcpy>
 8005db2:	4631      	mov	r1, r6
 8005db4:	4638      	mov	r0, r7
 8005db6:	f7ff ff33 	bl	8005c20 <_free_r>
 8005dba:	e7e9      	b.n	8005d90 <_realloc_r+0x1c>
 8005dbc:	4635      	mov	r5, r6
 8005dbe:	e7e7      	b.n	8005d90 <_realloc_r+0x1c>

08005dc0 <_sbrk_r>:
 8005dc0:	b538      	push	{r3, r4, r5, lr}
 8005dc2:	4d06      	ldr	r5, [pc, #24]	; (8005ddc <_sbrk_r+0x1c>)
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	4604      	mov	r4, r0
 8005dc8:	4608      	mov	r0, r1
 8005dca:	602b      	str	r3, [r5, #0]
 8005dcc:	f7fb f8ec 	bl	8000fa8 <_sbrk>
 8005dd0:	1c43      	adds	r3, r0, #1
 8005dd2:	d102      	bne.n	8005dda <_sbrk_r+0x1a>
 8005dd4:	682b      	ldr	r3, [r5, #0]
 8005dd6:	b103      	cbz	r3, 8005dda <_sbrk_r+0x1a>
 8005dd8:	6023      	str	r3, [r4, #0]
 8005dda:	bd38      	pop	{r3, r4, r5, pc}
 8005ddc:	20000614 	.word	0x20000614

08005de0 <__malloc_lock>:
 8005de0:	4801      	ldr	r0, [pc, #4]	; (8005de8 <__malloc_lock+0x8>)
 8005de2:	f000 b811 	b.w	8005e08 <__retarget_lock_acquire_recursive>
 8005de6:	bf00      	nop
 8005de8:	2000061c 	.word	0x2000061c

08005dec <__malloc_unlock>:
 8005dec:	4801      	ldr	r0, [pc, #4]	; (8005df4 <__malloc_unlock+0x8>)
 8005dee:	f000 b80c 	b.w	8005e0a <__retarget_lock_release_recursive>
 8005df2:	bf00      	nop
 8005df4:	2000061c 	.word	0x2000061c

08005df8 <_malloc_usable_size_r>:
 8005df8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dfc:	1f18      	subs	r0, r3, #4
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	bfbc      	itt	lt
 8005e02:	580b      	ldrlt	r3, [r1, r0]
 8005e04:	18c0      	addlt	r0, r0, r3
 8005e06:	4770      	bx	lr

08005e08 <__retarget_lock_acquire_recursive>:
 8005e08:	4770      	bx	lr

08005e0a <__retarget_lock_release_recursive>:
 8005e0a:	4770      	bx	lr

08005e0c <_init>:
 8005e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e0e:	bf00      	nop
 8005e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e12:	bc08      	pop	{r3}
 8005e14:	469e      	mov	lr, r3
 8005e16:	4770      	bx	lr

08005e18 <_fini>:
 8005e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1a:	bf00      	nop
 8005e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e1e:	bc08      	pop	{r3}
 8005e20:	469e      	mov	lr, r3
 8005e22:	4770      	bx	lr
