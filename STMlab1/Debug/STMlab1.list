
STMlab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bc4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08005d94  08005d94  00015d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005de8  08005de8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005de8  08005de8  00015de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005df0  08005df0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005df0  08005df0  00015df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005df4  08005df4  00015df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005df8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a8  20000070  08005e68  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000618  08005e68  00020618  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017425  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026f4  00000000  00000000  000374c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001230  00000000  00000000  00039bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001128  00000000  00000000  0003adf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002855f  00000000  00000000  0003bf18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010088  00000000  00000000  00064477  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001015f6  00000000  00000000  000744ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00175af5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005100  00000000  00000000  00175b70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005d7c 	.word	0x08005d7c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005d7c 	.word	0x08005d7c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fd65 	bl	8001092 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f81e 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 f9ea 	bl	80009a4 <MX_GPIO_Init>
  MX_ETH_Init();
 80005d0:	f000 f8fc 	bl	80007cc <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005d4:	f000 f988 	bl	80008e8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005d8:	f000 f9b6 	bl	8000948 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80005dc:	f000 f8a4 	bl	8000728 <MX_ADC1_Init>
  MX_TIM2_Init();
 80005e0:	f000 f934 	bl	800084c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2); //se debe inicializar timer
 80005e4:	4805      	ldr	r0, [pc, #20]	; (80005fc <main+0x3c>)
 80005e6:	f003 fb63 	bl	8003cb0 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  pulse=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 80005ea:	2101      	movs	r1, #1
 80005ec:	4804      	ldr	r0, [pc, #16]	; (8000600 <main+0x40>)
 80005ee:	f002 f8f1 	bl	80027d4 <HAL_GPIO_ReadPin>
 80005f2:	4603      	mov	r3, r0
 80005f4:	461a      	mov	r2, r3
 80005f6:	4b03      	ldr	r3, [pc, #12]	; (8000604 <main+0x44>)
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	e7f6      	b.n	80005ea <main+0x2a>
 80005fc:	2000057c 	.word	0x2000057c
 8000600:	40020400 	.word	0x40020400
 8000604:	20000578 	.word	0x20000578

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b0b4      	sub	sp, #208	; 0xd0
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000612:	2230      	movs	r2, #48	; 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f004 ffa2 	bl	8005560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800062c:	f107 0308 	add.w	r3, r7, #8
 8000630:	2284      	movs	r2, #132	; 0x84
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f004 ff93 	bl	8005560 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800063a:	f002 fa45 	bl	8002ac8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063e:	4b37      	ldr	r3, [pc, #220]	; (800071c <SystemClock_Config+0x114>)
 8000640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000642:	4a36      	ldr	r2, [pc, #216]	; (800071c <SystemClock_Config+0x114>)
 8000644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000648:	6413      	str	r3, [r2, #64]	; 0x40
 800064a:	4b34      	ldr	r3, [pc, #208]	; (800071c <SystemClock_Config+0x114>)
 800064c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000656:	4b32      	ldr	r3, [pc, #200]	; (8000720 <SystemClock_Config+0x118>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800065e:	4a30      	ldr	r2, [pc, #192]	; (8000720 <SystemClock_Config+0x118>)
 8000660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000664:	6013      	str	r3, [r2, #0]
 8000666:	4b2e      	ldr	r3, [pc, #184]	; (8000720 <SystemClock_Config+0x118>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000672:	2301      	movs	r3, #1
 8000674:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000678:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800067c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000680:	2302      	movs	r3, #2
 8000682:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000686:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800068a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800068e:	2304      	movs	r3, #4
 8000690:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000694:	2348      	movs	r3, #72	; 0x48
 8000696:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069a:	2302      	movs	r3, #2
 800069c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006a0:	2303      	movs	r3, #3
 80006a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f002 fa1c 	bl	8002ae8 <HAL_RCC_OscConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80006b6:	f000 fa5b 	bl	8000b70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ba:	230f      	movs	r3, #15
 80006bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	2302      	movs	r3, #2
 80006c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006da:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006de:	2102      	movs	r1, #2
 80006e0:	4618      	mov	r0, r3
 80006e2:	f002 fca5 	bl	8003030 <HAL_RCC_ClockConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80006ec:	f000 fa40 	bl	8000b70 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <SystemClock_Config+0x11c>)
 80006f2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	4618      	mov	r0, r3
 8000704:	f002 fe8c 	bl	8003420 <HAL_RCCEx_PeriphCLKConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 800070e:	f000 fa2f 	bl	8000b70 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	37d0      	adds	r7, #208	; 0xd0
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000
 8000724:	00200100 	.word	0x00200100

08000728 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800072e:	463b      	mov	r3, r7
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800073a:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <MX_ADC1_Init+0x98>)
 800073c:	4a21      	ldr	r2, [pc, #132]	; (80007c4 <MX_ADC1_Init+0x9c>)
 800073e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <MX_ADC1_Init+0x98>)
 8000742:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000746:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000748:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <MX_ADC1_Init+0x98>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800074e:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <MX_ADC1_Init+0x98>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000754:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <MX_ADC1_Init+0x98>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800075a:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <MX_ADC1_Init+0x98>)
 800075c:	2200      	movs	r2, #0
 800075e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000762:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <MX_ADC1_Init+0x98>)
 8000764:	2200      	movs	r2, #0
 8000766:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <MX_ADC1_Init+0x98>)
 800076a:	4a17      	ldr	r2, [pc, #92]	; (80007c8 <MX_ADC1_Init+0xa0>)
 800076c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800076e:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_ADC1_Init+0x98>)
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_ADC1_Init+0x98>)
 8000776:	2201      	movs	r2, #1
 8000778:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_ADC1_Init+0x98>)
 800077c:	2200      	movs	r2, #0
 800077e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_ADC1_Init+0x98>)
 8000784:	2201      	movs	r2, #1
 8000786:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000788:	480d      	ldr	r0, [pc, #52]	; (80007c0 <MX_ADC1_Init+0x98>)
 800078a:	f000 fd01 	bl	8001190 <HAL_ADC_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000794:	f000 f9ec 	bl	8000b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000798:	2300      	movs	r3, #0
 800079a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800079c:	2301      	movs	r3, #1
 800079e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80007a0:	2301      	movs	r3, #1
 80007a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a4:	463b      	mov	r3, r7
 80007a6:	4619      	mov	r1, r3
 80007a8:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_ADC1_Init+0x98>)
 80007aa:	f000 fe9b 	bl	80014e4 <HAL_ADC_ConfigChannel>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007b4:	f000 f9dc 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000530 	.word	0x20000530
 80007c4:	40012000 	.word	0x40012000
 80007c8:	0f000001 	.word	0x0f000001

080007cc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007d0:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <MX_ETH_Init+0x78>)
 80007d2:	4a1d      	ldr	r2, [pc, #116]	; (8000848 <MX_ETH_Init+0x7c>)
 80007d4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80007d6:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <MX_ETH_Init+0x78>)
 80007d8:	2201      	movs	r2, #1
 80007da:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80007dc:	4b19      	ldr	r3, [pc, #100]	; (8000844 <MX_ETH_Init+0x78>)
 80007de:	2200      	movs	r2, #0
 80007e0:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_ETH_Init+0x78>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	2200      	movs	r2, #0
 80007e8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80007ea:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_ETH_Init+0x78>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	3301      	adds	r3, #1
 80007f0:	2280      	movs	r2, #128	; 0x80
 80007f2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80007f4:	4b13      	ldr	r3, [pc, #76]	; (8000844 <MX_ETH_Init+0x78>)
 80007f6:	695b      	ldr	r3, [r3, #20]
 80007f8:	3302      	adds	r3, #2
 80007fa:	22e1      	movs	r2, #225	; 0xe1
 80007fc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_ETH_Init+0x78>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	3303      	adds	r3, #3
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000808:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_ETH_Init+0x78>)
 800080a:	695b      	ldr	r3, [r3, #20]
 800080c:	3304      	adds	r3, #4
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_ETH_Init+0x78>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	3305      	adds	r3, #5
 8000818:	2200      	movs	r2, #0
 800081a:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_ETH_Init+0x78>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <MX_ETH_Init+0x78>)
 8000824:	2200      	movs	r2, #0
 8000826:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_ETH_Init+0x78>)
 800082a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800082e:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000830:	4804      	ldr	r0, [pc, #16]	; (8000844 <MX_ETH_Init+0x78>)
 8000832:	f001 f9b9 	bl	8001ba8 <HAL_ETH_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 800083c:	f000 f998 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200005c8 	.word	0x200005c8
 8000848:	40028000 	.word	0x40028000

0800084c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b088      	sub	sp, #32
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000852:	f107 0310 	add.w	r3, r7, #16
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800086a:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <MX_TIM2_Init+0x94>)
 800086c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000870:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000872:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <MX_TIM2_Init+0x94>)
 8000874:	2247      	movs	r2, #71	; 0x47
 8000876:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000878:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <MX_TIM2_Init+0x94>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500000;
 800087e:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <MX_TIM2_Init+0x94>)
 8000880:	4a18      	ldr	r2, [pc, #96]	; (80008e4 <MX_TIM2_Init+0x98>)
 8000882:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000884:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <MX_TIM2_Init+0x94>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <MX_TIM2_Init+0x94>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000890:	4813      	ldr	r0, [pc, #76]	; (80008e0 <MX_TIM2_Init+0x94>)
 8000892:	f003 f9b5 	bl	8003c00 <HAL_TIM_Base_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800089c:	f000 f968 	bl	8000b70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008a6:	f107 0310 	add.w	r3, r7, #16
 80008aa:	4619      	mov	r1, r3
 80008ac:	480c      	ldr	r0, [pc, #48]	; (80008e0 <MX_TIM2_Init+0x94>)
 80008ae:	f003 fb97 	bl	8003fe0 <HAL_TIM_ConfigClockSource>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008b8:	f000 f95a 	bl	8000b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008bc:	2300      	movs	r3, #0
 80008be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	4619      	mov	r1, r3
 80008c8:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_TIM2_Init+0x94>)
 80008ca:	f003 fda9 	bl	8004420 <HAL_TIMEx_MasterConfigSynchronization>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008d4:	f000 f94c 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	3720      	adds	r7, #32
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	2000057c 	.word	0x2000057c
 80008e4:	0007a120 	.word	0x0007a120

080008e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_USART3_UART_Init+0x58>)
 80008ee:	4a15      	ldr	r2, [pc, #84]	; (8000944 <MX_USART3_UART_Init+0x5c>)
 80008f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <MX_USART3_UART_Init+0x58>)
 80008f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_USART3_UART_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_USART3_UART_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_USART3_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_USART3_UART_Init+0x58>)
 800090e:	220c      	movs	r2, #12
 8000910:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_USART3_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_USART3_UART_Init+0x58>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_USART3_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_USART3_UART_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_USART3_UART_Init+0x58>)
 800092c:	f003 fe24 	bl	8004578 <HAL_UART_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000936:	f000 f91b 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000098 	.word	0x20000098
 8000944:	40004800 	.word	0x40004800

08000948 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000952:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000956:	2206      	movs	r2, #6
 8000958:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095c:	2202      	movs	r2, #2
 800095e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000968:	2202      	movs	r2, #2
 800096a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096e:	2201      	movs	r2, #1
 8000970:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097a:	2200      	movs	r2, #0
 800097c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000980:	2201      	movs	r2, #1
 8000982:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098c:	f001 ff53 	bl	8002836 <HAL_PCD_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000996:	f000 f8eb 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	2000011c 	.word	0x2000011c

080009a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08c      	sub	sp, #48	; 0x30
 80009a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ba:	4b47      	ldr	r3, [pc, #284]	; (8000ad8 <MX_GPIO_Init+0x134>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a46      	ldr	r2, [pc, #280]	; (8000ad8 <MX_GPIO_Init+0x134>)
 80009c0:	f043 0304 	orr.w	r3, r3, #4
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b44      	ldr	r3, [pc, #272]	; (8000ad8 <MX_GPIO_Init+0x134>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0304 	and.w	r3, r3, #4
 80009ce:	61bb      	str	r3, [r7, #24]
 80009d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009d2:	4b41      	ldr	r3, [pc, #260]	; (8000ad8 <MX_GPIO_Init+0x134>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a40      	ldr	r2, [pc, #256]	; (8000ad8 <MX_GPIO_Init+0x134>)
 80009d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b3e      	ldr	r3, [pc, #248]	; (8000ad8 <MX_GPIO_Init+0x134>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b3b      	ldr	r3, [pc, #236]	; (8000ad8 <MX_GPIO_Init+0x134>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a3a      	ldr	r2, [pc, #232]	; (8000ad8 <MX_GPIO_Init+0x134>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b38      	ldr	r3, [pc, #224]	; (8000ad8 <MX_GPIO_Init+0x134>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	4b35      	ldr	r3, [pc, #212]	; (8000ad8 <MX_GPIO_Init+0x134>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a34      	ldr	r2, [pc, #208]	; (8000ad8 <MX_GPIO_Init+0x134>)
 8000a08:	f043 0302 	orr.w	r3, r3, #2
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b32      	ldr	r3, [pc, #200]	; (8000ad8 <MX_GPIO_Init+0x134>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a1a:	4b2f      	ldr	r3, [pc, #188]	; (8000ad8 <MX_GPIO_Init+0x134>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a2e      	ldr	r2, [pc, #184]	; (8000ad8 <MX_GPIO_Init+0x134>)
 8000a20:	f043 0308 	orr.w	r3, r3, #8
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b2c      	ldr	r3, [pc, #176]	; (8000ad8 <MX_GPIO_Init+0x134>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0308 	and.w	r3, r3, #8
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a32:	4b29      	ldr	r3, [pc, #164]	; (8000ad8 <MX_GPIO_Init+0x134>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a28      	ldr	r2, [pc, #160]	; (8000ad8 <MX_GPIO_Init+0x134>)
 8000a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b26      	ldr	r3, [pc, #152]	; (8000ad8 <MX_GPIO_Init+0x134>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a50:	4822      	ldr	r0, [pc, #136]	; (8000adc <MX_GPIO_Init+0x138>)
 8000a52:	f001 fed7 	bl	8002804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2140      	movs	r1, #64	; 0x40
 8000a5a:	4821      	ldr	r0, [pc, #132]	; (8000ae0 <MX_GPIO_Init+0x13c>)
 8000a5c:	f001 fed2 	bl	8002804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a66:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4619      	mov	r1, r3
 8000a76:	481b      	ldr	r0, [pc, #108]	; (8000ae4 <MX_GPIO_Init+0x140>)
 8000a78:	f001 fd02 	bl	8002480 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a7c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	4811      	ldr	r0, [pc, #68]	; (8000adc <MX_GPIO_Init+0x138>)
 8000a96:	f001 fcf3 	bl	8002480 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a9a:	2340      	movs	r3, #64	; 0x40
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	480b      	ldr	r0, [pc, #44]	; (8000ae0 <MX_GPIO_Init+0x13c>)
 8000ab2:	f001 fce5 	bl	8002480 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ab6:	2380      	movs	r3, #128	; 0x80
 8000ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aba:	2300      	movs	r3, #0
 8000abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <MX_GPIO_Init+0x13c>)
 8000aca:	f001 fcd9 	bl	8002480 <HAL_GPIO_Init>

}
 8000ace:	bf00      	nop
 8000ad0:	3730      	adds	r7, #48	; 0x30
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40020400 	.word	0x40020400
 8000ae0:	40021800 	.word	0x40021800
 8000ae4:	40020800 	.word	0x40020800

08000ae8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  if(htim==&htim2){
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a18      	ldr	r2, [pc, #96]	; (8000b54 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d129      	bne.n	8000b4c <HAL_TIM_PeriodElapsedCallback+0x64>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000af8:	2201      	movs	r2, #1
 8000afa:	2101      	movs	r1, #1
 8000afc:	4816      	ldr	r0, [pc, #88]	; (8000b58 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000afe:	f001 fe81 	bl	8002804 <HAL_GPIO_WritePin>
	  HAL_ADC_Start(&hadc1);
 8000b02:	4816      	ldr	r0, [pc, #88]	; (8000b5c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000b04:	f000 fb88 	bl	8001218 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000b08:	f04f 31ff 	mov.w	r1, #4294967295
 8000b0c:	4813      	ldr	r0, [pc, #76]	; (8000b5c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000b0e:	f000 fc51 	bl	80013b4 <HAL_ADC_PollForConversion>
	  adc_value = HAL_ADC_GetValue(&hadc1);
 8000b12:	4812      	ldr	r0, [pc, #72]	; (8000b5c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000b14:	f000 fcd9 	bl	80014ca <HAL_ADC_GetValue>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000b1c:	601a      	str	r2, [r3, #0]

	  sprintf(message, "%hu\r\n",(int)adc_value);
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	490f      	ldr	r1, [pc, #60]	; (8000b64 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000b26:	4810      	ldr	r0, [pc, #64]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000b28:	f004 fd22 	bl	8005570 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000b2c:	480e      	ldr	r0, [pc, #56]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000b2e:	f7ff fb6f 	bl	8000210 <strlen>
 8000b32:	4603      	mov	r3, r0
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3a:	490b      	ldr	r1, [pc, #44]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000b3c:	480b      	ldr	r0, [pc, #44]	; (8000b6c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000b3e:	f003 fd69 	bl	8004614 <HAL_UART_Transmit>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2101      	movs	r1, #1
 8000b46:	4804      	ldr	r0, [pc, #16]	; (8000b58 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000b48:	f001 fe5c 	bl	8002804 <HAL_GPIO_WritePin>
  }
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	2000057c 	.word	0x2000057c
 8000b58:	40020400 	.word	0x40020400
 8000b5c:	20000530 	.word	0x20000530
 8000b60:	2000052c 	.word	0x2000052c
 8000b64:	08005d94 	.word	0x08005d94
 8000b68:	20000520 	.word	0x20000520
 8000b6c:	20000098 	.word	0x20000098

08000b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
	...

08000b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b86:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <HAL_MspInit+0x44>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	4a0e      	ldr	r2, [pc, #56]	; (8000bc4 <HAL_MspInit+0x44>)
 8000b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b90:	6413      	str	r3, [r2, #64]	; 0x40
 8000b92:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <HAL_MspInit+0x44>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <HAL_MspInit+0x44>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	4a08      	ldr	r2, [pc, #32]	; (8000bc4 <HAL_MspInit+0x44>)
 8000ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_MspInit+0x44>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800

08000bc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a15      	ldr	r2, [pc, #84]	; (8000c3c <HAL_ADC_MspInit+0x74>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d123      	bne.n	8000c32 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <HAL_ADC_MspInit+0x78>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bee:	4a14      	ldr	r2, [pc, #80]	; (8000c40 <HAL_ADC_MspInit+0x78>)
 8000bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_ADC_MspInit+0x78>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_ADC_MspInit+0x78>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <HAL_ADC_MspInit+0x78>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_ADC_MspInit+0x78>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4805      	ldr	r0, [pc, #20]	; (8000c44 <HAL_ADC_MspInit+0x7c>)
 8000c2e:	f001 fc27 	bl	8002480 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c32:	bf00      	nop
 8000c34:	3728      	adds	r7, #40	; 0x28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40012000 	.word	0x40012000
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020000 	.word	0x40020000

08000c48 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08e      	sub	sp, #56	; 0x38
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a4e      	ldr	r2, [pc, #312]	; (8000da0 <HAL_ETH_MspInit+0x158>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	f040 8096 	bne.w	8000d98 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000c6c:	4b4d      	ldr	r3, [pc, #308]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c70:	4a4c      	ldr	r2, [pc, #304]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000c72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c76:	6313      	str	r3, [r2, #48]	; 0x30
 8000c78:	4b4a      	ldr	r3, [pc, #296]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c80:	623b      	str	r3, [r7, #32]
 8000c82:	6a3b      	ldr	r3, [r7, #32]
 8000c84:	4b47      	ldr	r3, [pc, #284]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c88:	4a46      	ldr	r2, [pc, #280]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000c8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c90:	4b44      	ldr	r3, [pc, #272]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c98:	61fb      	str	r3, [r7, #28]
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	4b41      	ldr	r3, [pc, #260]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca0:	4a40      	ldr	r2, [pc, #256]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000ca2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ca6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca8:	4b3e      	ldr	r3, [pc, #248]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000cb0:	61bb      	str	r3, [r7, #24]
 8000cb2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb4:	4b3b      	ldr	r3, [pc, #236]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb8:	4a3a      	ldr	r2, [pc, #232]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000cba:	f043 0304 	orr.w	r3, r3, #4
 8000cbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc0:	4b38      	ldr	r3, [pc, #224]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc4:	f003 0304 	and.w	r3, r3, #4
 8000cc8:	617b      	str	r3, [r7, #20]
 8000cca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ccc:	4b35      	ldr	r3, [pc, #212]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd0:	4a34      	ldr	r2, [pc, #208]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd8:	4b32      	ldr	r3, [pc, #200]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce4:	4b2f      	ldr	r3, [pc, #188]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce8:	4a2e      	ldr	r2, [pc, #184]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000cea:	f043 0302 	orr.w	r3, r3, #2
 8000cee:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf0:	4b2c      	ldr	r3, [pc, #176]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf4:	f003 0302 	and.w	r3, r3, #2
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cfc:	4b29      	ldr	r3, [pc, #164]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d00:	4a28      	ldr	r2, [pc, #160]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000d02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d06:	6313      	str	r3, [r2, #48]	; 0x30
 8000d08:	4b26      	ldr	r3, [pc, #152]	; (8000da4 <HAL_ETH_MspInit+0x15c>)
 8000d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d14:	2332      	movs	r3, #50	; 0x32
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d20:	2303      	movs	r3, #3
 8000d22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d24:	230b      	movs	r3, #11
 8000d26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	481e      	ldr	r0, [pc, #120]	; (8000da8 <HAL_ETH_MspInit+0x160>)
 8000d30:	f001 fba6 	bl	8002480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d34:	2386      	movs	r3, #134	; 0x86
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d44:	230b      	movs	r3, #11
 8000d46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4817      	ldr	r0, [pc, #92]	; (8000dac <HAL_ETH_MspInit+0x164>)
 8000d50:	f001 fb96 	bl	8002480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d66:	230b      	movs	r3, #11
 8000d68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480f      	ldr	r0, [pc, #60]	; (8000db0 <HAL_ETH_MspInit+0x168>)
 8000d72:	f001 fb85 	bl	8002480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d76:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d84:	2303      	movs	r3, #3
 8000d86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d88:	230b      	movs	r3, #11
 8000d8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d90:	4619      	mov	r1, r3
 8000d92:	4808      	ldr	r0, [pc, #32]	; (8000db4 <HAL_ETH_MspInit+0x16c>)
 8000d94:	f001 fb74 	bl	8002480 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d98:	bf00      	nop
 8000d9a:	3738      	adds	r7, #56	; 0x38
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40028000 	.word	0x40028000
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40020800 	.word	0x40020800
 8000dac:	40020000 	.word	0x40020000
 8000db0:	40020400 	.word	0x40020400
 8000db4:	40021800 	.word	0x40021800

08000db8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dc8:	d113      	bne.n	8000df2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <HAL_TIM_Base_MspInit+0x44>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <HAL_TIM_Base_MspInit+0x44>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <HAL_TIM_Base_MspInit+0x44>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	201c      	movs	r0, #28
 8000de8:	f000 fea7 	bl	8001b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dec:	201c      	movs	r0, #28
 8000dee:	f000 fec0 	bl	8001b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40023800 	.word	0x40023800

08000e00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	; 0x28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a17      	ldr	r2, [pc, #92]	; (8000e7c <HAL_UART_MspInit+0x7c>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d128      	bne.n	8000e74 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e22:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <HAL_UART_MspInit+0x80>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	4a16      	ldr	r2, [pc, #88]	; (8000e80 <HAL_UART_MspInit+0x80>)
 8000e28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2e:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <HAL_UART_MspInit+0x80>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <HAL_UART_MspInit+0x80>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a10      	ldr	r2, [pc, #64]	; (8000e80 <HAL_UART_MspInit+0x80>)
 8000e40:	f043 0308 	orr.w	r3, r3, #8
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <HAL_UART_MspInit+0x80>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0308 	and.w	r3, r3, #8
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e60:	2303      	movs	r3, #3
 8000e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e64:	2307      	movs	r3, #7
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4805      	ldr	r0, [pc, #20]	; (8000e84 <HAL_UART_MspInit+0x84>)
 8000e70:	f001 fb06 	bl	8002480 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e74:	bf00      	nop
 8000e76:	3728      	adds	r7, #40	; 0x28
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40004800 	.word	0x40004800
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40020c00 	.word	0x40020c00

08000e88 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	; 0x28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ea8:	d141      	bne.n	8000f2e <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <HAL_PCD_MspInit+0xb0>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a22      	ldr	r2, [pc, #136]	; (8000f38 <HAL_PCD_MspInit+0xb0>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b20      	ldr	r3, [pc, #128]	; (8000f38 <HAL_PCD_MspInit+0xb0>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ec2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ed4:	230a      	movs	r3, #10
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4619      	mov	r1, r3
 8000ede:	4817      	ldr	r0, [pc, #92]	; (8000f3c <HAL_PCD_MspInit+0xb4>)
 8000ee0:	f001 face 	bl	8002480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ee4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4810      	ldr	r0, [pc, #64]	; (8000f3c <HAL_PCD_MspInit+0xb4>)
 8000efa:	f001 fac1 	bl	8002480 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <HAL_PCD_MspInit+0xb0>)
 8000f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f02:	4a0d      	ldr	r2, [pc, #52]	; (8000f38 <HAL_PCD_MspInit+0xb0>)
 8000f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f08:	6353      	str	r3, [r2, #52]	; 0x34
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <HAL_PCD_MspInit+0xb0>)
 8000f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <HAL_PCD_MspInit+0xb0>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	4a07      	ldr	r2, [pc, #28]	; (8000f38 <HAL_PCD_MspInit+0xb0>)
 8000f1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f20:	6453      	str	r3, [r2, #68]	; 0x44
 8000f22:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <HAL_PCD_MspInit+0xb0>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f2e:	bf00      	nop
 8000f30:	3728      	adds	r7, #40	; 0x28
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40020000 	.word	0x40020000

08000f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f52:	e7fe      	b.n	8000f52 <HardFault_Handler+0x4>

08000f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <MemManage_Handler+0x4>

08000f5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5e:	e7fe      	b.n	8000f5e <BusFault_Handler+0x4>

08000f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <UsageFault_Handler+0x4>

08000f66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f94:	f000 f8ba 	bl	800110c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fa0:	4802      	ldr	r0, [pc, #8]	; (8000fac <TIM2_IRQHandler+0x10>)
 8000fa2:	f002 fefd 	bl	8003da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	2000057c 	.word	0x2000057c

08000fb0 <_sbrk>:
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	4a14      	ldr	r2, [pc, #80]	; (800100c <_sbrk+0x5c>)
 8000fba:	4b15      	ldr	r3, [pc, #84]	; (8001010 <_sbrk+0x60>)
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	4b13      	ldr	r3, [pc, #76]	; (8001014 <_sbrk+0x64>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d102      	bne.n	8000fd2 <_sbrk+0x22>
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <_sbrk+0x64>)
 8000fce:	4a12      	ldr	r2, [pc, #72]	; (8001018 <_sbrk+0x68>)
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <_sbrk+0x64>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d207      	bcs.n	8000ff0 <_sbrk+0x40>
 8000fe0:	f004 fa94 	bl	800550c <__errno>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	230c      	movs	r3, #12
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	f04f 33ff 	mov.w	r3, #4294967295
 8000fee:	e009      	b.n	8001004 <_sbrk+0x54>
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <_sbrk+0x64>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	4b07      	ldr	r3, [pc, #28]	; (8001014 <_sbrk+0x64>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	4a05      	ldr	r2, [pc, #20]	; (8001014 <_sbrk+0x64>)
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	4618      	mov	r0, r3
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20050000 	.word	0x20050000
 8001010:	00000400 	.word	0x00000400
 8001014:	2000008c 	.word	0x2000008c
 8001018:	20000618 	.word	0x20000618

0800101c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <SystemInit+0x20>)
 8001022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001026:	4a05      	ldr	r2, [pc, #20]	; (800103c <SystemInit+0x20>)
 8001028:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800102c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <Reset_Handler>:
 8001040:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001078 <LoopFillZerobss+0x12>
 8001044:	480d      	ldr	r0, [pc, #52]	; (800107c <LoopFillZerobss+0x16>)
 8001046:	490e      	ldr	r1, [pc, #56]	; (8001080 <LoopFillZerobss+0x1a>)
 8001048:	4a0e      	ldr	r2, [pc, #56]	; (8001084 <LoopFillZerobss+0x1e>)
 800104a:	2300      	movs	r3, #0
 800104c:	e002      	b.n	8001054 <LoopCopyDataInit>

0800104e <CopyDataInit>:
 800104e:	58d4      	ldr	r4, [r2, r3]
 8001050:	50c4      	str	r4, [r0, r3]
 8001052:	3304      	adds	r3, #4

08001054 <LoopCopyDataInit>:
 8001054:	18c4      	adds	r4, r0, r3
 8001056:	428c      	cmp	r4, r1
 8001058:	d3f9      	bcc.n	800104e <CopyDataInit>
 800105a:	4a0b      	ldr	r2, [pc, #44]	; (8001088 <LoopFillZerobss+0x22>)
 800105c:	4c0b      	ldr	r4, [pc, #44]	; (800108c <LoopFillZerobss+0x26>)
 800105e:	2300      	movs	r3, #0
 8001060:	e001      	b.n	8001066 <LoopFillZerobss>

08001062 <FillZerobss>:
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	3204      	adds	r2, #4

08001066 <LoopFillZerobss>:
 8001066:	42a2      	cmp	r2, r4
 8001068:	d3fb      	bcc.n	8001062 <FillZerobss>
 800106a:	f7ff ffd7 	bl	800101c <SystemInit>
 800106e:	f004 fa53 	bl	8005518 <__libc_init_array>
 8001072:	f7ff faa5 	bl	80005c0 <main>
 8001076:	4770      	bx	lr
 8001078:	20050000 	.word	0x20050000
 800107c:	20000000 	.word	0x20000000
 8001080:	20000070 	.word	0x20000070
 8001084:	08005df8 	.word	0x08005df8
 8001088:	20000070 	.word	0x20000070
 800108c:	20000618 	.word	0x20000618

08001090 <ADC_IRQHandler>:
 8001090:	e7fe      	b.n	8001090 <ADC_IRQHandler>

08001092 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001096:	2003      	movs	r0, #3
 8001098:	f000 fd44 	bl	8001b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800109c:	2000      	movs	r0, #0
 800109e:	f000 f805 	bl	80010ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a2:	f7ff fd6d 	bl	8000b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	bd80      	pop	{r7, pc}

080010ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HAL_InitTick+0x54>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HAL_InitTick+0x58>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4619      	mov	r1, r3
 80010be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 fd5f 	bl	8001b8e <HAL_SYSTICK_Config>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00e      	b.n	80010f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b0f      	cmp	r3, #15
 80010de:	d80a      	bhi.n	80010f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e0:	2200      	movs	r2, #0
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f000 fd27 	bl	8001b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010ec:	4a06      	ldr	r2, [pc, #24]	; (8001108 <HAL_InitTick+0x5c>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	e000      	b.n	80010f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000000 	.word	0x20000000
 8001104:	20000008 	.word	0x20000008
 8001108:	20000004 	.word	0x20000004

0800110c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_IncTick+0x20>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_IncTick+0x24>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4413      	add	r3, r2
 800111c:	4a04      	ldr	r2, [pc, #16]	; (8001130 <HAL_IncTick+0x24>)
 800111e:	6013      	str	r3, [r2, #0]
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000008 	.word	0x20000008
 8001130:	20000610 	.word	0x20000610

08001134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return uwTick;
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <HAL_GetTick+0x14>)
 800113a:	681b      	ldr	r3, [r3, #0]
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	20000610 	.word	0x20000610

0800114c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001154:	f7ff ffee 	bl	8001134 <HAL_GetTick>
 8001158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001164:	d005      	beq.n	8001172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <HAL_Delay+0x40>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4413      	add	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001172:	bf00      	nop
 8001174:	f7ff ffde 	bl	8001134 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	429a      	cmp	r2, r3
 8001182:	d8f7      	bhi.n	8001174 <HAL_Delay+0x28>
  {
  }
}
 8001184:	bf00      	nop
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000008 	.word	0x20000008

08001190 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001198:	2300      	movs	r3, #0
 800119a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e031      	b.n	800120a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d109      	bne.n	80011c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff fd0a 	bl	8000bc8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	f003 0310 	and.w	r3, r3, #16
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d116      	bne.n	80011fc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <HAL_ADC_Init+0x84>)
 80011d4:	4013      	ands	r3, r2
 80011d6:	f043 0202 	orr.w	r2, r3, #2
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f000 fad6 	bl	8001790 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f023 0303 	bic.w	r3, r3, #3
 80011f2:	f043 0201 	orr.w	r2, r3, #1
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	641a      	str	r2, [r3, #64]	; 0x40
 80011fa:	e001      	b.n	8001200 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001208:	7bfb      	ldrb	r3, [r7, #15]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	ffffeefd 	.word	0xffffeefd

08001218 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800122a:	2b01      	cmp	r3, #1
 800122c:	d101      	bne.n	8001232 <HAL_ADC_Start+0x1a>
 800122e:	2302      	movs	r3, #2
 8001230:	e0ad      	b.n	800138e <HAL_ADC_Start+0x176>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2201      	movs	r2, #1
 8001236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	2b01      	cmp	r3, #1
 8001246:	d018      	beq.n	800127a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 0201 	orr.w	r2, r2, #1
 8001256:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001258:	4b50      	ldr	r3, [pc, #320]	; (800139c <HAL_ADC_Start+0x184>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a50      	ldr	r2, [pc, #320]	; (80013a0 <HAL_ADC_Start+0x188>)
 800125e:	fba2 2303 	umull	r2, r3, r2, r3
 8001262:	0c9a      	lsrs	r2, r3, #18
 8001264:	4613      	mov	r3, r2
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	4413      	add	r3, r2
 800126a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800126c:	e002      	b.n	8001274 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	3b01      	subs	r3, #1
 8001272:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1f9      	bne.n	800126e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	2b01      	cmp	r3, #1
 8001286:	d175      	bne.n	8001374 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800128c:	4b45      	ldr	r3, [pc, #276]	; (80013a4 <HAL_ADC_Start+0x18c>)
 800128e:	4013      	ands	r3, r2
 8001290:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d007      	beq.n	80012b6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012c2:	d106      	bne.n	80012d2 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c8:	f023 0206 	bic.w	r2, r3, #6
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	645a      	str	r2, [r3, #68]	; 0x44
 80012d0:	e002      	b.n	80012d8 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80012e8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80012ea:	4b2f      	ldr	r3, [pc, #188]	; (80013a8 <HAL_ADC_Start+0x190>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f003 031f 	and.w	r3, r3, #31
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d10f      	bne.n	8001316 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d143      	bne.n	800138c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	e03a      	b.n	800138c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a24      	ldr	r2, [pc, #144]	; (80013ac <HAL_ADC_Start+0x194>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d10e      	bne.n	800133e <HAL_ADC_Start+0x126>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d107      	bne.n	800133e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800133c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800133e:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <HAL_ADC_Start+0x190>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f003 0310 	and.w	r3, r3, #16
 8001346:	2b00      	cmp	r3, #0
 8001348:	d120      	bne.n	800138c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a18      	ldr	r2, [pc, #96]	; (80013b0 <HAL_ADC_Start+0x198>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d11b      	bne.n	800138c <HAL_ADC_Start+0x174>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d114      	bne.n	800138c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	689a      	ldr	r2, [r3, #8]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	e00b      	b.n	800138c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	f043 0210 	orr.w	r2, r3, #16
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001384:	f043 0201 	orr.w	r2, r3, #1
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000000 	.word	0x20000000
 80013a0:	431bde83 	.word	0x431bde83
 80013a4:	fffff8fe 	.word	0xfffff8fe
 80013a8:	40012300 	.word	0x40012300
 80013ac:	40012000 	.word	0x40012000
 80013b0:	40012200 	.word	0x40012200

080013b4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013d0:	d113      	bne.n	80013fa <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80013dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013e0:	d10b      	bne.n	80013fa <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	f043 0220 	orr.w	r2, r3, #32
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e063      	b.n	80014c2 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80013fa:	f7ff fe9b 	bl	8001134 <HAL_GetTick>
 80013fe:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001400:	e021      	b.n	8001446 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001408:	d01d      	beq.n	8001446 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d007      	beq.n	8001420 <HAL_ADC_PollForConversion+0x6c>
 8001410:	f7ff fe90 	bl	8001134 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	429a      	cmp	r2, r3
 800141e:	d212      	bcs.n	8001446 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b02      	cmp	r3, #2
 800142c:	d00b      	beq.n	8001446 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f043 0204 	orr.w	r2, r3, #4
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e03d      	b.n	80014c2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b02      	cmp	r3, #2
 8001452:	d1d6      	bne.n	8001402 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f06f 0212 	mvn.w	r2, #18
 800145c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d123      	bne.n	80014c0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800147c:	2b00      	cmp	r3, #0
 800147e:	d11f      	bne.n	80014c0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001486:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800148a:	2b00      	cmp	r3, #0
 800148c:	d006      	beq.n	800149c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001498:	2b00      	cmp	r3, #0
 800149a:	d111      	bne.n	80014c0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d105      	bne.n	80014c0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	f043 0201 	orr.w	r2, r3, #1
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80014ca:	b480      	push	{r7}
 80014cc:	b083      	sub	sp, #12
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d101      	bne.n	8001500 <HAL_ADC_ConfigChannel+0x1c>
 80014fc:	2302      	movs	r3, #2
 80014fe:	e136      	b.n	800176e <HAL_ADC_ConfigChannel+0x28a>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b09      	cmp	r3, #9
 800150e:	d93a      	bls.n	8001586 <HAL_ADC_ConfigChannel+0xa2>
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001518:	d035      	beq.n	8001586 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	68d9      	ldr	r1, [r3, #12]
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	b29b      	uxth	r3, r3
 8001526:	461a      	mov	r2, r3
 8001528:	4613      	mov	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	4413      	add	r3, r2
 800152e:	3b1e      	subs	r3, #30
 8001530:	2207      	movs	r2, #7
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43da      	mvns	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	400a      	ands	r2, r1
 800153e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a8d      	ldr	r2, [pc, #564]	; (800177c <HAL_ADC_ConfigChannel+0x298>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d10a      	bne.n	8001560 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68d9      	ldr	r1, [r3, #12]
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	061a      	lsls	r2, r3, #24
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800155e:	e035      	b.n	80015cc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	68d9      	ldr	r1, [r3, #12]
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	b29b      	uxth	r3, r3
 8001570:	4618      	mov	r0, r3
 8001572:	4603      	mov	r3, r0
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4403      	add	r3, r0
 8001578:	3b1e      	subs	r3, #30
 800157a:	409a      	lsls	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	430a      	orrs	r2, r1
 8001582:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001584:	e022      	b.n	80015cc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6919      	ldr	r1, [r3, #16]
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	b29b      	uxth	r3, r3
 8001592:	461a      	mov	r2, r3
 8001594:	4613      	mov	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	4413      	add	r3, r2
 800159a:	2207      	movs	r2, #7
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43da      	mvns	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	400a      	ands	r2, r1
 80015a8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6919      	ldr	r1, [r3, #16]
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	4603      	mov	r3, r0
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	4403      	add	r3, r0
 80015c2:	409a      	lsls	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b06      	cmp	r3, #6
 80015d2:	d824      	bhi.n	800161e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685a      	ldr	r2, [r3, #4]
 80015de:	4613      	mov	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	3b05      	subs	r3, #5
 80015e6:	221f      	movs	r2, #31
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43da      	mvns	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	400a      	ands	r2, r1
 80015f4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	b29b      	uxth	r3, r3
 8001602:	4618      	mov	r0, r3
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	3b05      	subs	r3, #5
 8001610:	fa00 f203 	lsl.w	r2, r0, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	430a      	orrs	r2, r1
 800161a:	635a      	str	r2, [r3, #52]	; 0x34
 800161c:	e04c      	b.n	80016b8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b0c      	cmp	r3, #12
 8001624:	d824      	bhi.n	8001670 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	4613      	mov	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	3b23      	subs	r3, #35	; 0x23
 8001638:	221f      	movs	r2, #31
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43da      	mvns	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	400a      	ands	r2, r1
 8001646:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	b29b      	uxth	r3, r3
 8001654:	4618      	mov	r0, r3
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	3b23      	subs	r3, #35	; 0x23
 8001662:	fa00 f203 	lsl.w	r2, r0, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	430a      	orrs	r2, r1
 800166c:	631a      	str	r2, [r3, #48]	; 0x30
 800166e:	e023      	b.n	80016b8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	3b41      	subs	r3, #65	; 0x41
 8001682:	221f      	movs	r2, #31
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43da      	mvns	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	400a      	ands	r2, r1
 8001690:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	b29b      	uxth	r3, r3
 800169e:	4618      	mov	r0, r3
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685a      	ldr	r2, [r3, #4]
 80016a4:	4613      	mov	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	3b41      	subs	r3, #65	; 0x41
 80016ac:	fa00 f203 	lsl.w	r2, r0, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a30      	ldr	r2, [pc, #192]	; (8001780 <HAL_ADC_ConfigChannel+0x29c>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d10a      	bne.n	80016d8 <HAL_ADC_ConfigChannel+0x1f4>
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016ca:	d105      	bne.n	80016d8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80016cc:	4b2d      	ldr	r3, [pc, #180]	; (8001784 <HAL_ADC_ConfigChannel+0x2a0>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	4a2c      	ldr	r2, [pc, #176]	; (8001784 <HAL_ADC_ConfigChannel+0x2a0>)
 80016d2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80016d6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a28      	ldr	r2, [pc, #160]	; (8001780 <HAL_ADC_ConfigChannel+0x29c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d10f      	bne.n	8001702 <HAL_ADC_ConfigChannel+0x21e>
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b12      	cmp	r3, #18
 80016e8:	d10b      	bne.n	8001702 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80016ea:	4b26      	ldr	r3, [pc, #152]	; (8001784 <HAL_ADC_ConfigChannel+0x2a0>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	4a25      	ldr	r2, [pc, #148]	; (8001784 <HAL_ADC_ConfigChannel+0x2a0>)
 80016f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80016f4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80016f6:	4b23      	ldr	r3, [pc, #140]	; (8001784 <HAL_ADC_ConfigChannel+0x2a0>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	4a22      	ldr	r2, [pc, #136]	; (8001784 <HAL_ADC_ConfigChannel+0x2a0>)
 80016fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001700:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a1e      	ldr	r2, [pc, #120]	; (8001780 <HAL_ADC_ConfigChannel+0x29c>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d12b      	bne.n	8001764 <HAL_ADC_ConfigChannel+0x280>
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a1a      	ldr	r2, [pc, #104]	; (800177c <HAL_ADC_ConfigChannel+0x298>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d003      	beq.n	800171e <HAL_ADC_ConfigChannel+0x23a>
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2b11      	cmp	r3, #17
 800171c:	d122      	bne.n	8001764 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800171e:	4b19      	ldr	r3, [pc, #100]	; (8001784 <HAL_ADC_ConfigChannel+0x2a0>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	4a18      	ldr	r2, [pc, #96]	; (8001784 <HAL_ADC_ConfigChannel+0x2a0>)
 8001724:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001728:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800172a:	4b16      	ldr	r3, [pc, #88]	; (8001784 <HAL_ADC_ConfigChannel+0x2a0>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	4a15      	ldr	r2, [pc, #84]	; (8001784 <HAL_ADC_ConfigChannel+0x2a0>)
 8001730:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001734:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a10      	ldr	r2, [pc, #64]	; (800177c <HAL_ADC_ConfigChannel+0x298>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d111      	bne.n	8001764 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001740:	4b11      	ldr	r3, [pc, #68]	; (8001788 <HAL_ADC_ConfigChannel+0x2a4>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a11      	ldr	r2, [pc, #68]	; (800178c <HAL_ADC_ConfigChannel+0x2a8>)
 8001746:	fba2 2303 	umull	r2, r3, r2, r3
 800174a:	0c9a      	lsrs	r2, r3, #18
 800174c:	4613      	mov	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001756:	e002      	b.n	800175e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	3b01      	subs	r3, #1
 800175c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1f9      	bne.n	8001758 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	10000012 	.word	0x10000012
 8001780:	40012000 	.word	0x40012000
 8001784:	40012300 	.word	0x40012300
 8001788:	20000000 	.word	0x20000000
 800178c:	431bde83 	.word	0x431bde83

08001790 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001798:	4b78      	ldr	r3, [pc, #480]	; (800197c <ADC_Init+0x1ec>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	4a77      	ldr	r2, [pc, #476]	; (800197c <ADC_Init+0x1ec>)
 800179e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80017a2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80017a4:	4b75      	ldr	r3, [pc, #468]	; (800197c <ADC_Init+0x1ec>)
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	4973      	ldr	r1, [pc, #460]	; (800197c <ADC_Init+0x1ec>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6859      	ldr	r1, [r3, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	691b      	ldr	r3, [r3, #16]
 80017cc:	021a      	lsls	r2, r3, #8
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80017e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6859      	ldr	r1, [r3, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001806:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6899      	ldr	r1, [r3, #8]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68da      	ldr	r2, [r3, #12]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	430a      	orrs	r2, r1
 8001818:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181e:	4a58      	ldr	r2, [pc, #352]	; (8001980 <ADC_Init+0x1f0>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d022      	beq.n	800186a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001832:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6899      	ldr	r1, [r3, #8]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	430a      	orrs	r2, r1
 8001844:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001854:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6899      	ldr	r1, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	430a      	orrs	r2, r1
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	e00f      	b.n	800188a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001878:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001888:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 0202 	bic.w	r2, r2, #2
 8001898:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6899      	ldr	r1, [r3, #8]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	005a      	lsls	r2, r3, #1
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	430a      	orrs	r2, r1
 80018ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d01b      	beq.n	80018f0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80018d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6859      	ldr	r1, [r3, #4]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e2:	3b01      	subs	r3, #1
 80018e4:	035a      	lsls	r2, r3, #13
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	e007      	b.n	8001900 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	685a      	ldr	r2, [r3, #4]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800190e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	3b01      	subs	r3, #1
 800191c:	051a      	lsls	r2, r3, #20
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	430a      	orrs	r2, r1
 8001924:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001934:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6899      	ldr	r1, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001942:	025a      	lsls	r2, r3, #9
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	430a      	orrs	r2, r1
 800194a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800195a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6899      	ldr	r1, [r3, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	029a      	lsls	r2, r3, #10
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	430a      	orrs	r2, r1
 800196e:	609a      	str	r2, [r3, #8]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	40012300 	.word	0x40012300
 8001980:	0f000001 	.word	0x0f000001

08001984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <__NVIC_SetPriorityGrouping+0x40>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a0:	4013      	ands	r3, r2
 80019a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <__NVIC_SetPriorityGrouping+0x44>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019b2:	4a04      	ldr	r2, [pc, #16]	; (80019c4 <__NVIC_SetPriorityGrouping+0x40>)
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	60d3      	str	r3, [r2, #12]
}
 80019b8:	bf00      	nop
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000ed00 	.word	0xe000ed00
 80019c8:	05fa0000 	.word	0x05fa0000

080019cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d0:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <__NVIC_GetPriorityGrouping+0x18>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	0a1b      	lsrs	r3, r3, #8
 80019d6:	f003 0307 	and.w	r3, r3, #7
}
 80019da:	4618      	mov	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	db0b      	blt.n	8001a12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	f003 021f 	and.w	r2, r3, #31
 8001a00:	4907      	ldr	r1, [pc, #28]	; (8001a20 <__NVIC_EnableIRQ+0x38>)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	2001      	movs	r0, #1
 8001a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	e000e100 	.word	0xe000e100

08001a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	6039      	str	r1, [r7, #0]
 8001a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	db0a      	blt.n	8001a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	490c      	ldr	r1, [pc, #48]	; (8001a70 <__NVIC_SetPriority+0x4c>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	0112      	lsls	r2, r2, #4
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	440b      	add	r3, r1
 8001a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a4c:	e00a      	b.n	8001a64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4908      	ldr	r1, [pc, #32]	; (8001a74 <__NVIC_SetPriority+0x50>)
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	3b04      	subs	r3, #4
 8001a5c:	0112      	lsls	r2, r2, #4
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	440b      	add	r3, r1
 8001a62:	761a      	strb	r2, [r3, #24]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000e100 	.word	0xe000e100
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b089      	sub	sp, #36	; 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f1c3 0307 	rsb	r3, r3, #7
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	bf28      	it	cs
 8001a96:	2304      	movcs	r3, #4
 8001a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	2b06      	cmp	r3, #6
 8001aa0:	d902      	bls.n	8001aa8 <NVIC_EncodePriority+0x30>
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3b03      	subs	r3, #3
 8001aa6:	e000      	b.n	8001aaa <NVIC_EncodePriority+0x32>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aac:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	401a      	ands	r2, r3
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aca:	43d9      	mvns	r1, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad0:	4313      	orrs	r3, r2
         );
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3724      	adds	r7, #36	; 0x24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af0:	d301      	bcc.n	8001af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af2:	2301      	movs	r3, #1
 8001af4:	e00f      	b.n	8001b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af6:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <SysTick_Config+0x40>)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001afe:	210f      	movs	r1, #15
 8001b00:	f04f 30ff 	mov.w	r0, #4294967295
 8001b04:	f7ff ff8e 	bl	8001a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <SysTick_Config+0x40>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b0e:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <SysTick_Config+0x40>)
 8001b10:	2207      	movs	r2, #7
 8001b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	e000e010 	.word	0xe000e010

08001b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff ff29 	bl	8001984 <__NVIC_SetPriorityGrouping>
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b086      	sub	sp, #24
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	4603      	mov	r3, r0
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
 8001b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b4c:	f7ff ff3e 	bl	80019cc <__NVIC_GetPriorityGrouping>
 8001b50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	68b9      	ldr	r1, [r7, #8]
 8001b56:	6978      	ldr	r0, [r7, #20]
 8001b58:	f7ff ff8e 	bl	8001a78 <NVIC_EncodePriority>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b62:	4611      	mov	r1, r2
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ff5d 	bl	8001a24 <__NVIC_SetPriority>
}
 8001b6a:	bf00      	nop
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff31 	bl	80019e8 <__NVIC_EnableIRQ>
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff ffa2 	bl	8001ae0 <SysTick_Config>
 8001b9c:	4603      	mov	r3, r0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b088      	sub	sp, #32
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61fb      	str	r3, [r7, #28]
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001bb8:	4ba9      	ldr	r3, [pc, #676]	; (8001e60 <HAL_ETH_Init+0x2b8>)
 8001bba:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e183      	b.n	8001ed6 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d106      	bne.n	8001be8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff f830 	bl	8000c48 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be8:	4b9e      	ldr	r3, [pc, #632]	; (8001e64 <HAL_ETH_Init+0x2bc>)
 8001bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bec:	4a9d      	ldr	r2, [pc, #628]	; (8001e64 <HAL_ETH_Init+0x2bc>)
 8001bee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf2:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf4:	4b9b      	ldr	r3, [pc, #620]	; (8001e64 <HAL_ETH_Init+0x2bc>)
 8001bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001c00:	4b99      	ldr	r3, [pc, #612]	; (8001e68 <HAL_ETH_Init+0x2c0>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	4a98      	ldr	r2, [pc, #608]	; (8001e68 <HAL_ETH_Init+0x2c0>)
 8001c06:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c0a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001c0c:	4b96      	ldr	r3, [pc, #600]	; (8001e68 <HAL_ETH_Init+0x2c0>)
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	4994      	ldr	r1, [pc, #592]	; (8001e68 <HAL_ETH_Init+0x2c0>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f042 0201 	orr.w	r2, r2, #1
 8001c2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c30:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c32:	f7ff fa7f 	bl	8001134 <HAL_GetTick>
 8001c36:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001c38:	e011      	b.n	8001c5e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001c3a:	f7ff fa7b 	bl	8001134 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c48:	d909      	bls.n	8001c5e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e13b      	b.n	8001ed6 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1e4      	bne.n	8001c3a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f023 031c 	bic.w	r3, r3, #28
 8001c7e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001c80:	f001 fb9a 	bl	80033b8 <HAL_RCC_GetHCLKFreq>
 8001c84:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	4a78      	ldr	r2, [pc, #480]	; (8001e6c <HAL_ETH_Init+0x2c4>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d908      	bls.n	8001ca0 <HAL_ETH_Init+0xf8>
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	4a77      	ldr	r2, [pc, #476]	; (8001e70 <HAL_ETH_Init+0x2c8>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d804      	bhi.n	8001ca0 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	f043 0308 	orr.w	r3, r3, #8
 8001c9c:	61fb      	str	r3, [r7, #28]
 8001c9e:	e027      	b.n	8001cf0 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	4a73      	ldr	r2, [pc, #460]	; (8001e70 <HAL_ETH_Init+0x2c8>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d908      	bls.n	8001cba <HAL_ETH_Init+0x112>
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	4a72      	ldr	r2, [pc, #456]	; (8001e74 <HAL_ETH_Init+0x2cc>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d804      	bhi.n	8001cba <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f043 030c 	orr.w	r3, r3, #12
 8001cb6:	61fb      	str	r3, [r7, #28]
 8001cb8:	e01a      	b.n	8001cf0 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	4a6d      	ldr	r2, [pc, #436]	; (8001e74 <HAL_ETH_Init+0x2cc>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d903      	bls.n	8001cca <HAL_ETH_Init+0x122>
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	4a6c      	ldr	r2, [pc, #432]	; (8001e78 <HAL_ETH_Init+0x2d0>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d911      	bls.n	8001cee <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	4a6a      	ldr	r2, [pc, #424]	; (8001e78 <HAL_ETH_Init+0x2d0>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d908      	bls.n	8001ce4 <HAL_ETH_Init+0x13c>
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	4a69      	ldr	r2, [pc, #420]	; (8001e7c <HAL_ETH_Init+0x2d4>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d804      	bhi.n	8001ce4 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	f043 0304 	orr.w	r3, r3, #4
 8001ce0:	61fb      	str	r3, [r7, #28]
 8001ce2:	e005      	b.n	8001cf0 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f043 0310 	orr.w	r3, r3, #16
 8001cea:	61fb      	str	r3, [r7, #28]
 8001cec:	e000      	b.n	8001cf0 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001cee:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	69fa      	ldr	r2, [r7, #28]
 8001cf6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001cf8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f956 	bl	8001fb0 <HAL_ETH_WritePHYRegister>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00b      	beq.n	8001d22 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001d0e:	6939      	ldr	r1, [r7, #16]
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f9b3 	bl	800207c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e0d9      	b.n	8001ed6 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001d22:	20ff      	movs	r0, #255	; 0xff
 8001d24:	f7ff fa12 	bl	800114c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 80a7 	beq.w	8001e80 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d32:	f7ff f9ff 	bl	8001134 <HAL_GetTick>
 8001d36:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001d38:	f107 030c 	add.w	r3, r7, #12
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	2101      	movs	r1, #1
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 f8cd 	bl	8001ee0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001d46:	f7ff f9f5 	bl	8001134 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d90f      	bls.n	8001d78 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001d5c:	6939      	ldr	r1, [r7, #16]
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f98c 	bl	800207c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e0ae      	b.n	8001ed6 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0da      	beq.n	8001d38 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001d82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d86:	2100      	movs	r1, #0
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f911 	bl	8001fb0 <HAL_ETH_WritePHYRegister>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00b      	beq.n	8001dac <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001d98:	6939      	ldr	r1, [r7, #16]
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f96e 	bl	800207c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001da8:	2301      	movs	r3, #1
 8001daa:	e094      	b.n	8001ed6 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001dac:	f7ff f9c2 	bl	8001134 <HAL_GetTick>
 8001db0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001db2:	f107 030c 	add.w	r3, r7, #12
 8001db6:	461a      	mov	r2, r3
 8001db8:	2101      	movs	r1, #1
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f890 	bl	8001ee0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001dc0:	f7ff f9b8 	bl	8001134 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d90f      	bls.n	8001df2 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001dd6:	6939      	ldr	r1, [r7, #16]
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f94f 	bl	800207c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e071      	b.n	8001ed6 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f003 0320 	and.w	r3, r3, #32
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0da      	beq.n	8001db2 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001dfc:	f107 030c 	add.w	r3, r7, #12
 8001e00:	461a      	mov	r2, r3
 8001e02:	211f      	movs	r1, #31
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f86b 	bl	8001ee0 <HAL_ETH_ReadPHYRegister>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00b      	beq.n	8001e28 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001e14:	6939      	ldr	r1, [r7, #16]
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f930 	bl	800207c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001e24:	2301      	movs	r3, #1
 8001e26:	e056      	b.n	8001ed6 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f003 0310 	and.w	r3, r3, #16
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d004      	beq.n	8001e3c <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	e002      	b.n	8001e42 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]
 8001e52:	e037      	b.n	8001ec4 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	e032      	b.n	8001ec4 <HAL_ETH_Init+0x31c>
 8001e5e:	bf00      	nop
 8001e60:	03938700 	.word	0x03938700
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40013800 	.word	0x40013800
 8001e6c:	01312cff 	.word	0x01312cff
 8001e70:	02160ebf 	.word	0x02160ebf
 8001e74:	039386ff 	.word	0x039386ff
 8001e78:	05f5e0ff 	.word	0x05f5e0ff
 8001e7c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	08db      	lsrs	r3, r3, #3
 8001e86:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	085b      	lsrs	r3, r3, #1
 8001e8e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001e90:	4313      	orrs	r3, r2
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	461a      	mov	r2, r3
 8001e96:	2100      	movs	r1, #0
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f889 	bl	8001fb0 <HAL_ETH_WritePHYRegister>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00b      	beq.n	8001ebc <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001ea8:	6939      	ldr	r1, [r7, #16]
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f8e6 	bl	800207c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e00c      	b.n	8001ed6 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001ebc:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001ec0:	f7ff f944 	bl	800114c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001ec4:	6939      	ldr	r1, [r7, #16]
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f8d8 	bl	800207c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3720      	adds	r7, #32
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop

08001ee0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	607a      	str	r2, [r7, #4]
 8001eec:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b82      	cmp	r3, #130	; 0x82
 8001f00:	d101      	bne.n	8001f06 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001f02:	2302      	movs	r3, #2
 8001f04:	e050      	b.n	8001fa8 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2282      	movs	r2, #130	; 0x82
 8001f0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f003 031c 	and.w	r3, r3, #28
 8001f1c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8a1b      	ldrh	r3, [r3, #16]
 8001f22:	02db      	lsls	r3, r3, #11
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001f2c:	897b      	ldrh	r3, [r7, #10]
 8001f2e:	019b      	lsls	r3, r3, #6
 8001f30:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f023 0302 	bic.w	r3, r3, #2
 8001f40:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001f52:	f7ff f8ef 	bl	8001134 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f58:	e015      	b.n	8001f86 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001f5a:	f7ff f8eb 	bl	8001134 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f68:	d309      	bcc.n	8001f7e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e014      	b.n	8001fa8 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1e4      	bne.n	8001f5a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	461a      	mov	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	607a      	str	r2, [r7, #4]
 8001fbc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b42      	cmp	r3, #66	; 0x42
 8001fd0:	d101      	bne.n	8001fd6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	e04e      	b.n	8002074 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2242      	movs	r2, #66	; 0x42
 8001fda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f003 031c 	and.w	r3, r3, #28
 8001fec:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	8a1b      	ldrh	r3, [r3, #16]
 8001ff2:	02db      	lsls	r3, r3, #11
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001ffc:	897b      	ldrh	r3, [r7, #10]
 8001ffe:	019b      	lsls	r3, r3, #6
 8002000:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	4313      	orrs	r3, r2
 8002008:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f043 0302 	orr.w	r3, r3, #2
 8002010:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f043 0301 	orr.w	r3, r3, #1
 8002018:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	b29a      	uxth	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800202c:	f7ff f882 	bl	8001134 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002032:	e015      	b.n	8002060 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002034:	f7ff f87e 	bl	8001134 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002042:	d309      	bcc.n	8002058 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e00d      	b.n	8002074 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1e4      	bne.n	8002034 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b0b0      	sub	sp, #192	; 0xc0
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d007      	beq.n	80020a2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002098:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80020a2:	2300      	movs	r3, #0
 80020a4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80020aa:	2300      	movs	r3, #0
 80020ac:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80020ae:	2300      	movs	r3, #0
 80020b0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80020b2:	2300      	movs	r3, #0
 80020b4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80020b6:	2300      	movs	r3, #0
 80020b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d103      	bne.n	80020ca <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80020c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020c6:	663b      	str	r3, [r7, #96]	; 0x60
 80020c8:	e001      	b.n	80020ce <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80020ca:	2300      	movs	r3, #0
 80020cc:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80020ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020d2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80020d8:	2300      	movs	r3, #0
 80020da:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80020dc:	2300      	movs	r3, #0
 80020de:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80020e0:	2300      	movs	r3, #0
 80020e2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80020e4:	2300      	movs	r3, #0
 80020e6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80020e8:	2340      	movs	r3, #64	; 0x40
 80020ea:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80020ec:	2300      	movs	r3, #0
 80020ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80020fe:	2300      	movs	r3, #0
 8002100:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002104:	2300      	movs	r3, #0
 8002106:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800210a:	2300      	movs	r3, #0
 800210c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002110:	2300      	movs	r3, #0
 8002112:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8002116:	2300      	movs	r3, #0
 8002118:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800211c:	2380      	movs	r3, #128	; 0x80
 800211e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002122:	2300      	movs	r3, #0
 8002124:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002128:	2300      	movs	r3, #0
 800212a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800212e:	2300      	movs	r3, #0
 8002130:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002134:	2300      	movs	r3, #0
 8002136:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800213a:	2300      	movs	r3, #0
 800213c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002140:	2300      	movs	r3, #0
 8002142:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002150:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002154:	4bab      	ldr	r3, [pc, #684]	; (8002404 <ETH_MACDMAConfig+0x388>)
 8002156:	4013      	ands	r3, r2
 8002158:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800215c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800215e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002160:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002164:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002168:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800216e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002170:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002172:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002174:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002176:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800217c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800217e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002180:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002182:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002184:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002186:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002188:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800218a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800218c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800218e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002190:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002192:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002196:	4313      	orrs	r3, r2
 8002198:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021a4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021b0:	2001      	movs	r0, #1
 80021b2:	f7fe ffcb 	bl	800114c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021be:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021c0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80021c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021c4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80021c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80021c8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80021ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80021ce:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80021d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80021d4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80021d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80021da:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80021dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80021e0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80021e4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80021ec:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021ee:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80021fa:	2001      	movs	r0, #1
 80021fc:	f7fe ffa6 	bl	800114c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002208:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002212:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800221c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002228:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800222c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002230:	4013      	ands	r3, r2
 8002232:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002236:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800223a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800223c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002240:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002242:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002246:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002248:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800224c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800224e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002252:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002254:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002258:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800225a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800226c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002278:	2001      	movs	r0, #1
 800227a:	f7fe ff67 	bl	800114c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002286:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002288:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800228c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022a2:	2001      	movs	r0, #1
 80022a4:	f7fe ff52 	bl	800114c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022b0:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80022b2:	2300      	movs	r3, #0
 80022b4:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80022b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ba:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80022bc:	2300      	movs	r3, #0
 80022be:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80022c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022c4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80022ce:	2300      	movs	r3, #0
 80022d0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80022d2:	2300      	movs	r3, #0
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80022d6:	2304      	movs	r3, #4
 80022d8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80022da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022de:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80022e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022e4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80022e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022ea:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80022ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022f0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80022f2:	2380      	movs	r3, #128	; 0x80
 80022f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80022fa:	2300      	movs	r3, #0
 80022fc:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	f241 0318 	movw	r3, #4120	; 0x1018
 8002306:	4413      	add	r3, r2
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800230e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002312:	4b3d      	ldr	r3, [pc, #244]	; (8002408 <ETH_MACDMAConfig+0x38c>)
 8002314:	4013      	ands	r3, r2
 8002316:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800231a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800231c:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800231e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002320:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002322:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002324:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002326:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002328:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800232a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800232c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800232e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002330:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002332:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002336:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002338:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800233a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800233c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002340:	4313      	orrs	r3, r2
 8002342:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	f241 0318 	movw	r3, #4120	; 0x1018
 800234e:	4413      	add	r3, r2
 8002350:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002354:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	f241 0318 	movw	r3, #4120	; 0x1018
 800235e:	4413      	add	r3, r2
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002366:	2001      	movs	r0, #1
 8002368:	f7fe fef0 	bl	800114c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	f241 0318 	movw	r3, #4120	; 0x1018
 8002374:	4413      	add	r3, r2
 8002376:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800237a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800237c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800237e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002380:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002384:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002388:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800238a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800238c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800238e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002390:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002392:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002396:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80023a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023a4:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80023b4:	2001      	movs	r0, #1
 80023b6:	f7fe fec9 	bl	800114c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023c6:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d10d      	bne.n	80023ec <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	f241 031c 	movw	r3, #4124	; 0x101c
 80023d8:	4413      	add	r3, r2
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6811      	ldr	r1, [r2, #0]
 80023e0:	4a0a      	ldr	r2, [pc, #40]	; (800240c <ETH_MACDMAConfig+0x390>)
 80023e2:	431a      	orrs	r2, r3
 80023e4:	f241 031c 	movw	r3, #4124	; 0x101c
 80023e8:	440b      	add	r3, r1
 80023ea:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	461a      	mov	r2, r3
 80023f2:	2100      	movs	r1, #0
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 f80b 	bl	8002410 <ETH_MACAddressConfig>
}
 80023fa:	bf00      	nop
 80023fc:	37c0      	adds	r7, #192	; 0xc0
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	ff20810f 	.word	0xff20810f
 8002408:	f8de3f23 	.word	0xf8de3f23
 800240c:	00010040 	.word	0x00010040

08002410 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002410:	b480      	push	{r7}
 8002412:	b087      	sub	sp, #28
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3305      	adds	r3, #5
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	021b      	lsls	r3, r3, #8
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	3204      	adds	r2, #4
 8002428:	7812      	ldrb	r2, [r2, #0]
 800242a:	4313      	orrs	r3, r2
 800242c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	4b11      	ldr	r3, [pc, #68]	; (8002478 <ETH_MACAddressConfig+0x68>)
 8002432:	4413      	add	r3, r2
 8002434:	461a      	mov	r2, r3
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3303      	adds	r3, #3
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	061a      	lsls	r2, r3, #24
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3302      	adds	r3, #2
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	041b      	lsls	r3, r3, #16
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3301      	adds	r3, #1
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	021b      	lsls	r3, r3, #8
 8002454:	4313      	orrs	r3, r2
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	7812      	ldrb	r2, [r2, #0]
 800245a:	4313      	orrs	r3, r2
 800245c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	4b06      	ldr	r3, [pc, #24]	; (800247c <ETH_MACAddressConfig+0x6c>)
 8002462:	4413      	add	r3, r2
 8002464:	461a      	mov	r2, r3
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	6013      	str	r3, [r2, #0]
}
 800246a:	bf00      	nop
 800246c:	371c      	adds	r7, #28
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	40028040 	.word	0x40028040
 800247c:	40028044 	.word	0x40028044

08002480 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002480:	b480      	push	{r7}
 8002482:	b089      	sub	sp, #36	; 0x24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800248a:	2300      	movs	r3, #0
 800248c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800248e:	2300      	movs	r3, #0
 8002490:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002492:	2300      	movs	r3, #0
 8002494:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002496:	2300      	movs	r3, #0
 8002498:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
 800249e:	e175      	b.n	800278c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024a0:	2201      	movs	r2, #1
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	4013      	ands	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	f040 8164 	bne.w	8002786 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d005      	beq.n	80024d6 <HAL_GPIO_Init+0x56>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d130      	bne.n	8002538 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	2203      	movs	r2, #3
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43db      	mvns	r3, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4013      	ands	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800250c:	2201      	movs	r2, #1
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	091b      	lsrs	r3, r3, #4
 8002522:	f003 0201 	and.w	r2, r3, #1
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 0303 	and.w	r3, r3, #3
 8002540:	2b03      	cmp	r3, #3
 8002542:	d017      	beq.n	8002574 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	2203      	movs	r2, #3
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4013      	ands	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4313      	orrs	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d123      	bne.n	80025c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	08da      	lsrs	r2, r3, #3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3208      	adds	r2, #8
 8002588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800258c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	220f      	movs	r2, #15
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	691a      	ldr	r2, [r3, #16]
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	08da      	lsrs	r2, r3, #3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3208      	adds	r2, #8
 80025c2:	69b9      	ldr	r1, [r7, #24]
 80025c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	2203      	movs	r2, #3
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 0203 	and.w	r2, r3, #3
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 80be 	beq.w	8002786 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260a:	4b65      	ldr	r3, [pc, #404]	; (80027a0 <HAL_GPIO_Init+0x320>)
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	4a64      	ldr	r2, [pc, #400]	; (80027a0 <HAL_GPIO_Init+0x320>)
 8002610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002614:	6453      	str	r3, [r2, #68]	; 0x44
 8002616:	4b62      	ldr	r3, [pc, #392]	; (80027a0 <HAL_GPIO_Init+0x320>)
 8002618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002622:	4a60      	ldr	r2, [pc, #384]	; (80027a4 <HAL_GPIO_Init+0x324>)
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	089b      	lsrs	r3, r3, #2
 8002628:	3302      	adds	r3, #2
 800262a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800262e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	220f      	movs	r2, #15
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43db      	mvns	r3, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4013      	ands	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a57      	ldr	r2, [pc, #348]	; (80027a8 <HAL_GPIO_Init+0x328>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d037      	beq.n	80026be <HAL_GPIO_Init+0x23e>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a56      	ldr	r2, [pc, #344]	; (80027ac <HAL_GPIO_Init+0x32c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d031      	beq.n	80026ba <HAL_GPIO_Init+0x23a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a55      	ldr	r2, [pc, #340]	; (80027b0 <HAL_GPIO_Init+0x330>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d02b      	beq.n	80026b6 <HAL_GPIO_Init+0x236>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a54      	ldr	r2, [pc, #336]	; (80027b4 <HAL_GPIO_Init+0x334>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d025      	beq.n	80026b2 <HAL_GPIO_Init+0x232>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a53      	ldr	r2, [pc, #332]	; (80027b8 <HAL_GPIO_Init+0x338>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d01f      	beq.n	80026ae <HAL_GPIO_Init+0x22e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a52      	ldr	r2, [pc, #328]	; (80027bc <HAL_GPIO_Init+0x33c>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d019      	beq.n	80026aa <HAL_GPIO_Init+0x22a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a51      	ldr	r2, [pc, #324]	; (80027c0 <HAL_GPIO_Init+0x340>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d013      	beq.n	80026a6 <HAL_GPIO_Init+0x226>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a50      	ldr	r2, [pc, #320]	; (80027c4 <HAL_GPIO_Init+0x344>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d00d      	beq.n	80026a2 <HAL_GPIO_Init+0x222>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a4f      	ldr	r2, [pc, #316]	; (80027c8 <HAL_GPIO_Init+0x348>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d007      	beq.n	800269e <HAL_GPIO_Init+0x21e>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a4e      	ldr	r2, [pc, #312]	; (80027cc <HAL_GPIO_Init+0x34c>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d101      	bne.n	800269a <HAL_GPIO_Init+0x21a>
 8002696:	2309      	movs	r3, #9
 8002698:	e012      	b.n	80026c0 <HAL_GPIO_Init+0x240>
 800269a:	230a      	movs	r3, #10
 800269c:	e010      	b.n	80026c0 <HAL_GPIO_Init+0x240>
 800269e:	2308      	movs	r3, #8
 80026a0:	e00e      	b.n	80026c0 <HAL_GPIO_Init+0x240>
 80026a2:	2307      	movs	r3, #7
 80026a4:	e00c      	b.n	80026c0 <HAL_GPIO_Init+0x240>
 80026a6:	2306      	movs	r3, #6
 80026a8:	e00a      	b.n	80026c0 <HAL_GPIO_Init+0x240>
 80026aa:	2305      	movs	r3, #5
 80026ac:	e008      	b.n	80026c0 <HAL_GPIO_Init+0x240>
 80026ae:	2304      	movs	r3, #4
 80026b0:	e006      	b.n	80026c0 <HAL_GPIO_Init+0x240>
 80026b2:	2303      	movs	r3, #3
 80026b4:	e004      	b.n	80026c0 <HAL_GPIO_Init+0x240>
 80026b6:	2302      	movs	r3, #2
 80026b8:	e002      	b.n	80026c0 <HAL_GPIO_Init+0x240>
 80026ba:	2301      	movs	r3, #1
 80026bc:	e000      	b.n	80026c0 <HAL_GPIO_Init+0x240>
 80026be:	2300      	movs	r3, #0
 80026c0:	69fa      	ldr	r2, [r7, #28]
 80026c2:	f002 0203 	and.w	r2, r2, #3
 80026c6:	0092      	lsls	r2, r2, #2
 80026c8:	4093      	lsls	r3, r2
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80026d0:	4934      	ldr	r1, [pc, #208]	; (80027a4 <HAL_GPIO_Init+0x324>)
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	089b      	lsrs	r3, r3, #2
 80026d6:	3302      	adds	r3, #2
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026de:	4b3c      	ldr	r3, [pc, #240]	; (80027d0 <HAL_GPIO_Init+0x350>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	43db      	mvns	r3, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002702:	4a33      	ldr	r2, [pc, #204]	; (80027d0 <HAL_GPIO_Init+0x350>)
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002708:	4b31      	ldr	r3, [pc, #196]	; (80027d0 <HAL_GPIO_Init+0x350>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	43db      	mvns	r3, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800272c:	4a28      	ldr	r2, [pc, #160]	; (80027d0 <HAL_GPIO_Init+0x350>)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002732:	4b27      	ldr	r3, [pc, #156]	; (80027d0 <HAL_GPIO_Init+0x350>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	43db      	mvns	r3, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4013      	ands	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002756:	4a1e      	ldr	r2, [pc, #120]	; (80027d0 <HAL_GPIO_Init+0x350>)
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800275c:	4b1c      	ldr	r3, [pc, #112]	; (80027d0 <HAL_GPIO_Init+0x350>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4313      	orrs	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002780:	4a13      	ldr	r2, [pc, #76]	; (80027d0 <HAL_GPIO_Init+0x350>)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	3301      	adds	r3, #1
 800278a:	61fb      	str	r3, [r7, #28]
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	2b0f      	cmp	r3, #15
 8002790:	f67f ae86 	bls.w	80024a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002794:	bf00      	nop
 8002796:	3724      	adds	r7, #36	; 0x24
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	40023800 	.word	0x40023800
 80027a4:	40013800 	.word	0x40013800
 80027a8:	40020000 	.word	0x40020000
 80027ac:	40020400 	.word	0x40020400
 80027b0:	40020800 	.word	0x40020800
 80027b4:	40020c00 	.word	0x40020c00
 80027b8:	40021000 	.word	0x40021000
 80027bc:	40021400 	.word	0x40021400
 80027c0:	40021800 	.word	0x40021800
 80027c4:	40021c00 	.word	0x40021c00
 80027c8:	40022000 	.word	0x40022000
 80027cc:	40022400 	.word	0x40022400
 80027d0:	40013c00 	.word	0x40013c00

080027d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	691a      	ldr	r2, [r3, #16]
 80027e4:	887b      	ldrh	r3, [r7, #2]
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027ec:	2301      	movs	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
 80027f0:	e001      	b.n	80027f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027f2:	2300      	movs	r3, #0
 80027f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	460b      	mov	r3, r1
 800280e:	807b      	strh	r3, [r7, #2]
 8002810:	4613      	mov	r3, r2
 8002812:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002814:	787b      	ldrb	r3, [r7, #1]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800281a:	887a      	ldrh	r2, [r7, #2]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002820:	e003      	b.n	800282a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002822:	887b      	ldrh	r3, [r7, #2]
 8002824:	041a      	lsls	r2, r3, #16
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	619a      	str	r2, [r3, #24]
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002836:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002838:	b08f      	sub	sp, #60	; 0x3c
 800283a:	af0a      	add	r7, sp, #40	; 0x28
 800283c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e116      	b.n	8002a76 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d106      	bne.n	8002868 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7fe fb10 	bl	8000e88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2203      	movs	r2, #3
 800286c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002878:	2b00      	cmp	r3, #0
 800287a:	d102      	bne.n	8002882 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f002 fbaa 	bl	8004fe0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	603b      	str	r3, [r7, #0]
 8002892:	687e      	ldr	r6, [r7, #4]
 8002894:	466d      	mov	r5, sp
 8002896:	f106 0410 	add.w	r4, r6, #16
 800289a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800289c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800289e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80028aa:	1d33      	adds	r3, r6, #4
 80028ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028ae:	6838      	ldr	r0, [r7, #0]
 80028b0:	f002 fb3e 	bl	8004f30 <USB_CoreInit>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d005      	beq.n	80028c6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2202      	movs	r2, #2
 80028be:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e0d7      	b.n	8002a76 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2100      	movs	r1, #0
 80028cc:	4618      	mov	r0, r3
 80028ce:	f002 fb98 	bl	8005002 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028d2:	2300      	movs	r3, #0
 80028d4:	73fb      	strb	r3, [r7, #15]
 80028d6:	e04a      	b.n	800296e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028d8:	7bfa      	ldrb	r2, [r7, #15]
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	1a9b      	subs	r3, r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	333d      	adds	r3, #61	; 0x3d
 80028e8:	2201      	movs	r2, #1
 80028ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028ec:	7bfa      	ldrb	r2, [r7, #15]
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	1a9b      	subs	r3, r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	333c      	adds	r3, #60	; 0x3c
 80028fc:	7bfa      	ldrb	r2, [r7, #15]
 80028fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002900:	7bfa      	ldrb	r2, [r7, #15]
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	b298      	uxth	r0, r3
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	1a9b      	subs	r3, r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	3342      	adds	r3, #66	; 0x42
 8002914:	4602      	mov	r2, r0
 8002916:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002918:	7bfa      	ldrb	r2, [r7, #15]
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	4613      	mov	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	1a9b      	subs	r3, r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	333f      	adds	r3, #63	; 0x3f
 8002928:	2200      	movs	r2, #0
 800292a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800292c:	7bfa      	ldrb	r2, [r7, #15]
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	1a9b      	subs	r3, r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	3344      	adds	r3, #68	; 0x44
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002940:	7bfa      	ldrb	r2, [r7, #15]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	1a9b      	subs	r3, r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	3348      	adds	r3, #72	; 0x48
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002954:	7bfa      	ldrb	r2, [r7, #15]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	1a9b      	subs	r3, r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	3350      	adds	r3, #80	; 0x50
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002968:	7bfb      	ldrb	r3, [r7, #15]
 800296a:	3301      	adds	r3, #1
 800296c:	73fb      	strb	r3, [r7, #15]
 800296e:	7bfa      	ldrb	r2, [r7, #15]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	429a      	cmp	r2, r3
 8002976:	d3af      	bcc.n	80028d8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002978:	2300      	movs	r3, #0
 800297a:	73fb      	strb	r3, [r7, #15]
 800297c:	e044      	b.n	8002a08 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800297e:	7bfa      	ldrb	r2, [r7, #15]
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	4613      	mov	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	1a9b      	subs	r3, r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	440b      	add	r3, r1
 800298c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002990:	2200      	movs	r2, #0
 8002992:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002994:	7bfa      	ldrb	r2, [r7, #15]
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	4613      	mov	r3, r2
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	1a9b      	subs	r3, r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80029a6:	7bfa      	ldrb	r2, [r7, #15]
 80029a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029aa:	7bfa      	ldrb	r2, [r7, #15]
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	4613      	mov	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	1a9b      	subs	r3, r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80029bc:	2200      	movs	r2, #0
 80029be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029c0:	7bfa      	ldrb	r2, [r7, #15]
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	1a9b      	subs	r3, r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029d6:	7bfa      	ldrb	r2, [r7, #15]
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	1a9b      	subs	r3, r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	440b      	add	r3, r1
 80029e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029ec:	7bfa      	ldrb	r2, [r7, #15]
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	1a9b      	subs	r3, r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
 8002a04:	3301      	adds	r3, #1
 8002a06:	73fb      	strb	r3, [r7, #15]
 8002a08:	7bfa      	ldrb	r2, [r7, #15]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d3b5      	bcc.n	800297e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	603b      	str	r3, [r7, #0]
 8002a18:	687e      	ldr	r6, [r7, #4]
 8002a1a:	466d      	mov	r5, sp
 8002a1c:	f106 0410 	add.w	r4, r6, #16
 8002a20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a30:	1d33      	adds	r3, r6, #4
 8002a32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a34:	6838      	ldr	r0, [r7, #0]
 8002a36:	f002 fb31 	bl	800509c <USB_DevInit>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e014      	b.n	8002a76 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d102      	bne.n	8002a6a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f80b 	bl	8002a80 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f002 fceb 	bl	800544a <USB_DevDisconnect>

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002a80 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002aae:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <HAL_PCDEx_ActivateLPM+0x44>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	10000003 	.word	0x10000003

08002ac8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002acc:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a04      	ldr	r2, [pc, #16]	; (8002ae4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad6:	6013      	str	r3, [r2, #0]
}
 8002ad8:	bf00      	nop
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40007000 	.word	0x40007000

08002ae8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002af0:	2300      	movs	r3, #0
 8002af2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e291      	b.n	8003022 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 8087 	beq.w	8002c1a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b0c:	4b96      	ldr	r3, [pc, #600]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 030c 	and.w	r3, r3, #12
 8002b14:	2b04      	cmp	r3, #4
 8002b16:	d00c      	beq.n	8002b32 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b18:	4b93      	ldr	r3, [pc, #588]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 030c 	and.w	r3, r3, #12
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d112      	bne.n	8002b4a <HAL_RCC_OscConfig+0x62>
 8002b24:	4b90      	ldr	r3, [pc, #576]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b30:	d10b      	bne.n	8002b4a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b32:	4b8d      	ldr	r3, [pc, #564]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d06c      	beq.n	8002c18 <HAL_RCC_OscConfig+0x130>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d168      	bne.n	8002c18 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e26b      	b.n	8003022 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b52:	d106      	bne.n	8002b62 <HAL_RCC_OscConfig+0x7a>
 8002b54:	4b84      	ldr	r3, [pc, #528]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a83      	ldr	r2, [pc, #524]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b5e:	6013      	str	r3, [r2, #0]
 8002b60:	e02e      	b.n	8002bc0 <HAL_RCC_OscConfig+0xd8>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10c      	bne.n	8002b84 <HAL_RCC_OscConfig+0x9c>
 8002b6a:	4b7f      	ldr	r3, [pc, #508]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a7e      	ldr	r2, [pc, #504]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	4b7c      	ldr	r3, [pc, #496]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a7b      	ldr	r2, [pc, #492]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	e01d      	b.n	8002bc0 <HAL_RCC_OscConfig+0xd8>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b8c:	d10c      	bne.n	8002ba8 <HAL_RCC_OscConfig+0xc0>
 8002b8e:	4b76      	ldr	r3, [pc, #472]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a75      	ldr	r2, [pc, #468]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b98:	6013      	str	r3, [r2, #0]
 8002b9a:	4b73      	ldr	r3, [pc, #460]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a72      	ldr	r2, [pc, #456]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	e00b      	b.n	8002bc0 <HAL_RCC_OscConfig+0xd8>
 8002ba8:	4b6f      	ldr	r3, [pc, #444]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a6e      	ldr	r2, [pc, #440]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb2:	6013      	str	r3, [r2, #0]
 8002bb4:	4b6c      	ldr	r3, [pc, #432]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a6b      	ldr	r2, [pc, #428]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d013      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc8:	f7fe fab4 	bl	8001134 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bd0:	f7fe fab0 	bl	8001134 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b64      	cmp	r3, #100	; 0x64
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e21f      	b.n	8003022 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be2:	4b61      	ldr	r3, [pc, #388]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f0      	beq.n	8002bd0 <HAL_RCC_OscConfig+0xe8>
 8002bee:	e014      	b.n	8002c1a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7fe faa0 	bl	8001134 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bf8:	f7fe fa9c 	bl	8001134 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b64      	cmp	r3, #100	; 0x64
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e20b      	b.n	8003022 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c0a:	4b57      	ldr	r3, [pc, #348]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x110>
 8002c16:	e000      	b.n	8002c1a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d069      	beq.n	8002cfa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c26:	4b50      	ldr	r3, [pc, #320]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 030c 	and.w	r3, r3, #12
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00b      	beq.n	8002c4a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c32:	4b4d      	ldr	r3, [pc, #308]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 030c 	and.w	r3, r3, #12
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d11c      	bne.n	8002c78 <HAL_RCC_OscConfig+0x190>
 8002c3e:	4b4a      	ldr	r3, [pc, #296]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d116      	bne.n	8002c78 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c4a:	4b47      	ldr	r3, [pc, #284]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d005      	beq.n	8002c62 <HAL_RCC_OscConfig+0x17a>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d001      	beq.n	8002c62 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e1df      	b.n	8003022 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c62:	4b41      	ldr	r3, [pc, #260]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	493d      	ldr	r1, [pc, #244]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c76:	e040      	b.n	8002cfa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d023      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c80:	4b39      	ldr	r3, [pc, #228]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a38      	ldr	r2, [pc, #224]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8c:	f7fe fa52 	bl	8001134 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c94:	f7fe fa4e 	bl	8001134 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e1bd      	b.n	8003022 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca6:	4b30      	ldr	r3, [pc, #192]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb2:	4b2d      	ldr	r3, [pc, #180]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4929      	ldr	r1, [pc, #164]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	600b      	str	r3, [r1, #0]
 8002cc6:	e018      	b.n	8002cfa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cc8:	4b27      	ldr	r3, [pc, #156]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a26      	ldr	r2, [pc, #152]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002cce:	f023 0301 	bic.w	r3, r3, #1
 8002cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd4:	f7fe fa2e 	bl	8001134 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cdc:	f7fe fa2a 	bl	8001134 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e199      	b.n	8003022 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cee:	4b1e      	ldr	r3, [pc, #120]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f0      	bne.n	8002cdc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0308 	and.w	r3, r3, #8
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d038      	beq.n	8002d78 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d019      	beq.n	8002d42 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d0e:	4b16      	ldr	r3, [pc, #88]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d12:	4a15      	ldr	r2, [pc, #84]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d1a:	f7fe fa0b 	bl	8001134 <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d20:	e008      	b.n	8002d34 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d22:	f7fe fa07 	bl	8001134 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e176      	b.n	8003022 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d34:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002d36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0f0      	beq.n	8002d22 <HAL_RCC_OscConfig+0x23a>
 8002d40:	e01a      	b.n	8002d78 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d42:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d46:	4a08      	ldr	r2, [pc, #32]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002d48:	f023 0301 	bic.w	r3, r3, #1
 8002d4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4e:	f7fe f9f1 	bl	8001134 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d54:	e00a      	b.n	8002d6c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d56:	f7fe f9ed 	bl	8001134 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d903      	bls.n	8002d6c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e15c      	b.n	8003022 <HAL_RCC_OscConfig+0x53a>
 8002d68:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d6c:	4b91      	ldr	r3, [pc, #580]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1ee      	bne.n	8002d56 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 80a4 	beq.w	8002ece <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d86:	4b8b      	ldr	r3, [pc, #556]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10d      	bne.n	8002dae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d92:	4b88      	ldr	r3, [pc, #544]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	4a87      	ldr	r2, [pc, #540]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d9e:	4b85      	ldr	r3, [pc, #532]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002daa:	2301      	movs	r3, #1
 8002dac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dae:	4b82      	ldr	r3, [pc, #520]	; (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d118      	bne.n	8002dec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002dba:	4b7f      	ldr	r3, [pc, #508]	; (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a7e      	ldr	r2, [pc, #504]	; (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dc6:	f7fe f9b5 	bl	8001134 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dce:	f7fe f9b1 	bl	8001134 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b64      	cmp	r3, #100	; 0x64
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e120      	b.n	8003022 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002de0:	4b75      	ldr	r3, [pc, #468]	; (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0f0      	beq.n	8002dce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d106      	bne.n	8002e02 <HAL_RCC_OscConfig+0x31a>
 8002df4:	4b6f      	ldr	r3, [pc, #444]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df8:	4a6e      	ldr	r2, [pc, #440]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8002e00:	e02d      	b.n	8002e5e <HAL_RCC_OscConfig+0x376>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10c      	bne.n	8002e24 <HAL_RCC_OscConfig+0x33c>
 8002e0a:	4b6a      	ldr	r3, [pc, #424]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0e:	4a69      	ldr	r2, [pc, #420]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002e10:	f023 0301 	bic.w	r3, r3, #1
 8002e14:	6713      	str	r3, [r2, #112]	; 0x70
 8002e16:	4b67      	ldr	r3, [pc, #412]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1a:	4a66      	ldr	r2, [pc, #408]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002e1c:	f023 0304 	bic.w	r3, r3, #4
 8002e20:	6713      	str	r3, [r2, #112]	; 0x70
 8002e22:	e01c      	b.n	8002e5e <HAL_RCC_OscConfig+0x376>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	2b05      	cmp	r3, #5
 8002e2a:	d10c      	bne.n	8002e46 <HAL_RCC_OscConfig+0x35e>
 8002e2c:	4b61      	ldr	r3, [pc, #388]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e30:	4a60      	ldr	r2, [pc, #384]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002e32:	f043 0304 	orr.w	r3, r3, #4
 8002e36:	6713      	str	r3, [r2, #112]	; 0x70
 8002e38:	4b5e      	ldr	r3, [pc, #376]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3c:	4a5d      	ldr	r2, [pc, #372]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002e3e:	f043 0301 	orr.w	r3, r3, #1
 8002e42:	6713      	str	r3, [r2, #112]	; 0x70
 8002e44:	e00b      	b.n	8002e5e <HAL_RCC_OscConfig+0x376>
 8002e46:	4b5b      	ldr	r3, [pc, #364]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4a:	4a5a      	ldr	r2, [pc, #360]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002e4c:	f023 0301 	bic.w	r3, r3, #1
 8002e50:	6713      	str	r3, [r2, #112]	; 0x70
 8002e52:	4b58      	ldr	r3, [pc, #352]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e56:	4a57      	ldr	r2, [pc, #348]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002e58:	f023 0304 	bic.w	r3, r3, #4
 8002e5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d015      	beq.n	8002e92 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e66:	f7fe f965 	bl	8001134 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e6c:	e00a      	b.n	8002e84 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e6e:	f7fe f961 	bl	8001134 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e0ce      	b.n	8003022 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e84:	4b4b      	ldr	r3, [pc, #300]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0ee      	beq.n	8002e6e <HAL_RCC_OscConfig+0x386>
 8002e90:	e014      	b.n	8002ebc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e92:	f7fe f94f 	bl	8001134 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e98:	e00a      	b.n	8002eb0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e9a:	f7fe f94b 	bl	8001134 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e0b8      	b.n	8003022 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb0:	4b40      	ldr	r3, [pc, #256]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1ee      	bne.n	8002e9a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ebc:	7dfb      	ldrb	r3, [r7, #23]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d105      	bne.n	8002ece <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ec2:	4b3c      	ldr	r3, [pc, #240]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	4a3b      	ldr	r2, [pc, #236]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002ec8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ecc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 80a4 	beq.w	8003020 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ed8:	4b36      	ldr	r3, [pc, #216]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 030c 	and.w	r3, r3, #12
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d06b      	beq.n	8002fbc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d149      	bne.n	8002f80 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eec:	4b31      	ldr	r3, [pc, #196]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a30      	ldr	r2, [pc, #192]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002ef2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef8:	f7fe f91c 	bl	8001134 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f00:	f7fe f918 	bl	8001134 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e087      	b.n	8003022 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f12:	4b28      	ldr	r3, [pc, #160]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f0      	bne.n	8002f00 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69da      	ldr	r2, [r3, #28]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	019b      	lsls	r3, r3, #6
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f34:	085b      	lsrs	r3, r3, #1
 8002f36:	3b01      	subs	r3, #1
 8002f38:	041b      	lsls	r3, r3, #16
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f40:	061b      	lsls	r3, r3, #24
 8002f42:	4313      	orrs	r3, r2
 8002f44:	4a1b      	ldr	r2, [pc, #108]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002f46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002f4a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f4c:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a18      	ldr	r2, [pc, #96]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002f52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f58:	f7fe f8ec 	bl	8001134 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f60:	f7fe f8e8 	bl	8001134 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e057      	b.n	8003022 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f72:	4b10      	ldr	r3, [pc, #64]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0f0      	beq.n	8002f60 <HAL_RCC_OscConfig+0x478>
 8002f7e:	e04f      	b.n	8003020 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f80:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a0b      	ldr	r2, [pc, #44]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002f86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8c:	f7fe f8d2 	bl	8001134 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f94:	f7fe f8ce 	bl	8001134 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e03d      	b.n	8003022 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa6:	4b03      	ldr	r3, [pc, #12]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f0      	bne.n	8002f94 <HAL_RCC_OscConfig+0x4ac>
 8002fb2:	e035      	b.n	8003020 <HAL_RCC_OscConfig+0x538>
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002fbc:	4b1b      	ldr	r3, [pc, #108]	; (800302c <HAL_RCC_OscConfig+0x544>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d028      	beq.n	800301c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d121      	bne.n	800301c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d11a      	bne.n	800301c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fec:	4013      	ands	r3, r2
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ff2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d111      	bne.n	800301c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003002:	085b      	lsrs	r3, r3, #1
 8003004:	3b01      	subs	r3, #1
 8003006:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003008:	429a      	cmp	r2, r3
 800300a:	d107      	bne.n	800301c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003016:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003018:	429a      	cmp	r2, r3
 800301a:	d001      	beq.n	8003020 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e000      	b.n	8003022 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3718      	adds	r7, #24
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40023800 	.word	0x40023800

08003030 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800303a:	2300      	movs	r3, #0
 800303c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e0d0      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003048:	4b6a      	ldr	r3, [pc, #424]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 030f 	and.w	r3, r3, #15
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d910      	bls.n	8003078 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003056:	4b67      	ldr	r3, [pc, #412]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f023 020f 	bic.w	r2, r3, #15
 800305e:	4965      	ldr	r1, [pc, #404]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	4313      	orrs	r3, r2
 8003064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003066:	4b63      	ldr	r3, [pc, #396]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d001      	beq.n	8003078 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e0b8      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d020      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003090:	4b59      	ldr	r3, [pc, #356]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	4a58      	ldr	r2, [pc, #352]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003096:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800309a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030a8:	4b53      	ldr	r3, [pc, #332]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	4a52      	ldr	r2, [pc, #328]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 80030ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b4:	4b50      	ldr	r3, [pc, #320]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	494d      	ldr	r1, [pc, #308]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d040      	beq.n	8003154 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d107      	bne.n	80030ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030da:	4b47      	ldr	r3, [pc, #284]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d115      	bne.n	8003112 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e07f      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d107      	bne.n	8003102 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f2:	4b41      	ldr	r3, [pc, #260]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d109      	bne.n	8003112 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e073      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003102:	4b3d      	ldr	r3, [pc, #244]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e06b      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003112:	4b39      	ldr	r3, [pc, #228]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f023 0203 	bic.w	r2, r3, #3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	4936      	ldr	r1, [pc, #216]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003120:	4313      	orrs	r3, r2
 8003122:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003124:	f7fe f806 	bl	8001134 <HAL_GetTick>
 8003128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312a:	e00a      	b.n	8003142 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800312c:	f7fe f802 	bl	8001134 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	f241 3288 	movw	r2, #5000	; 0x1388
 800313a:	4293      	cmp	r3, r2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e053      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003142:	4b2d      	ldr	r3, [pc, #180]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 020c 	and.w	r2, r3, #12
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	429a      	cmp	r2, r3
 8003152:	d1eb      	bne.n	800312c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003154:	4b27      	ldr	r3, [pc, #156]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 030f 	and.w	r3, r3, #15
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d210      	bcs.n	8003184 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003162:	4b24      	ldr	r3, [pc, #144]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f023 020f 	bic.w	r2, r3, #15
 800316a:	4922      	ldr	r1, [pc, #136]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	4313      	orrs	r3, r2
 8003170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003172:	4b20      	ldr	r3, [pc, #128]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	429a      	cmp	r2, r3
 800317e:	d001      	beq.n	8003184 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e032      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003190:	4b19      	ldr	r3, [pc, #100]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	4916      	ldr	r1, [pc, #88]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d009      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031ae:	4b12      	ldr	r3, [pc, #72]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	490e      	ldr	r1, [pc, #56]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031c2:	f000 f821 	bl	8003208 <HAL_RCC_GetSysClockFreq>
 80031c6:	4601      	mov	r1, r0
 80031c8:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	091b      	lsrs	r3, r3, #4
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	4a0a      	ldr	r2, [pc, #40]	; (80031fc <HAL_RCC_ClockConfig+0x1cc>)
 80031d4:	5cd3      	ldrb	r3, [r2, r3]
 80031d6:	fa21 f303 	lsr.w	r3, r1, r3
 80031da:	4a09      	ldr	r2, [pc, #36]	; (8003200 <HAL_RCC_ClockConfig+0x1d0>)
 80031dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031de:	4b09      	ldr	r3, [pc, #36]	; (8003204 <HAL_RCC_ClockConfig+0x1d4>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fd ff62 	bl	80010ac <HAL_InitTick>

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40023c00 	.word	0x40023c00
 80031f8:	40023800 	.word	0x40023800
 80031fc:	08005d9c 	.word	0x08005d9c
 8003200:	20000000 	.word	0x20000000
 8003204:	20000004 	.word	0x20000004

08003208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800320e:	2300      	movs	r3, #0
 8003210:	607b      	str	r3, [r7, #4]
 8003212:	2300      	movs	r3, #0
 8003214:	60fb      	str	r3, [r7, #12]
 8003216:	2300      	movs	r3, #0
 8003218:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800321a:	2300      	movs	r3, #0
 800321c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800321e:	4b63      	ldr	r3, [pc, #396]	; (80033ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	2b04      	cmp	r3, #4
 8003228:	d007      	beq.n	800323a <HAL_RCC_GetSysClockFreq+0x32>
 800322a:	2b08      	cmp	r3, #8
 800322c:	d008      	beq.n	8003240 <HAL_RCC_GetSysClockFreq+0x38>
 800322e:	2b00      	cmp	r3, #0
 8003230:	f040 80b4 	bne.w	800339c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003234:	4b5e      	ldr	r3, [pc, #376]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003236:	60bb      	str	r3, [r7, #8]
      break;
 8003238:	e0b3      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800323a:	4b5e      	ldr	r3, [pc, #376]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800323c:	60bb      	str	r3, [r7, #8]
      break;
 800323e:	e0b0      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003240:	4b5a      	ldr	r3, [pc, #360]	; (80033ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003248:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800324a:	4b58      	ldr	r3, [pc, #352]	; (80033ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d04a      	beq.n	80032ec <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003256:	4b55      	ldr	r3, [pc, #340]	; (80033ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	099b      	lsrs	r3, r3, #6
 800325c:	f04f 0400 	mov.w	r4, #0
 8003260:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003264:	f04f 0200 	mov.w	r2, #0
 8003268:	ea03 0501 	and.w	r5, r3, r1
 800326c:	ea04 0602 	and.w	r6, r4, r2
 8003270:	4629      	mov	r1, r5
 8003272:	4632      	mov	r2, r6
 8003274:	f04f 0300 	mov.w	r3, #0
 8003278:	f04f 0400 	mov.w	r4, #0
 800327c:	0154      	lsls	r4, r2, #5
 800327e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003282:	014b      	lsls	r3, r1, #5
 8003284:	4619      	mov	r1, r3
 8003286:	4622      	mov	r2, r4
 8003288:	1b49      	subs	r1, r1, r5
 800328a:	eb62 0206 	sbc.w	r2, r2, r6
 800328e:	f04f 0300 	mov.w	r3, #0
 8003292:	f04f 0400 	mov.w	r4, #0
 8003296:	0194      	lsls	r4, r2, #6
 8003298:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800329c:	018b      	lsls	r3, r1, #6
 800329e:	1a5b      	subs	r3, r3, r1
 80032a0:	eb64 0402 	sbc.w	r4, r4, r2
 80032a4:	f04f 0100 	mov.w	r1, #0
 80032a8:	f04f 0200 	mov.w	r2, #0
 80032ac:	00e2      	lsls	r2, r4, #3
 80032ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80032b2:	00d9      	lsls	r1, r3, #3
 80032b4:	460b      	mov	r3, r1
 80032b6:	4614      	mov	r4, r2
 80032b8:	195b      	adds	r3, r3, r5
 80032ba:	eb44 0406 	adc.w	r4, r4, r6
 80032be:	f04f 0100 	mov.w	r1, #0
 80032c2:	f04f 0200 	mov.w	r2, #0
 80032c6:	0262      	lsls	r2, r4, #9
 80032c8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80032cc:	0259      	lsls	r1, r3, #9
 80032ce:	460b      	mov	r3, r1
 80032d0:	4614      	mov	r4, r2
 80032d2:	4618      	mov	r0, r3
 80032d4:	4621      	mov	r1, r4
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f04f 0400 	mov.w	r4, #0
 80032dc:	461a      	mov	r2, r3
 80032de:	4623      	mov	r3, r4
 80032e0:	f7fc ffee 	bl	80002c0 <__aeabi_uldivmod>
 80032e4:	4603      	mov	r3, r0
 80032e6:	460c      	mov	r4, r1
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	e049      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ec:	4b2f      	ldr	r3, [pc, #188]	; (80033ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	099b      	lsrs	r3, r3, #6
 80032f2:	f04f 0400 	mov.w	r4, #0
 80032f6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032fa:	f04f 0200 	mov.w	r2, #0
 80032fe:	ea03 0501 	and.w	r5, r3, r1
 8003302:	ea04 0602 	and.w	r6, r4, r2
 8003306:	4629      	mov	r1, r5
 8003308:	4632      	mov	r2, r6
 800330a:	f04f 0300 	mov.w	r3, #0
 800330e:	f04f 0400 	mov.w	r4, #0
 8003312:	0154      	lsls	r4, r2, #5
 8003314:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003318:	014b      	lsls	r3, r1, #5
 800331a:	4619      	mov	r1, r3
 800331c:	4622      	mov	r2, r4
 800331e:	1b49      	subs	r1, r1, r5
 8003320:	eb62 0206 	sbc.w	r2, r2, r6
 8003324:	f04f 0300 	mov.w	r3, #0
 8003328:	f04f 0400 	mov.w	r4, #0
 800332c:	0194      	lsls	r4, r2, #6
 800332e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003332:	018b      	lsls	r3, r1, #6
 8003334:	1a5b      	subs	r3, r3, r1
 8003336:	eb64 0402 	sbc.w	r4, r4, r2
 800333a:	f04f 0100 	mov.w	r1, #0
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	00e2      	lsls	r2, r4, #3
 8003344:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003348:	00d9      	lsls	r1, r3, #3
 800334a:	460b      	mov	r3, r1
 800334c:	4614      	mov	r4, r2
 800334e:	195b      	adds	r3, r3, r5
 8003350:	eb44 0406 	adc.w	r4, r4, r6
 8003354:	f04f 0100 	mov.w	r1, #0
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	02a2      	lsls	r2, r4, #10
 800335e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003362:	0299      	lsls	r1, r3, #10
 8003364:	460b      	mov	r3, r1
 8003366:	4614      	mov	r4, r2
 8003368:	4618      	mov	r0, r3
 800336a:	4621      	mov	r1, r4
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f04f 0400 	mov.w	r4, #0
 8003372:	461a      	mov	r2, r3
 8003374:	4623      	mov	r3, r4
 8003376:	f7fc ffa3 	bl	80002c0 <__aeabi_uldivmod>
 800337a:	4603      	mov	r3, r0
 800337c:	460c      	mov	r4, r1
 800337e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003380:	4b0a      	ldr	r3, [pc, #40]	; (80033ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	0c1b      	lsrs	r3, r3, #16
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	3301      	adds	r3, #1
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	fbb2 f3f3 	udiv	r3, r2, r3
 8003398:	60bb      	str	r3, [r7, #8]
      break;
 800339a:	e002      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800339c:	4b04      	ldr	r3, [pc, #16]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800339e:	60bb      	str	r3, [r7, #8]
      break;
 80033a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033a2:	68bb      	ldr	r3, [r7, #8]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033ac:	40023800 	.word	0x40023800
 80033b0:	00f42400 	.word	0x00f42400
 80033b4:	007a1200 	.word	0x007a1200

080033b8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033bc:	4b03      	ldr	r3, [pc, #12]	; (80033cc <HAL_RCC_GetHCLKFreq+0x14>)
 80033be:	681b      	ldr	r3, [r3, #0]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	20000000 	.word	0x20000000

080033d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033d4:	f7ff fff0 	bl	80033b8 <HAL_RCC_GetHCLKFreq>
 80033d8:	4601      	mov	r1, r0
 80033da:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	0a9b      	lsrs	r3, r3, #10
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	4a03      	ldr	r2, [pc, #12]	; (80033f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033e6:	5cd3      	ldrb	r3, [r2, r3]
 80033e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40023800 	.word	0x40023800
 80033f4:	08005dac 	.word	0x08005dac

080033f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033fc:	f7ff ffdc 	bl	80033b8 <HAL_RCC_GetHCLKFreq>
 8003400:	4601      	mov	r1, r0
 8003402:	4b05      	ldr	r3, [pc, #20]	; (8003418 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	0b5b      	lsrs	r3, r3, #13
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	4a03      	ldr	r2, [pc, #12]	; (800341c <HAL_RCC_GetPCLK2Freq+0x24>)
 800340e:	5cd3      	ldrb	r3, [r2, r3]
 8003410:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003414:	4618      	mov	r0, r3
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40023800 	.word	0x40023800
 800341c:	08005dac 	.word	0x08005dac

08003420 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b088      	sub	sp, #32
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003428:	2300      	movs	r3, #0
 800342a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800342c:	2300      	movs	r3, #0
 800342e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003430:	2300      	movs	r3, #0
 8003432:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003438:	2300      	movs	r3, #0
 800343a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b00      	cmp	r3, #0
 8003446:	d012      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003448:	4b69      	ldr	r3, [pc, #420]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	4a68      	ldr	r2, [pc, #416]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800344e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003452:	6093      	str	r3, [r2, #8]
 8003454:	4b66      	ldr	r3, [pc, #408]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800345c:	4964      	ldr	r1, [pc, #400]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800345e:	4313      	orrs	r3, r2
 8003460:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800346a:	2301      	movs	r3, #1
 800346c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d017      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800347a:	4b5d      	ldr	r3, [pc, #372]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800347c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003480:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003488:	4959      	ldr	r1, [pc, #356]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348a:	4313      	orrs	r3, r2
 800348c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003494:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003498:	d101      	bne.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800349a:	2301      	movs	r3, #1
 800349c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80034a6:	2301      	movs	r3, #1
 80034a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d017      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034b6:	4b4e      	ldr	r3, [pc, #312]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	494a      	ldr	r1, [pc, #296]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034d4:	d101      	bne.n	80034da <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80034d6:	2301      	movs	r3, #1
 80034d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80034e2:	2301      	movs	r3, #1
 80034e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80034f2:	2301      	movs	r3, #1
 80034f4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0320 	and.w	r3, r3, #32
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 808b 	beq.w	800361a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003504:	4b3a      	ldr	r3, [pc, #232]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	4a39      	ldr	r2, [pc, #228]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800350a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800350e:	6413      	str	r3, [r2, #64]	; 0x40
 8003510:	4b37      	ldr	r3, [pc, #220]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003518:	60bb      	str	r3, [r7, #8]
 800351a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800351c:	4b35      	ldr	r3, [pc, #212]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a34      	ldr	r2, [pc, #208]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003526:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003528:	f7fd fe04 	bl	8001134 <HAL_GetTick>
 800352c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003530:	f7fd fe00 	bl	8001134 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b64      	cmp	r3, #100	; 0x64
 800353c:	d901      	bls.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e357      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003542:	4b2c      	ldr	r3, [pc, #176]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0f0      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800354e:	4b28      	ldr	r3, [pc, #160]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003556:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d035      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	429a      	cmp	r2, r3
 800356a:	d02e      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800356c:	4b20      	ldr	r3, [pc, #128]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800356e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003574:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003576:	4b1e      	ldr	r3, [pc, #120]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357a:	4a1d      	ldr	r2, [pc, #116]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800357c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003580:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003582:	4b1b      	ldr	r3, [pc, #108]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003586:	4a1a      	ldr	r2, [pc, #104]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003588:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800358c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800358e:	4a18      	ldr	r2, [pc, #96]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003594:	4b16      	ldr	r3, [pc, #88]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b01      	cmp	r3, #1
 800359e:	d114      	bne.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a0:	f7fd fdc8 	bl	8001134 <HAL_GetTick>
 80035a4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a6:	e00a      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035a8:	f7fd fdc4 	bl	8001134 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d901      	bls.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e319      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035be:	4b0c      	ldr	r3, [pc, #48]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0ee      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035d6:	d111      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80035d8:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035e4:	4b04      	ldr	r3, [pc, #16]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80035e6:	400b      	ands	r3, r1
 80035e8:	4901      	ldr	r1, [pc, #4]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	608b      	str	r3, [r1, #8]
 80035ee:	e00b      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80035f0:	40023800 	.word	0x40023800
 80035f4:	40007000 	.word	0x40007000
 80035f8:	0ffffcff 	.word	0x0ffffcff
 80035fc:	4bb1      	ldr	r3, [pc, #708]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	4ab0      	ldr	r2, [pc, #704]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003602:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003606:	6093      	str	r3, [r2, #8]
 8003608:	4bae      	ldr	r3, [pc, #696]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800360a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003614:	49ab      	ldr	r1, [pc, #684]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003616:	4313      	orrs	r3, r2
 8003618:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0310 	and.w	r3, r3, #16
 8003622:	2b00      	cmp	r3, #0
 8003624:	d010      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003626:	4ba7      	ldr	r3, [pc, #668]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800362c:	4aa5      	ldr	r2, [pc, #660]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800362e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003632:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003636:	4ba3      	ldr	r3, [pc, #652]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003638:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003640:	49a0      	ldr	r1, [pc, #640]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003642:	4313      	orrs	r3, r2
 8003644:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00a      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003654:	4b9b      	ldr	r3, [pc, #620]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003662:	4998      	ldr	r1, [pc, #608]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003664:	4313      	orrs	r3, r2
 8003666:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00a      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003676:	4b93      	ldr	r3, [pc, #588]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003684:	498f      	ldr	r1, [pc, #572]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003686:	4313      	orrs	r3, r2
 8003688:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00a      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003698:	4b8a      	ldr	r3, [pc, #552]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800369a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036a6:	4987      	ldr	r1, [pc, #540]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00a      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036ba:	4b82      	ldr	r3, [pc, #520]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80036bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c8:	497e      	ldr	r1, [pc, #504]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00a      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036dc:	4b79      	ldr	r3, [pc, #484]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80036de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e2:	f023 0203 	bic.w	r2, r3, #3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ea:	4976      	ldr	r1, [pc, #472]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036fe:	4b71      	ldr	r3, [pc, #452]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003704:	f023 020c 	bic.w	r2, r3, #12
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800370c:	496d      	ldr	r1, [pc, #436]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800370e:	4313      	orrs	r3, r2
 8003710:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00a      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003720:	4b68      	ldr	r3, [pc, #416]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003726:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800372e:	4965      	ldr	r1, [pc, #404]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003730:	4313      	orrs	r3, r2
 8003732:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003742:	4b60      	ldr	r3, [pc, #384]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003748:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003750:	495c      	ldr	r1, [pc, #368]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003752:	4313      	orrs	r3, r2
 8003754:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00a      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003764:	4b57      	ldr	r3, [pc, #348]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003772:	4954      	ldr	r1, [pc, #336]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003774:	4313      	orrs	r3, r2
 8003776:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00a      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003786:	4b4f      	ldr	r3, [pc, #316]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003794:	494b      	ldr	r1, [pc, #300]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003796:	4313      	orrs	r3, r2
 8003798:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00a      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80037a8:	4b46      	ldr	r3, [pc, #280]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b6:	4943      	ldr	r1, [pc, #268]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00a      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80037ca:	4b3e      	ldr	r3, [pc, #248]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d8:	493a      	ldr	r1, [pc, #232]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00a      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80037ec:	4b35      	ldr	r3, [pc, #212]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037fa:	4932      	ldr	r1, [pc, #200]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d011      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800380e:	4b2d      	ldr	r3, [pc, #180]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003814:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800381c:	4929      	ldr	r1, [pc, #164]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003828:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800382c:	d101      	bne.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800382e:	2301      	movs	r3, #1
 8003830:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800383e:	2301      	movs	r3, #1
 8003840:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800384e:	4b1d      	ldr	r3, [pc, #116]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003854:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800385c:	4919      	ldr	r1, [pc, #100]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00b      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003870:	4b14      	ldr	r3, [pc, #80]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003876:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003880:	4910      	ldr	r1, [pc, #64]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003882:	4313      	orrs	r3, r2
 8003884:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d006      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 80d9 	beq.w	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800389c:	4b09      	ldr	r3, [pc, #36]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a08      	ldr	r2, [pc, #32]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038a8:	f7fd fc44 	bl	8001134 <HAL_GetTick>
 80038ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038ae:	e00b      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038b0:	f7fd fc40 	bl	8001134 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b64      	cmp	r3, #100	; 0x64
 80038bc:	d904      	bls.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e197      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80038c2:	bf00      	nop
 80038c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038c8:	4b6c      	ldr	r3, [pc, #432]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1ed      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d021      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d11d      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038e8:	4b64      	ldr	r3, [pc, #400]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038ee:	0c1b      	lsrs	r3, r3, #16
 80038f0:	f003 0303 	and.w	r3, r3, #3
 80038f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80038f6:	4b61      	ldr	r3, [pc, #388]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038fc:	0e1b      	lsrs	r3, r3, #24
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	019a      	lsls	r2, r3, #6
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	041b      	lsls	r3, r3, #16
 800390e:	431a      	orrs	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	061b      	lsls	r3, r3, #24
 8003914:	431a      	orrs	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	071b      	lsls	r3, r3, #28
 800391c:	4957      	ldr	r1, [pc, #348]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d004      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003934:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003938:	d00a      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003942:	2b00      	cmp	r3, #0
 8003944:	d02e      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800394e:	d129      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003950:	4b4a      	ldr	r3, [pc, #296]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003956:	0c1b      	lsrs	r3, r3, #16
 8003958:	f003 0303 	and.w	r3, r3, #3
 800395c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800395e:	4b47      	ldr	r3, [pc, #284]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003960:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003964:	0f1b      	lsrs	r3, r3, #28
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	019a      	lsls	r2, r3, #6
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	041b      	lsls	r3, r3, #16
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	061b      	lsls	r3, r3, #24
 800397e:	431a      	orrs	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	071b      	lsls	r3, r3, #28
 8003984:	493d      	ldr	r1, [pc, #244]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800398c:	4b3b      	ldr	r3, [pc, #236]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800398e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003992:	f023 021f 	bic.w	r2, r3, #31
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	3b01      	subs	r3, #1
 800399c:	4937      	ldr	r1, [pc, #220]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d01d      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039b0:	4b32      	ldr	r3, [pc, #200]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039b6:	0e1b      	lsrs	r3, r3, #24
 80039b8:	f003 030f 	and.w	r3, r3, #15
 80039bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80039be:	4b2f      	ldr	r3, [pc, #188]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039c4:	0f1b      	lsrs	r3, r3, #28
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	019a      	lsls	r2, r3, #6
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	041b      	lsls	r3, r3, #16
 80039d8:	431a      	orrs	r2, r3
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	061b      	lsls	r3, r3, #24
 80039de:	431a      	orrs	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	071b      	lsls	r3, r3, #28
 80039e4:	4925      	ldr	r1, [pc, #148]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d011      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	019a      	lsls	r2, r3, #6
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	041b      	lsls	r3, r3, #16
 8003a04:	431a      	orrs	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	061b      	lsls	r3, r3, #24
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	071b      	lsls	r3, r3, #28
 8003a14:	4919      	ldr	r1, [pc, #100]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a1c:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a16      	ldr	r2, [pc, #88]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a28:	f7fd fb84 	bl	8001134 <HAL_GetTick>
 8003a2c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a30:	f7fd fb80 	bl	8001134 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b64      	cmp	r3, #100	; 0x64
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e0d7      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a42:	4b0e      	ldr	r3, [pc, #56]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0f0      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	f040 80cd 	bne.w	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003a56:	4b09      	ldr	r3, [pc, #36]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a08      	ldr	r2, [pc, #32]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a62:	f7fd fb67 	bl	8001134 <HAL_GetTick>
 8003a66:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a68:	e00a      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a6a:	f7fd fb63 	bl	8001134 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b64      	cmp	r3, #100	; 0x64
 8003a76:	d903      	bls.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e0ba      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003a7c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a80:	4b5e      	ldr	r3, [pc, #376]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a8c:	d0ed      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d009      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d02e      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d12a      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ab6:	4b51      	ldr	r3, [pc, #324]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abc:	0c1b      	lsrs	r3, r3, #16
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ac4:	4b4d      	ldr	r3, [pc, #308]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aca:	0f1b      	lsrs	r3, r3, #28
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	019a      	lsls	r2, r3, #6
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	041b      	lsls	r3, r3, #16
 8003adc:	431a      	orrs	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	061b      	lsls	r3, r3, #24
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	071b      	lsls	r3, r3, #28
 8003aea:	4944      	ldr	r1, [pc, #272]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003af2:	4b42      	ldr	r3, [pc, #264]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003af8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b00:	3b01      	subs	r3, #1
 8003b02:	021b      	lsls	r3, r3, #8
 8003b04:	493d      	ldr	r1, [pc, #244]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d022      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b20:	d11d      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b22:	4b36      	ldr	r3, [pc, #216]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b28:	0e1b      	lsrs	r3, r3, #24
 8003b2a:	f003 030f 	and.w	r3, r3, #15
 8003b2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b30:	4b32      	ldr	r3, [pc, #200]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b36:	0f1b      	lsrs	r3, r3, #28
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	019a      	lsls	r2, r3, #6
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	041b      	lsls	r3, r3, #16
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	061b      	lsls	r3, r3, #24
 8003b50:	431a      	orrs	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	071b      	lsls	r3, r3, #28
 8003b56:	4929      	ldr	r1, [pc, #164]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d028      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b6a:	4b24      	ldr	r3, [pc, #144]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b70:	0e1b      	lsrs	r3, r3, #24
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b78:	4b20      	ldr	r3, [pc, #128]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7e:	0c1b      	lsrs	r3, r3, #16
 8003b80:	f003 0303 	and.w	r3, r3, #3
 8003b84:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	019a      	lsls	r2, r3, #6
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	041b      	lsls	r3, r3, #16
 8003b90:	431a      	orrs	r2, r3
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	061b      	lsls	r3, r3, #24
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	071b      	lsls	r3, r3, #28
 8003b9e:	4917      	ldr	r1, [pc, #92]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ba6:	4b15      	ldr	r3, [pc, #84]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	4911      	ldr	r1, [pc, #68]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003bbc:	4b0f      	ldr	r3, [pc, #60]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a0e      	ldr	r2, [pc, #56]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bc8:	f7fd fab4 	bl	8001134 <HAL_GetTick>
 8003bcc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bd0:	f7fd fab0 	bl	8001134 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b64      	cmp	r3, #100	; 0x64
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e007      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003be2:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bee:	d1ef      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3720      	adds	r7, #32
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40023800 	.word	0x40023800

08003c00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e049      	b.n	8003ca6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d106      	bne.n	8003c2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7fd f8c6 	bl	8000db8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4610      	mov	r0, r2
 8003c40:	f000 fab4 	bl	80041ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d001      	beq.n	8003cc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e054      	b.n	8003d72 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0201 	orr.w	r2, r2, #1
 8003cde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a26      	ldr	r2, [pc, #152]	; (8003d80 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d022      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x80>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf2:	d01d      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x80>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a22      	ldr	r2, [pc, #136]	; (8003d84 <HAL_TIM_Base_Start_IT+0xd4>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d018      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x80>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a21      	ldr	r2, [pc, #132]	; (8003d88 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d013      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x80>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a1f      	ldr	r2, [pc, #124]	; (8003d8c <HAL_TIM_Base_Start_IT+0xdc>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d00e      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x80>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a1e      	ldr	r2, [pc, #120]	; (8003d90 <HAL_TIM_Base_Start_IT+0xe0>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d009      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x80>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a1c      	ldr	r2, [pc, #112]	; (8003d94 <HAL_TIM_Base_Start_IT+0xe4>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d004      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x80>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a1b      	ldr	r2, [pc, #108]	; (8003d98 <HAL_TIM_Base_Start_IT+0xe8>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d115      	bne.n	8003d5c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689a      	ldr	r2, [r3, #8]
 8003d36:	4b19      	ldr	r3, [pc, #100]	; (8003d9c <HAL_TIM_Base_Start_IT+0xec>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2b06      	cmp	r3, #6
 8003d40:	d015      	beq.n	8003d6e <HAL_TIM_Base_Start_IT+0xbe>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d48:	d011      	beq.n	8003d6e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f042 0201 	orr.w	r2, r2, #1
 8003d58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d5a:	e008      	b.n	8003d6e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	e000      	b.n	8003d70 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	40010000 	.word	0x40010000
 8003d84:	40000400 	.word	0x40000400
 8003d88:	40000800 	.word	0x40000800
 8003d8c:	40000c00 	.word	0x40000c00
 8003d90:	40010400 	.word	0x40010400
 8003d94:	40014000 	.word	0x40014000
 8003d98:	40001800 	.word	0x40001800
 8003d9c:	00010007 	.word	0x00010007

08003da0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d122      	bne.n	8003dfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d11b      	bne.n	8003dfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f06f 0202 	mvn.w	r2, #2
 8003dcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f9c4 	bl	8004170 <HAL_TIM_IC_CaptureCallback>
 8003de8:	e005      	b.n	8003df6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f9b6 	bl	800415c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 f9c7 	bl	8004184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f003 0304 	and.w	r3, r3, #4
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d122      	bne.n	8003e50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b04      	cmp	r3, #4
 8003e16:	d11b      	bne.n	8003e50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f06f 0204 	mvn.w	r2, #4
 8003e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2202      	movs	r2, #2
 8003e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f99a 	bl	8004170 <HAL_TIM_IC_CaptureCallback>
 8003e3c:	e005      	b.n	8003e4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f98c 	bl	800415c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f99d 	bl	8004184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b08      	cmp	r3, #8
 8003e5c:	d122      	bne.n	8003ea4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f003 0308 	and.w	r3, r3, #8
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d11b      	bne.n	8003ea4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f06f 0208 	mvn.w	r2, #8
 8003e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2204      	movs	r2, #4
 8003e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f970 	bl	8004170 <HAL_TIM_IC_CaptureCallback>
 8003e90:	e005      	b.n	8003e9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f962 	bl	800415c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 f973 	bl	8004184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	f003 0310 	and.w	r3, r3, #16
 8003eae:	2b10      	cmp	r3, #16
 8003eb0:	d122      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f003 0310 	and.w	r3, r3, #16
 8003ebc:	2b10      	cmp	r3, #16
 8003ebe:	d11b      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f06f 0210 	mvn.w	r2, #16
 8003ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2208      	movs	r2, #8
 8003ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f946 	bl	8004170 <HAL_TIM_IC_CaptureCallback>
 8003ee4:	e005      	b.n	8003ef2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f938 	bl	800415c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f949 	bl	8004184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d10e      	bne.n	8003f24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d107      	bne.n	8003f24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f06f 0201 	mvn.w	r2, #1
 8003f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7fc fde2 	bl	8000ae8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2e:	2b80      	cmp	r3, #128	; 0x80
 8003f30:	d10e      	bne.n	8003f50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f3c:	2b80      	cmp	r3, #128	; 0x80
 8003f3e:	d107      	bne.n	8003f50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 fb00 	bl	8004550 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f5e:	d10e      	bne.n	8003f7e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6a:	2b80      	cmp	r3, #128	; 0x80
 8003f6c:	d107      	bne.n	8003f7e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 faf3 	bl	8004564 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f88:	2b40      	cmp	r3, #64	; 0x40
 8003f8a:	d10e      	bne.n	8003faa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f96:	2b40      	cmp	r3, #64	; 0x40
 8003f98:	d107      	bne.n	8003faa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f8f7 	bl	8004198 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	f003 0320 	and.w	r3, r3, #32
 8003fb4:	2b20      	cmp	r3, #32
 8003fb6:	d10e      	bne.n	8003fd6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	f003 0320 	and.w	r3, r3, #32
 8003fc2:	2b20      	cmp	r3, #32
 8003fc4:	d107      	bne.n	8003fd6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f06f 0220 	mvn.w	r2, #32
 8003fce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 fab3 	bl	800453c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fd6:	bf00      	nop
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
	...

08003fe0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d101      	bne.n	8003ffc <HAL_TIM_ConfigClockSource+0x1c>
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	e0a9      	b.n	8004150 <HAL_TIM_ConfigClockSource+0x170>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	4b50      	ldr	r3, [pc, #320]	; (8004158 <HAL_TIM_ConfigClockSource+0x178>)
 8004018:	4013      	ands	r3, r2
 800401a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004022:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b40      	cmp	r3, #64	; 0x40
 8004032:	d067      	beq.n	8004104 <HAL_TIM_ConfigClockSource+0x124>
 8004034:	2b40      	cmp	r3, #64	; 0x40
 8004036:	d80b      	bhi.n	8004050 <HAL_TIM_ConfigClockSource+0x70>
 8004038:	2b10      	cmp	r3, #16
 800403a:	d073      	beq.n	8004124 <HAL_TIM_ConfigClockSource+0x144>
 800403c:	2b10      	cmp	r3, #16
 800403e:	d802      	bhi.n	8004046 <HAL_TIM_ConfigClockSource+0x66>
 8004040:	2b00      	cmp	r3, #0
 8004042:	d06f      	beq.n	8004124 <HAL_TIM_ConfigClockSource+0x144>
 8004044:	e077      	b.n	8004136 <HAL_TIM_ConfigClockSource+0x156>
 8004046:	2b20      	cmp	r3, #32
 8004048:	d06c      	beq.n	8004124 <HAL_TIM_ConfigClockSource+0x144>
 800404a:	2b30      	cmp	r3, #48	; 0x30
 800404c:	d06a      	beq.n	8004124 <HAL_TIM_ConfigClockSource+0x144>
 800404e:	e072      	b.n	8004136 <HAL_TIM_ConfigClockSource+0x156>
 8004050:	2b70      	cmp	r3, #112	; 0x70
 8004052:	d00d      	beq.n	8004070 <HAL_TIM_ConfigClockSource+0x90>
 8004054:	2b70      	cmp	r3, #112	; 0x70
 8004056:	d804      	bhi.n	8004062 <HAL_TIM_ConfigClockSource+0x82>
 8004058:	2b50      	cmp	r3, #80	; 0x50
 800405a:	d033      	beq.n	80040c4 <HAL_TIM_ConfigClockSource+0xe4>
 800405c:	2b60      	cmp	r3, #96	; 0x60
 800405e:	d041      	beq.n	80040e4 <HAL_TIM_ConfigClockSource+0x104>
 8004060:	e069      	b.n	8004136 <HAL_TIM_ConfigClockSource+0x156>
 8004062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004066:	d069      	beq.n	800413c <HAL_TIM_ConfigClockSource+0x15c>
 8004068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800406c:	d017      	beq.n	800409e <HAL_TIM_ConfigClockSource+0xbe>
 800406e:	e062      	b.n	8004136 <HAL_TIM_ConfigClockSource+0x156>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6818      	ldr	r0, [r3, #0]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	6899      	ldr	r1, [r3, #8]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f000 f9ae 	bl	80043e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004092:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	609a      	str	r2, [r3, #8]
      break;
 800409c:	e04f      	b.n	800413e <HAL_TIM_ConfigClockSource+0x15e>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6818      	ldr	r0, [r3, #0]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	6899      	ldr	r1, [r3, #8]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f000 f997 	bl	80043e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040c0:	609a      	str	r2, [r3, #8]
      break;
 80040c2:	e03c      	b.n	800413e <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6818      	ldr	r0, [r3, #0]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	6859      	ldr	r1, [r3, #4]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	461a      	mov	r2, r3
 80040d2:	f000 f90b 	bl	80042ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2150      	movs	r1, #80	; 0x50
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 f964 	bl	80043aa <TIM_ITRx_SetConfig>
      break;
 80040e2:	e02c      	b.n	800413e <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6818      	ldr	r0, [r3, #0]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	6859      	ldr	r1, [r3, #4]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	461a      	mov	r2, r3
 80040f2:	f000 f92a 	bl	800434a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2160      	movs	r1, #96	; 0x60
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 f954 	bl	80043aa <TIM_ITRx_SetConfig>
      break;
 8004102:	e01c      	b.n	800413e <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6818      	ldr	r0, [r3, #0]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	6859      	ldr	r1, [r3, #4]
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	461a      	mov	r2, r3
 8004112:	f000 f8eb 	bl	80042ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2140      	movs	r1, #64	; 0x40
 800411c:	4618      	mov	r0, r3
 800411e:	f000 f944 	bl	80043aa <TIM_ITRx_SetConfig>
      break;
 8004122:	e00c      	b.n	800413e <HAL_TIM_ConfigClockSource+0x15e>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4619      	mov	r1, r3
 800412e:	4610      	mov	r0, r2
 8004130:	f000 f93b 	bl	80043aa <TIM_ITRx_SetConfig>
      break;
 8004134:	e003      	b.n	800413e <HAL_TIM_ConfigClockSource+0x15e>
    }

    default:
      status = HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	73fb      	strb	r3, [r7, #15]
      break;
 800413a:	e000      	b.n	800413e <HAL_TIM_ConfigClockSource+0x15e>
      break;
 800413c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800414e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	fffeff88 	.word	0xfffeff88

0800415c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a40      	ldr	r2, [pc, #256]	; (80042c0 <TIM_Base_SetConfig+0x114>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d013      	beq.n	80041ec <TIM_Base_SetConfig+0x40>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ca:	d00f      	beq.n	80041ec <TIM_Base_SetConfig+0x40>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a3d      	ldr	r2, [pc, #244]	; (80042c4 <TIM_Base_SetConfig+0x118>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d00b      	beq.n	80041ec <TIM_Base_SetConfig+0x40>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a3c      	ldr	r2, [pc, #240]	; (80042c8 <TIM_Base_SetConfig+0x11c>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d007      	beq.n	80041ec <TIM_Base_SetConfig+0x40>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a3b      	ldr	r2, [pc, #236]	; (80042cc <TIM_Base_SetConfig+0x120>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d003      	beq.n	80041ec <TIM_Base_SetConfig+0x40>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a3a      	ldr	r2, [pc, #232]	; (80042d0 <TIM_Base_SetConfig+0x124>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d108      	bne.n	80041fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a2f      	ldr	r2, [pc, #188]	; (80042c0 <TIM_Base_SetConfig+0x114>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d02b      	beq.n	800425e <TIM_Base_SetConfig+0xb2>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800420c:	d027      	beq.n	800425e <TIM_Base_SetConfig+0xb2>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a2c      	ldr	r2, [pc, #176]	; (80042c4 <TIM_Base_SetConfig+0x118>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d023      	beq.n	800425e <TIM_Base_SetConfig+0xb2>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a2b      	ldr	r2, [pc, #172]	; (80042c8 <TIM_Base_SetConfig+0x11c>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d01f      	beq.n	800425e <TIM_Base_SetConfig+0xb2>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a2a      	ldr	r2, [pc, #168]	; (80042cc <TIM_Base_SetConfig+0x120>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d01b      	beq.n	800425e <TIM_Base_SetConfig+0xb2>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a29      	ldr	r2, [pc, #164]	; (80042d0 <TIM_Base_SetConfig+0x124>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d017      	beq.n	800425e <TIM_Base_SetConfig+0xb2>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a28      	ldr	r2, [pc, #160]	; (80042d4 <TIM_Base_SetConfig+0x128>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d013      	beq.n	800425e <TIM_Base_SetConfig+0xb2>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a27      	ldr	r2, [pc, #156]	; (80042d8 <TIM_Base_SetConfig+0x12c>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d00f      	beq.n	800425e <TIM_Base_SetConfig+0xb2>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a26      	ldr	r2, [pc, #152]	; (80042dc <TIM_Base_SetConfig+0x130>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d00b      	beq.n	800425e <TIM_Base_SetConfig+0xb2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a25      	ldr	r2, [pc, #148]	; (80042e0 <TIM_Base_SetConfig+0x134>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d007      	beq.n	800425e <TIM_Base_SetConfig+0xb2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a24      	ldr	r2, [pc, #144]	; (80042e4 <TIM_Base_SetConfig+0x138>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d003      	beq.n	800425e <TIM_Base_SetConfig+0xb2>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a23      	ldr	r2, [pc, #140]	; (80042e8 <TIM_Base_SetConfig+0x13c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d108      	bne.n	8004270 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004264:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	4313      	orrs	r3, r2
 800426e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a0a      	ldr	r2, [pc, #40]	; (80042c0 <TIM_Base_SetConfig+0x114>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d003      	beq.n	80042a4 <TIM_Base_SetConfig+0xf8>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a0c      	ldr	r2, [pc, #48]	; (80042d0 <TIM_Base_SetConfig+0x124>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d103      	bne.n	80042ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	615a      	str	r2, [r3, #20]
}
 80042b2:	bf00      	nop
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40010000 	.word	0x40010000
 80042c4:	40000400 	.word	0x40000400
 80042c8:	40000800 	.word	0x40000800
 80042cc:	40000c00 	.word	0x40000c00
 80042d0:	40010400 	.word	0x40010400
 80042d4:	40014000 	.word	0x40014000
 80042d8:	40014400 	.word	0x40014400
 80042dc:	40014800 	.word	0x40014800
 80042e0:	40001800 	.word	0x40001800
 80042e4:	40001c00 	.word	0x40001c00
 80042e8:	40002000 	.word	0x40002000

080042ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b087      	sub	sp, #28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	f023 0201 	bic.w	r2, r3, #1
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004316:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	4313      	orrs	r3, r2
 8004320:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f023 030a 	bic.w	r3, r3, #10
 8004328:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	4313      	orrs	r3, r2
 8004330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	621a      	str	r2, [r3, #32]
}
 800433e:	bf00      	nop
 8004340:	371c      	adds	r7, #28
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800434a:	b480      	push	{r7}
 800434c:	b087      	sub	sp, #28
 800434e:	af00      	add	r7, sp, #0
 8004350:	60f8      	str	r0, [r7, #12]
 8004352:	60b9      	str	r1, [r7, #8]
 8004354:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	f023 0210 	bic.w	r2, r3, #16
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004374:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	031b      	lsls	r3, r3, #12
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	4313      	orrs	r3, r2
 800437e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004386:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	011b      	lsls	r3, r3, #4
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	4313      	orrs	r3, r2
 8004390:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	621a      	str	r2, [r3, #32]
}
 800439e:	bf00      	nop
 80043a0:	371c      	adds	r7, #28
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b085      	sub	sp, #20
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
 80043b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	f043 0307 	orr.w	r3, r3, #7
 80043cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	609a      	str	r2, [r3, #8]
}
 80043d4:	bf00      	nop
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b087      	sub	sp, #28
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
 80043ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	021a      	lsls	r2, r3, #8
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	431a      	orrs	r2, r3
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	4313      	orrs	r3, r2
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	4313      	orrs	r3, r2
 800440c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	609a      	str	r2, [r3, #8]
}
 8004414:	bf00      	nop
 8004416:	371c      	adds	r7, #28
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004430:	2b01      	cmp	r3, #1
 8004432:	d101      	bne.n	8004438 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004434:	2302      	movs	r3, #2
 8004436:	e06d      	b.n	8004514 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2202      	movs	r2, #2
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a30      	ldr	r2, [pc, #192]	; (8004520 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d004      	beq.n	800446c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a2f      	ldr	r2, [pc, #188]	; (8004524 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d108      	bne.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004472:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	4313      	orrs	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004484:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	4313      	orrs	r3, r2
 800448e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a20      	ldr	r2, [pc, #128]	; (8004520 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d022      	beq.n	80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044aa:	d01d      	beq.n	80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a1d      	ldr	r2, [pc, #116]	; (8004528 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d018      	beq.n	80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a1c      	ldr	r2, [pc, #112]	; (800452c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d013      	beq.n	80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a1a      	ldr	r2, [pc, #104]	; (8004530 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00e      	beq.n	80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a15      	ldr	r2, [pc, #84]	; (8004524 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d009      	beq.n	80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a16      	ldr	r2, [pc, #88]	; (8004534 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d004      	beq.n	80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a15      	ldr	r2, [pc, #84]	; (8004538 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d10c      	bne.n	8004502 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	40010000 	.word	0x40010000
 8004524:	40010400 	.word	0x40010400
 8004528:	40000400 	.word	0x40000400
 800452c:	40000800 	.word	0x40000800
 8004530:	40000c00 	.word	0x40000c00
 8004534:	40014000 	.word	0x40014000
 8004538:	40001800 	.word	0x40001800

0800453c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e040      	b.n	800460c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7fc fc30 	bl	8000e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2224      	movs	r2, #36	; 0x24
 80045a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 0201 	bic.w	r2, r2, #1
 80045b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f8c0 	bl	800473c <UART_SetConfig>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d101      	bne.n	80045c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e022      	b.n	800460c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d002      	beq.n	80045d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 fb14 	bl	8004bfc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689a      	ldr	r2, [r3, #8]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0201 	orr.w	r2, r2, #1
 8004602:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 fb9b 	bl	8004d40 <UART_CheckIdleState>
 800460a:	4603      	mov	r3, r0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3708      	adds	r7, #8
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b08a      	sub	sp, #40	; 0x28
 8004618:	af02      	add	r7, sp, #8
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	603b      	str	r3, [r7, #0]
 8004620:	4613      	mov	r3, r2
 8004622:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004628:	2b20      	cmp	r3, #32
 800462a:	f040 8081 	bne.w	8004730 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <HAL_UART_Transmit+0x26>
 8004634:	88fb      	ldrh	r3, [r7, #6]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e079      	b.n	8004732 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004644:	2b01      	cmp	r3, #1
 8004646:	d101      	bne.n	800464c <HAL_UART_Transmit+0x38>
 8004648:	2302      	movs	r3, #2
 800464a:	e072      	b.n	8004732 <HAL_UART_Transmit+0x11e>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2221      	movs	r2, #33	; 0x21
 8004660:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004662:	f7fc fd67 	bl	8001134 <HAL_GetTick>
 8004666:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	88fa      	ldrh	r2, [r7, #6]
 800466c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	88fa      	ldrh	r2, [r7, #6]
 8004674:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004680:	d108      	bne.n	8004694 <HAL_UART_Transmit+0x80>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d104      	bne.n	8004694 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800468a:	2300      	movs	r3, #0
 800468c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	61bb      	str	r3, [r7, #24]
 8004692:	e003      	b.n	800469c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004698:	2300      	movs	r3, #0
 800469a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80046a4:	e02c      	b.n	8004700 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	2200      	movs	r2, #0
 80046ae:	2180      	movs	r1, #128	; 0x80
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 fb78 	bl	8004da6 <UART_WaitOnFlagUntilTimeout>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d001      	beq.n	80046c0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e038      	b.n	8004732 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10b      	bne.n	80046de <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	881b      	ldrh	r3, [r3, #0]
 80046ca:	461a      	mov	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	3302      	adds	r3, #2
 80046da:	61bb      	str	r3, [r7, #24]
 80046dc:	e007      	b.n	80046ee <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	781a      	ldrb	r2, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	3301      	adds	r3, #1
 80046ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	3b01      	subs	r3, #1
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004706:	b29b      	uxth	r3, r3
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1cc      	bne.n	80046a6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	2200      	movs	r2, #0
 8004714:	2140      	movs	r1, #64	; 0x40
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 fb45 	bl	8004da6 <UART_WaitOnFlagUntilTimeout>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e005      	b.n	8004732 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2220      	movs	r2, #32
 800472a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800472c:	2300      	movs	r3, #0
 800472e:	e000      	b.n	8004732 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004730:	2302      	movs	r3, #2
  }
}
 8004732:	4618      	mov	r0, r3
 8004734:	3720      	adds	r7, #32
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
	...

0800473c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b088      	sub	sp, #32
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004744:	2300      	movs	r3, #0
 8004746:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	431a      	orrs	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	431a      	orrs	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	69db      	ldr	r3, [r3, #28]
 800475c:	4313      	orrs	r3, r2
 800475e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	4bb1      	ldr	r3, [pc, #708]	; (8004a2c <UART_SetConfig+0x2f0>)
 8004768:	4013      	ands	r3, r2
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6812      	ldr	r2, [r2, #0]
 800476e:	6979      	ldr	r1, [r7, #20]
 8004770:	430b      	orrs	r3, r1
 8004772:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	4313      	orrs	r3, r2
 8004798:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a9f      	ldr	r2, [pc, #636]	; (8004a30 <UART_SetConfig+0x2f4>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d121      	bne.n	80047fc <UART_SetConfig+0xc0>
 80047b8:	4b9e      	ldr	r3, [pc, #632]	; (8004a34 <UART_SetConfig+0x2f8>)
 80047ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	2b03      	cmp	r3, #3
 80047c4:	d816      	bhi.n	80047f4 <UART_SetConfig+0xb8>
 80047c6:	a201      	add	r2, pc, #4	; (adr r2, 80047cc <UART_SetConfig+0x90>)
 80047c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047cc:	080047dd 	.word	0x080047dd
 80047d0:	080047e9 	.word	0x080047e9
 80047d4:	080047e3 	.word	0x080047e3
 80047d8:	080047ef 	.word	0x080047ef
 80047dc:	2301      	movs	r3, #1
 80047de:	77fb      	strb	r3, [r7, #31]
 80047e0:	e151      	b.n	8004a86 <UART_SetConfig+0x34a>
 80047e2:	2302      	movs	r3, #2
 80047e4:	77fb      	strb	r3, [r7, #31]
 80047e6:	e14e      	b.n	8004a86 <UART_SetConfig+0x34a>
 80047e8:	2304      	movs	r3, #4
 80047ea:	77fb      	strb	r3, [r7, #31]
 80047ec:	e14b      	b.n	8004a86 <UART_SetConfig+0x34a>
 80047ee:	2308      	movs	r3, #8
 80047f0:	77fb      	strb	r3, [r7, #31]
 80047f2:	e148      	b.n	8004a86 <UART_SetConfig+0x34a>
 80047f4:	2310      	movs	r3, #16
 80047f6:	77fb      	strb	r3, [r7, #31]
 80047f8:	bf00      	nop
 80047fa:	e144      	b.n	8004a86 <UART_SetConfig+0x34a>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a8d      	ldr	r2, [pc, #564]	; (8004a38 <UART_SetConfig+0x2fc>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d134      	bne.n	8004870 <UART_SetConfig+0x134>
 8004806:	4b8b      	ldr	r3, [pc, #556]	; (8004a34 <UART_SetConfig+0x2f8>)
 8004808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480c:	f003 030c 	and.w	r3, r3, #12
 8004810:	2b0c      	cmp	r3, #12
 8004812:	d829      	bhi.n	8004868 <UART_SetConfig+0x12c>
 8004814:	a201      	add	r2, pc, #4	; (adr r2, 800481c <UART_SetConfig+0xe0>)
 8004816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481a:	bf00      	nop
 800481c:	08004851 	.word	0x08004851
 8004820:	08004869 	.word	0x08004869
 8004824:	08004869 	.word	0x08004869
 8004828:	08004869 	.word	0x08004869
 800482c:	0800485d 	.word	0x0800485d
 8004830:	08004869 	.word	0x08004869
 8004834:	08004869 	.word	0x08004869
 8004838:	08004869 	.word	0x08004869
 800483c:	08004857 	.word	0x08004857
 8004840:	08004869 	.word	0x08004869
 8004844:	08004869 	.word	0x08004869
 8004848:	08004869 	.word	0x08004869
 800484c:	08004863 	.word	0x08004863
 8004850:	2300      	movs	r3, #0
 8004852:	77fb      	strb	r3, [r7, #31]
 8004854:	e117      	b.n	8004a86 <UART_SetConfig+0x34a>
 8004856:	2302      	movs	r3, #2
 8004858:	77fb      	strb	r3, [r7, #31]
 800485a:	e114      	b.n	8004a86 <UART_SetConfig+0x34a>
 800485c:	2304      	movs	r3, #4
 800485e:	77fb      	strb	r3, [r7, #31]
 8004860:	e111      	b.n	8004a86 <UART_SetConfig+0x34a>
 8004862:	2308      	movs	r3, #8
 8004864:	77fb      	strb	r3, [r7, #31]
 8004866:	e10e      	b.n	8004a86 <UART_SetConfig+0x34a>
 8004868:	2310      	movs	r3, #16
 800486a:	77fb      	strb	r3, [r7, #31]
 800486c:	bf00      	nop
 800486e:	e10a      	b.n	8004a86 <UART_SetConfig+0x34a>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a71      	ldr	r2, [pc, #452]	; (8004a3c <UART_SetConfig+0x300>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d120      	bne.n	80048bc <UART_SetConfig+0x180>
 800487a:	4b6e      	ldr	r3, [pc, #440]	; (8004a34 <UART_SetConfig+0x2f8>)
 800487c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004880:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004884:	2b10      	cmp	r3, #16
 8004886:	d00f      	beq.n	80048a8 <UART_SetConfig+0x16c>
 8004888:	2b10      	cmp	r3, #16
 800488a:	d802      	bhi.n	8004892 <UART_SetConfig+0x156>
 800488c:	2b00      	cmp	r3, #0
 800488e:	d005      	beq.n	800489c <UART_SetConfig+0x160>
 8004890:	e010      	b.n	80048b4 <UART_SetConfig+0x178>
 8004892:	2b20      	cmp	r3, #32
 8004894:	d005      	beq.n	80048a2 <UART_SetConfig+0x166>
 8004896:	2b30      	cmp	r3, #48	; 0x30
 8004898:	d009      	beq.n	80048ae <UART_SetConfig+0x172>
 800489a:	e00b      	b.n	80048b4 <UART_SetConfig+0x178>
 800489c:	2300      	movs	r3, #0
 800489e:	77fb      	strb	r3, [r7, #31]
 80048a0:	e0f1      	b.n	8004a86 <UART_SetConfig+0x34a>
 80048a2:	2302      	movs	r3, #2
 80048a4:	77fb      	strb	r3, [r7, #31]
 80048a6:	e0ee      	b.n	8004a86 <UART_SetConfig+0x34a>
 80048a8:	2304      	movs	r3, #4
 80048aa:	77fb      	strb	r3, [r7, #31]
 80048ac:	e0eb      	b.n	8004a86 <UART_SetConfig+0x34a>
 80048ae:	2308      	movs	r3, #8
 80048b0:	77fb      	strb	r3, [r7, #31]
 80048b2:	e0e8      	b.n	8004a86 <UART_SetConfig+0x34a>
 80048b4:	2310      	movs	r3, #16
 80048b6:	77fb      	strb	r3, [r7, #31]
 80048b8:	bf00      	nop
 80048ba:	e0e4      	b.n	8004a86 <UART_SetConfig+0x34a>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a5f      	ldr	r2, [pc, #380]	; (8004a40 <UART_SetConfig+0x304>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d120      	bne.n	8004908 <UART_SetConfig+0x1cc>
 80048c6:	4b5b      	ldr	r3, [pc, #364]	; (8004a34 <UART_SetConfig+0x2f8>)
 80048c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80048d0:	2b40      	cmp	r3, #64	; 0x40
 80048d2:	d00f      	beq.n	80048f4 <UART_SetConfig+0x1b8>
 80048d4:	2b40      	cmp	r3, #64	; 0x40
 80048d6:	d802      	bhi.n	80048de <UART_SetConfig+0x1a2>
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d005      	beq.n	80048e8 <UART_SetConfig+0x1ac>
 80048dc:	e010      	b.n	8004900 <UART_SetConfig+0x1c4>
 80048de:	2b80      	cmp	r3, #128	; 0x80
 80048e0:	d005      	beq.n	80048ee <UART_SetConfig+0x1b2>
 80048e2:	2bc0      	cmp	r3, #192	; 0xc0
 80048e4:	d009      	beq.n	80048fa <UART_SetConfig+0x1be>
 80048e6:	e00b      	b.n	8004900 <UART_SetConfig+0x1c4>
 80048e8:	2300      	movs	r3, #0
 80048ea:	77fb      	strb	r3, [r7, #31]
 80048ec:	e0cb      	b.n	8004a86 <UART_SetConfig+0x34a>
 80048ee:	2302      	movs	r3, #2
 80048f0:	77fb      	strb	r3, [r7, #31]
 80048f2:	e0c8      	b.n	8004a86 <UART_SetConfig+0x34a>
 80048f4:	2304      	movs	r3, #4
 80048f6:	77fb      	strb	r3, [r7, #31]
 80048f8:	e0c5      	b.n	8004a86 <UART_SetConfig+0x34a>
 80048fa:	2308      	movs	r3, #8
 80048fc:	77fb      	strb	r3, [r7, #31]
 80048fe:	e0c2      	b.n	8004a86 <UART_SetConfig+0x34a>
 8004900:	2310      	movs	r3, #16
 8004902:	77fb      	strb	r3, [r7, #31]
 8004904:	bf00      	nop
 8004906:	e0be      	b.n	8004a86 <UART_SetConfig+0x34a>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a4d      	ldr	r2, [pc, #308]	; (8004a44 <UART_SetConfig+0x308>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d124      	bne.n	800495c <UART_SetConfig+0x220>
 8004912:	4b48      	ldr	r3, [pc, #288]	; (8004a34 <UART_SetConfig+0x2f8>)
 8004914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004918:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800491c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004920:	d012      	beq.n	8004948 <UART_SetConfig+0x20c>
 8004922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004926:	d802      	bhi.n	800492e <UART_SetConfig+0x1f2>
 8004928:	2b00      	cmp	r3, #0
 800492a:	d007      	beq.n	800493c <UART_SetConfig+0x200>
 800492c:	e012      	b.n	8004954 <UART_SetConfig+0x218>
 800492e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004932:	d006      	beq.n	8004942 <UART_SetConfig+0x206>
 8004934:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004938:	d009      	beq.n	800494e <UART_SetConfig+0x212>
 800493a:	e00b      	b.n	8004954 <UART_SetConfig+0x218>
 800493c:	2300      	movs	r3, #0
 800493e:	77fb      	strb	r3, [r7, #31]
 8004940:	e0a1      	b.n	8004a86 <UART_SetConfig+0x34a>
 8004942:	2302      	movs	r3, #2
 8004944:	77fb      	strb	r3, [r7, #31]
 8004946:	e09e      	b.n	8004a86 <UART_SetConfig+0x34a>
 8004948:	2304      	movs	r3, #4
 800494a:	77fb      	strb	r3, [r7, #31]
 800494c:	e09b      	b.n	8004a86 <UART_SetConfig+0x34a>
 800494e:	2308      	movs	r3, #8
 8004950:	77fb      	strb	r3, [r7, #31]
 8004952:	e098      	b.n	8004a86 <UART_SetConfig+0x34a>
 8004954:	2310      	movs	r3, #16
 8004956:	77fb      	strb	r3, [r7, #31]
 8004958:	bf00      	nop
 800495a:	e094      	b.n	8004a86 <UART_SetConfig+0x34a>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a39      	ldr	r2, [pc, #228]	; (8004a48 <UART_SetConfig+0x30c>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d124      	bne.n	80049b0 <UART_SetConfig+0x274>
 8004966:	4b33      	ldr	r3, [pc, #204]	; (8004a34 <UART_SetConfig+0x2f8>)
 8004968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800496c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004974:	d012      	beq.n	800499c <UART_SetConfig+0x260>
 8004976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800497a:	d802      	bhi.n	8004982 <UART_SetConfig+0x246>
 800497c:	2b00      	cmp	r3, #0
 800497e:	d007      	beq.n	8004990 <UART_SetConfig+0x254>
 8004980:	e012      	b.n	80049a8 <UART_SetConfig+0x26c>
 8004982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004986:	d006      	beq.n	8004996 <UART_SetConfig+0x25a>
 8004988:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800498c:	d009      	beq.n	80049a2 <UART_SetConfig+0x266>
 800498e:	e00b      	b.n	80049a8 <UART_SetConfig+0x26c>
 8004990:	2301      	movs	r3, #1
 8004992:	77fb      	strb	r3, [r7, #31]
 8004994:	e077      	b.n	8004a86 <UART_SetConfig+0x34a>
 8004996:	2302      	movs	r3, #2
 8004998:	77fb      	strb	r3, [r7, #31]
 800499a:	e074      	b.n	8004a86 <UART_SetConfig+0x34a>
 800499c:	2304      	movs	r3, #4
 800499e:	77fb      	strb	r3, [r7, #31]
 80049a0:	e071      	b.n	8004a86 <UART_SetConfig+0x34a>
 80049a2:	2308      	movs	r3, #8
 80049a4:	77fb      	strb	r3, [r7, #31]
 80049a6:	e06e      	b.n	8004a86 <UART_SetConfig+0x34a>
 80049a8:	2310      	movs	r3, #16
 80049aa:	77fb      	strb	r3, [r7, #31]
 80049ac:	bf00      	nop
 80049ae:	e06a      	b.n	8004a86 <UART_SetConfig+0x34a>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a25      	ldr	r2, [pc, #148]	; (8004a4c <UART_SetConfig+0x310>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d124      	bne.n	8004a04 <UART_SetConfig+0x2c8>
 80049ba:	4b1e      	ldr	r3, [pc, #120]	; (8004a34 <UART_SetConfig+0x2f8>)
 80049bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80049c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049c8:	d012      	beq.n	80049f0 <UART_SetConfig+0x2b4>
 80049ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ce:	d802      	bhi.n	80049d6 <UART_SetConfig+0x29a>
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d007      	beq.n	80049e4 <UART_SetConfig+0x2a8>
 80049d4:	e012      	b.n	80049fc <UART_SetConfig+0x2c0>
 80049d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049da:	d006      	beq.n	80049ea <UART_SetConfig+0x2ae>
 80049dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049e0:	d009      	beq.n	80049f6 <UART_SetConfig+0x2ba>
 80049e2:	e00b      	b.n	80049fc <UART_SetConfig+0x2c0>
 80049e4:	2300      	movs	r3, #0
 80049e6:	77fb      	strb	r3, [r7, #31]
 80049e8:	e04d      	b.n	8004a86 <UART_SetConfig+0x34a>
 80049ea:	2302      	movs	r3, #2
 80049ec:	77fb      	strb	r3, [r7, #31]
 80049ee:	e04a      	b.n	8004a86 <UART_SetConfig+0x34a>
 80049f0:	2304      	movs	r3, #4
 80049f2:	77fb      	strb	r3, [r7, #31]
 80049f4:	e047      	b.n	8004a86 <UART_SetConfig+0x34a>
 80049f6:	2308      	movs	r3, #8
 80049f8:	77fb      	strb	r3, [r7, #31]
 80049fa:	e044      	b.n	8004a86 <UART_SetConfig+0x34a>
 80049fc:	2310      	movs	r3, #16
 80049fe:	77fb      	strb	r3, [r7, #31]
 8004a00:	bf00      	nop
 8004a02:	e040      	b.n	8004a86 <UART_SetConfig+0x34a>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a11      	ldr	r2, [pc, #68]	; (8004a50 <UART_SetConfig+0x314>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d139      	bne.n	8004a82 <UART_SetConfig+0x346>
 8004a0e:	4b09      	ldr	r3, [pc, #36]	; (8004a34 <UART_SetConfig+0x2f8>)
 8004a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004a18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a1c:	d027      	beq.n	8004a6e <UART_SetConfig+0x332>
 8004a1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a22:	d817      	bhi.n	8004a54 <UART_SetConfig+0x318>
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d01c      	beq.n	8004a62 <UART_SetConfig+0x326>
 8004a28:	e027      	b.n	8004a7a <UART_SetConfig+0x33e>
 8004a2a:	bf00      	nop
 8004a2c:	efff69f3 	.word	0xefff69f3
 8004a30:	40011000 	.word	0x40011000
 8004a34:	40023800 	.word	0x40023800
 8004a38:	40004400 	.word	0x40004400
 8004a3c:	40004800 	.word	0x40004800
 8004a40:	40004c00 	.word	0x40004c00
 8004a44:	40005000 	.word	0x40005000
 8004a48:	40011400 	.word	0x40011400
 8004a4c:	40007800 	.word	0x40007800
 8004a50:	40007c00 	.word	0x40007c00
 8004a54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a58:	d006      	beq.n	8004a68 <UART_SetConfig+0x32c>
 8004a5a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a5e:	d009      	beq.n	8004a74 <UART_SetConfig+0x338>
 8004a60:	e00b      	b.n	8004a7a <UART_SetConfig+0x33e>
 8004a62:	2300      	movs	r3, #0
 8004a64:	77fb      	strb	r3, [r7, #31]
 8004a66:	e00e      	b.n	8004a86 <UART_SetConfig+0x34a>
 8004a68:	2302      	movs	r3, #2
 8004a6a:	77fb      	strb	r3, [r7, #31]
 8004a6c:	e00b      	b.n	8004a86 <UART_SetConfig+0x34a>
 8004a6e:	2304      	movs	r3, #4
 8004a70:	77fb      	strb	r3, [r7, #31]
 8004a72:	e008      	b.n	8004a86 <UART_SetConfig+0x34a>
 8004a74:	2308      	movs	r3, #8
 8004a76:	77fb      	strb	r3, [r7, #31]
 8004a78:	e005      	b.n	8004a86 <UART_SetConfig+0x34a>
 8004a7a:	2310      	movs	r3, #16
 8004a7c:	77fb      	strb	r3, [r7, #31]
 8004a7e:	bf00      	nop
 8004a80:	e001      	b.n	8004a86 <UART_SetConfig+0x34a>
 8004a82:	2310      	movs	r3, #16
 8004a84:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a8e:	d15a      	bne.n	8004b46 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004a90:	7ffb      	ldrb	r3, [r7, #31]
 8004a92:	2b08      	cmp	r3, #8
 8004a94:	d827      	bhi.n	8004ae6 <UART_SetConfig+0x3aa>
 8004a96:	a201      	add	r2, pc, #4	; (adr r2, 8004a9c <UART_SetConfig+0x360>)
 8004a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9c:	08004ac1 	.word	0x08004ac1
 8004aa0:	08004ac9 	.word	0x08004ac9
 8004aa4:	08004ad1 	.word	0x08004ad1
 8004aa8:	08004ae7 	.word	0x08004ae7
 8004aac:	08004ad7 	.word	0x08004ad7
 8004ab0:	08004ae7 	.word	0x08004ae7
 8004ab4:	08004ae7 	.word	0x08004ae7
 8004ab8:	08004ae7 	.word	0x08004ae7
 8004abc:	08004adf 	.word	0x08004adf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ac0:	f7fe fc86 	bl	80033d0 <HAL_RCC_GetPCLK1Freq>
 8004ac4:	61b8      	str	r0, [r7, #24]
        break;
 8004ac6:	e013      	b.n	8004af0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ac8:	f7fe fc96 	bl	80033f8 <HAL_RCC_GetPCLK2Freq>
 8004acc:	61b8      	str	r0, [r7, #24]
        break;
 8004ace:	e00f      	b.n	8004af0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ad0:	4b49      	ldr	r3, [pc, #292]	; (8004bf8 <UART_SetConfig+0x4bc>)
 8004ad2:	61bb      	str	r3, [r7, #24]
        break;
 8004ad4:	e00c      	b.n	8004af0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ad6:	f7fe fb97 	bl	8003208 <HAL_RCC_GetSysClockFreq>
 8004ada:	61b8      	str	r0, [r7, #24]
        break;
 8004adc:	e008      	b.n	8004af0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ae2:	61bb      	str	r3, [r7, #24]
        break;
 8004ae4:	e004      	b.n	8004af0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	77bb      	strb	r3, [r7, #30]
        break;
 8004aee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d074      	beq.n	8004be0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	005a      	lsls	r2, r3, #1
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	085b      	lsrs	r3, r3, #1
 8004b00:	441a      	add	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	2b0f      	cmp	r3, #15
 8004b10:	d916      	bls.n	8004b40 <UART_SetConfig+0x404>
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b18:	d212      	bcs.n	8004b40 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	f023 030f 	bic.w	r3, r3, #15
 8004b22:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	085b      	lsrs	r3, r3, #1
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	f003 0307 	and.w	r3, r3, #7
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	89fb      	ldrh	r3, [r7, #14]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	89fa      	ldrh	r2, [r7, #14]
 8004b3c:	60da      	str	r2, [r3, #12]
 8004b3e:	e04f      	b.n	8004be0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	77bb      	strb	r3, [r7, #30]
 8004b44:	e04c      	b.n	8004be0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b46:	7ffb      	ldrb	r3, [r7, #31]
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d828      	bhi.n	8004b9e <UART_SetConfig+0x462>
 8004b4c:	a201      	add	r2, pc, #4	; (adr r2, 8004b54 <UART_SetConfig+0x418>)
 8004b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b52:	bf00      	nop
 8004b54:	08004b79 	.word	0x08004b79
 8004b58:	08004b81 	.word	0x08004b81
 8004b5c:	08004b89 	.word	0x08004b89
 8004b60:	08004b9f 	.word	0x08004b9f
 8004b64:	08004b8f 	.word	0x08004b8f
 8004b68:	08004b9f 	.word	0x08004b9f
 8004b6c:	08004b9f 	.word	0x08004b9f
 8004b70:	08004b9f 	.word	0x08004b9f
 8004b74:	08004b97 	.word	0x08004b97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b78:	f7fe fc2a 	bl	80033d0 <HAL_RCC_GetPCLK1Freq>
 8004b7c:	61b8      	str	r0, [r7, #24]
        break;
 8004b7e:	e013      	b.n	8004ba8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b80:	f7fe fc3a 	bl	80033f8 <HAL_RCC_GetPCLK2Freq>
 8004b84:	61b8      	str	r0, [r7, #24]
        break;
 8004b86:	e00f      	b.n	8004ba8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b88:	4b1b      	ldr	r3, [pc, #108]	; (8004bf8 <UART_SetConfig+0x4bc>)
 8004b8a:	61bb      	str	r3, [r7, #24]
        break;
 8004b8c:	e00c      	b.n	8004ba8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b8e:	f7fe fb3b 	bl	8003208 <HAL_RCC_GetSysClockFreq>
 8004b92:	61b8      	str	r0, [r7, #24]
        break;
 8004b94:	e008      	b.n	8004ba8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b9a:	61bb      	str	r3, [r7, #24]
        break;
 8004b9c:	e004      	b.n	8004ba8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	77bb      	strb	r3, [r7, #30]
        break;
 8004ba6:	bf00      	nop
    }

    if (pclk != 0U)
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d018      	beq.n	8004be0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	085a      	lsrs	r2, r3, #1
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	441a      	add	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	2b0f      	cmp	r3, #15
 8004bc6:	d909      	bls.n	8004bdc <UART_SetConfig+0x4a0>
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bce:	d205      	bcs.n	8004bdc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	60da      	str	r2, [r3, #12]
 8004bda:	e001      	b.n	8004be0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004bec:	7fbb      	ldrb	r3, [r7, #30]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3720      	adds	r7, #32
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	00f42400 	.word	0x00f42400

08004bfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00a      	beq.n	8004c26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	f003 0304 	and.w	r3, r3, #4
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00a      	beq.n	8004c6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	430a      	orrs	r2, r1
 8004c68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	f003 0308 	and.w	r3, r3, #8
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00a      	beq.n	8004c8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	f003 0310 	and.w	r3, r3, #16
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00a      	beq.n	8004cae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	430a      	orrs	r2, r1
 8004cac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	f003 0320 	and.w	r3, r3, #32
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d01a      	beq.n	8004d12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cfa:	d10a      	bne.n	8004d12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00a      	beq.n	8004d34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	430a      	orrs	r2, r1
 8004d32:	605a      	str	r2, [r3, #4]
  }
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af02      	add	r7, sp, #8
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d50:	f7fc f9f0 	bl	8001134 <HAL_GetTick>
 8004d54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0308 	and.w	r3, r3, #8
 8004d60:	2b08      	cmp	r3, #8
 8004d62:	d10e      	bne.n	8004d82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f817 	bl	8004da6 <UART_WaitOnFlagUntilTimeout>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e00d      	b.n	8004d9e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2220      	movs	r2, #32
 8004d86:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b09c      	sub	sp, #112	; 0x70
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	60f8      	str	r0, [r7, #12]
 8004dae:	60b9      	str	r1, [r7, #8]
 8004db0:	603b      	str	r3, [r7, #0]
 8004db2:	4613      	mov	r3, r2
 8004db4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004db6:	e0a5      	b.n	8004f04 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004db8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dbe:	f000 80a1 	beq.w	8004f04 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc2:	f7fc f9b7 	bl	8001134 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d302      	bcc.n	8004dd8 <UART_WaitOnFlagUntilTimeout+0x32>
 8004dd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d13e      	bne.n	8004e56 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004de0:	e853 3f00 	ldrex	r3, [r3]
 8004de4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004de8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004dec:	667b      	str	r3, [r7, #100]	; 0x64
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	461a      	mov	r2, r3
 8004df4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004df6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004df8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004dfc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004dfe:	e841 2300 	strex	r3, r2, [r1]
 8004e02:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1e6      	bne.n	8004dd8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3308      	adds	r3, #8
 8004e10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e14:	e853 3f00 	ldrex	r3, [r3]
 8004e18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1c:	f023 0301 	bic.w	r3, r3, #1
 8004e20:	663b      	str	r3, [r7, #96]	; 0x60
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	3308      	adds	r3, #8
 8004e28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e2a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e32:	e841 2300 	strex	r3, r2, [r1]
 8004e36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1e5      	bne.n	8004e0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2220      	movs	r2, #32
 8004e42:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2220      	movs	r2, #32
 8004e48:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e067      	b.n	8004f26 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d04f      	beq.n	8004f04 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e72:	d147      	bne.n	8004f04 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e7c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e86:	e853 3f00 	ldrex	r3, [r3]
 8004e8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	461a      	mov	r2, r3
 8004e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e9e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ea2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ea4:	e841 2300 	strex	r3, r2, [r1]
 8004ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1e6      	bne.n	8004e7e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	3308      	adds	r3, #8
 8004eb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	e853 3f00 	ldrex	r3, [r3]
 8004ebe:	613b      	str	r3, [r7, #16]
   return(result);
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	f023 0301 	bic.w	r3, r3, #1
 8004ec6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	3308      	adds	r3, #8
 8004ece:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ed0:	623a      	str	r2, [r7, #32]
 8004ed2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed4:	69f9      	ldr	r1, [r7, #28]
 8004ed6:	6a3a      	ldr	r2, [r7, #32]
 8004ed8:	e841 2300 	strex	r3, r2, [r1]
 8004edc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1e5      	bne.n	8004eb0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2220      	movs	r2, #32
 8004eee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e010      	b.n	8004f26 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	69da      	ldr	r2, [r3, #28]
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	bf0c      	ite	eq
 8004f14:	2301      	moveq	r3, #1
 8004f16:	2300      	movne	r3, #0
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	79fb      	ldrb	r3, [r7, #7]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	f43f af4a 	beq.w	8004db8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3770      	adds	r7, #112	; 0x70
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
	...

08004f30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f30:	b084      	sub	sp, #16
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b084      	sub	sp, #16
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
 8004f3a:	f107 001c 	add.w	r0, r7, #28
 8004f3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d120      	bne.n	8004f8a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68da      	ldr	r2, [r3, #12]
 8004f58:	4b20      	ldr	r3, [pc, #128]	; (8004fdc <USB_CoreInit+0xac>)
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d105      	bne.n	8004f7e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 fa92 	bl	80054a8 <USB_CoreReset>
 8004f84:	4603      	mov	r3, r0
 8004f86:	73fb      	strb	r3, [r7, #15]
 8004f88:	e010      	b.n	8004fac <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 fa86 	bl	80054a8 <USB_CoreReset>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d10b      	bne.n	8004fca <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f043 0206 	orr.w	r2, r3, #6
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f043 0220 	orr.w	r2, r3, #32
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fd6:	b004      	add	sp, #16
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	ffbdffbf 	.word	0xffbdffbf

08004fe0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f023 0201 	bic.w	r2, r3, #1
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b084      	sub	sp, #16
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	460b      	mov	r3, r1
 800500c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800501e:	78fb      	ldrb	r3, [r7, #3]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d115      	bne.n	8005050 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005030:	2001      	movs	r0, #1
 8005032:	f7fc f88b 	bl	800114c <HAL_Delay>
      ms++;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	3301      	adds	r3, #1
 800503a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 fa25 	bl	800548c <USB_GetMode>
 8005042:	4603      	mov	r3, r0
 8005044:	2b01      	cmp	r3, #1
 8005046:	d01e      	beq.n	8005086 <USB_SetCurrentMode+0x84>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2b31      	cmp	r3, #49	; 0x31
 800504c:	d9f0      	bls.n	8005030 <USB_SetCurrentMode+0x2e>
 800504e:	e01a      	b.n	8005086 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005050:	78fb      	ldrb	r3, [r7, #3]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d115      	bne.n	8005082 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005062:	2001      	movs	r0, #1
 8005064:	f7fc f872 	bl	800114c <HAL_Delay>
      ms++;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	3301      	adds	r3, #1
 800506c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fa0c 	bl	800548c <USB_GetMode>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d005      	beq.n	8005086 <USB_SetCurrentMode+0x84>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2b31      	cmp	r3, #49	; 0x31
 800507e:	d9f0      	bls.n	8005062 <USB_SetCurrentMode+0x60>
 8005080:	e001      	b.n	8005086 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e005      	b.n	8005092 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2b32      	cmp	r3, #50	; 0x32
 800508a:	d101      	bne.n	8005090 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e000      	b.n	8005092 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
	...

0800509c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800509c:	b084      	sub	sp, #16
 800509e:	b580      	push	{r7, lr}
 80050a0:	b086      	sub	sp, #24
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
 80050a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80050aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80050ae:	2300      	movs	r3, #0
 80050b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80050b6:	2300      	movs	r3, #0
 80050b8:	613b      	str	r3, [r7, #16]
 80050ba:	e009      	b.n	80050d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	3340      	adds	r3, #64	; 0x40
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	2200      	movs	r2, #0
 80050c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	3301      	adds	r3, #1
 80050ce:	613b      	str	r3, [r7, #16]
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	2b0e      	cmp	r3, #14
 80050d4:	d9f2      	bls.n	80050bc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80050d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d11c      	bne.n	8005116 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050ea:	f043 0302 	orr.w	r3, r3, #2
 80050ee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	601a      	str	r2, [r3, #0]
 8005114:	e005      	b.n	8005122 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005128:	461a      	mov	r2, r3
 800512a:	2300      	movs	r3, #0
 800512c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005134:	4619      	mov	r1, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800513c:	461a      	mov	r2, r3
 800513e:	680b      	ldr	r3, [r1, #0]
 8005140:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005144:	2b01      	cmp	r3, #1
 8005146:	d10c      	bne.n	8005162 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514a:	2b00      	cmp	r3, #0
 800514c:	d104      	bne.n	8005158 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800514e:	2100      	movs	r1, #0
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f961 	bl	8005418 <USB_SetDevSpeed>
 8005156:	e008      	b.n	800516a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005158:	2101      	movs	r1, #1
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f95c 	bl	8005418 <USB_SetDevSpeed>
 8005160:	e003      	b.n	800516a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005162:	2103      	movs	r1, #3
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 f957 	bl	8005418 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800516a:	2110      	movs	r1, #16
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 f8f3 	bl	8005358 <USB_FlushTxFifo>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 f91d 	bl	80053bc <USB_FlushRxFifo>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005192:	461a      	mov	r2, r3
 8005194:	2300      	movs	r3, #0
 8005196:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800519e:	461a      	mov	r2, r3
 80051a0:	2300      	movs	r3, #0
 80051a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051aa:	461a      	mov	r2, r3
 80051ac:	2300      	movs	r3, #0
 80051ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051b0:	2300      	movs	r3, #0
 80051b2:	613b      	str	r3, [r7, #16]
 80051b4:	e043      	b.n	800523e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	015a      	lsls	r2, r3, #5
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	4413      	add	r3, r2
 80051be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051cc:	d118      	bne.n	8005200 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10a      	bne.n	80051ea <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e0:	461a      	mov	r2, r3
 80051e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051e6:	6013      	str	r3, [r2, #0]
 80051e8:	e013      	b.n	8005212 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	015a      	lsls	r2, r3, #5
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f6:	461a      	mov	r2, r3
 80051f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051fc:	6013      	str	r3, [r2, #0]
 80051fe:	e008      	b.n	8005212 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520c:	461a      	mov	r2, r3
 800520e:	2300      	movs	r3, #0
 8005210:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	4413      	add	r3, r2
 800521a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800521e:	461a      	mov	r2, r3
 8005220:	2300      	movs	r3, #0
 8005222:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4413      	add	r3, r2
 800522c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005230:	461a      	mov	r2, r3
 8005232:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005236:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	3301      	adds	r3, #1
 800523c:	613b      	str	r3, [r7, #16]
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	429a      	cmp	r2, r3
 8005244:	d3b7      	bcc.n	80051b6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005246:	2300      	movs	r3, #0
 8005248:	613b      	str	r3, [r7, #16]
 800524a:	e043      	b.n	80052d4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	4413      	add	r3, r2
 8005254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800525e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005262:	d118      	bne.n	8005296 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10a      	bne.n	8005280 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	4413      	add	r3, r2
 8005272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005276:	461a      	mov	r2, r3
 8005278:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800527c:	6013      	str	r3, [r2, #0]
 800527e:	e013      	b.n	80052a8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4413      	add	r3, r2
 8005288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800528c:	461a      	mov	r2, r3
 800528e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005292:	6013      	str	r3, [r2, #0]
 8005294:	e008      	b.n	80052a8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	4413      	add	r3, r2
 800529e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a2:	461a      	mov	r2, r3
 80052a4:	2300      	movs	r3, #0
 80052a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b4:	461a      	mov	r2, r3
 80052b6:	2300      	movs	r3, #0
 80052b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	015a      	lsls	r2, r3, #5
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c6:	461a      	mov	r2, r3
 80052c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	3301      	adds	r3, #1
 80052d2:	613b      	str	r3, [r7, #16]
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d3b7      	bcc.n	800524c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80052fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80052fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005300:	2b00      	cmp	r3, #0
 8005302:	d105      	bne.n	8005310 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	f043 0210 	orr.w	r2, r3, #16
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	699a      	ldr	r2, [r3, #24]
 8005314:	4b0e      	ldr	r3, [pc, #56]	; (8005350 <USB_DevInit+0x2b4>)
 8005316:	4313      	orrs	r3, r2
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800531c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800531e:	2b00      	cmp	r3, #0
 8005320:	d005      	beq.n	800532e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	f043 0208 	orr.w	r2, r3, #8
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800532e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005330:	2b01      	cmp	r3, #1
 8005332:	d105      	bne.n	8005340 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	699a      	ldr	r2, [r3, #24]
 8005338:	4b06      	ldr	r3, [pc, #24]	; (8005354 <USB_DevInit+0x2b8>)
 800533a:	4313      	orrs	r3, r2
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005340:	7dfb      	ldrb	r3, [r7, #23]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3718      	adds	r7, #24
 8005346:	46bd      	mov	sp, r7
 8005348:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800534c:	b004      	add	sp, #16
 800534e:	4770      	bx	lr
 8005350:	803c3800 	.word	0x803c3800
 8005354:	40000004 	.word	0x40000004

08005358 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005362:	2300      	movs	r3, #0
 8005364:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	3301      	adds	r3, #1
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	4a12      	ldr	r2, [pc, #72]	; (80053b8 <USB_FlushTxFifo+0x60>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d901      	bls.n	8005376 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e01a      	b.n	80053ac <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	2b00      	cmp	r3, #0
 800537c:	daf3      	bge.n	8005366 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800537e:	2300      	movs	r3, #0
 8005380:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	019b      	lsls	r3, r3, #6
 8005386:	f043 0220 	orr.w	r2, r3, #32
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	3301      	adds	r3, #1
 8005392:	60fb      	str	r3, [r7, #12]
 8005394:	4a08      	ldr	r2, [pc, #32]	; (80053b8 <USB_FlushTxFifo+0x60>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d901      	bls.n	800539e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e006      	b.n	80053ac <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f003 0320 	and.w	r3, r3, #32
 80053a6:	2b20      	cmp	r3, #32
 80053a8:	d0f1      	beq.n	800538e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	00030d40 	.word	0x00030d40

080053bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053c4:	2300      	movs	r3, #0
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	3301      	adds	r3, #1
 80053cc:	60fb      	str	r3, [r7, #12]
 80053ce:	4a11      	ldr	r2, [pc, #68]	; (8005414 <USB_FlushRxFifo+0x58>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d901      	bls.n	80053d8 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e017      	b.n	8005408 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	daf3      	bge.n	80053c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2210      	movs	r2, #16
 80053e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	3301      	adds	r3, #1
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	4a08      	ldr	r2, [pc, #32]	; (8005414 <USB_FlushRxFifo+0x58>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d901      	bls.n	80053fa <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e006      	b.n	8005408 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	f003 0310 	and.w	r3, r3, #16
 8005402:	2b10      	cmp	r3, #16
 8005404:	d0f1      	beq.n	80053ea <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	00030d40 	.word	0x00030d40

08005418 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	460b      	mov	r3, r1
 8005422:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	78fb      	ldrb	r3, [r7, #3]
 8005432:	68f9      	ldr	r1, [r7, #12]
 8005434:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005438:	4313      	orrs	r3, r2
 800543a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800544a:	b480      	push	{r7}
 800544c:	b085      	sub	sp, #20
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005464:	f023 0303 	bic.w	r3, r3, #3
 8005468:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005478:	f043 0302 	orr.w	r3, r3, #2
 800547c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	f003 0301 	and.w	r3, r3, #1
}
 800549c:	4618      	mov	r0, r3
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054b0:	2300      	movs	r3, #0
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	3301      	adds	r3, #1
 80054b8:	60fb      	str	r3, [r7, #12]
 80054ba:	4a13      	ldr	r2, [pc, #76]	; (8005508 <USB_CoreReset+0x60>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d901      	bls.n	80054c4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e01a      	b.n	80054fa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	daf3      	bge.n	80054b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80054cc:	2300      	movs	r3, #0
 80054ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	f043 0201 	orr.w	r2, r3, #1
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	3301      	adds	r3, #1
 80054e0:	60fb      	str	r3, [r7, #12]
 80054e2:	4a09      	ldr	r2, [pc, #36]	; (8005508 <USB_CoreReset+0x60>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d901      	bls.n	80054ec <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e006      	b.n	80054fa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d0f1      	beq.n	80054dc <USB_CoreReset+0x34>

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	00030d40 	.word	0x00030d40

0800550c <__errno>:
 800550c:	4b01      	ldr	r3, [pc, #4]	; (8005514 <__errno+0x8>)
 800550e:	6818      	ldr	r0, [r3, #0]
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	2000000c 	.word	0x2000000c

08005518 <__libc_init_array>:
 8005518:	b570      	push	{r4, r5, r6, lr}
 800551a:	4e0d      	ldr	r6, [pc, #52]	; (8005550 <__libc_init_array+0x38>)
 800551c:	4c0d      	ldr	r4, [pc, #52]	; (8005554 <__libc_init_array+0x3c>)
 800551e:	1ba4      	subs	r4, r4, r6
 8005520:	10a4      	asrs	r4, r4, #2
 8005522:	2500      	movs	r5, #0
 8005524:	42a5      	cmp	r5, r4
 8005526:	d109      	bne.n	800553c <__libc_init_array+0x24>
 8005528:	4e0b      	ldr	r6, [pc, #44]	; (8005558 <__libc_init_array+0x40>)
 800552a:	4c0c      	ldr	r4, [pc, #48]	; (800555c <__libc_init_array+0x44>)
 800552c:	f000 fc26 	bl	8005d7c <_init>
 8005530:	1ba4      	subs	r4, r4, r6
 8005532:	10a4      	asrs	r4, r4, #2
 8005534:	2500      	movs	r5, #0
 8005536:	42a5      	cmp	r5, r4
 8005538:	d105      	bne.n	8005546 <__libc_init_array+0x2e>
 800553a:	bd70      	pop	{r4, r5, r6, pc}
 800553c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005540:	4798      	blx	r3
 8005542:	3501      	adds	r5, #1
 8005544:	e7ee      	b.n	8005524 <__libc_init_array+0xc>
 8005546:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800554a:	4798      	blx	r3
 800554c:	3501      	adds	r5, #1
 800554e:	e7f2      	b.n	8005536 <__libc_init_array+0x1e>
 8005550:	08005df0 	.word	0x08005df0
 8005554:	08005df0 	.word	0x08005df0
 8005558:	08005df0 	.word	0x08005df0
 800555c:	08005df4 	.word	0x08005df4

08005560 <memset>:
 8005560:	4402      	add	r2, r0
 8005562:	4603      	mov	r3, r0
 8005564:	4293      	cmp	r3, r2
 8005566:	d100      	bne.n	800556a <memset+0xa>
 8005568:	4770      	bx	lr
 800556a:	f803 1b01 	strb.w	r1, [r3], #1
 800556e:	e7f9      	b.n	8005564 <memset+0x4>

08005570 <siprintf>:
 8005570:	b40e      	push	{r1, r2, r3}
 8005572:	b500      	push	{lr}
 8005574:	b09c      	sub	sp, #112	; 0x70
 8005576:	ab1d      	add	r3, sp, #116	; 0x74
 8005578:	9002      	str	r0, [sp, #8]
 800557a:	9006      	str	r0, [sp, #24]
 800557c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005580:	4809      	ldr	r0, [pc, #36]	; (80055a8 <siprintf+0x38>)
 8005582:	9107      	str	r1, [sp, #28]
 8005584:	9104      	str	r1, [sp, #16]
 8005586:	4909      	ldr	r1, [pc, #36]	; (80055ac <siprintf+0x3c>)
 8005588:	f853 2b04 	ldr.w	r2, [r3], #4
 800558c:	9105      	str	r1, [sp, #20]
 800558e:	6800      	ldr	r0, [r0, #0]
 8005590:	9301      	str	r3, [sp, #4]
 8005592:	a902      	add	r1, sp, #8
 8005594:	f000 f866 	bl	8005664 <_svfiprintf_r>
 8005598:	9b02      	ldr	r3, [sp, #8]
 800559a:	2200      	movs	r2, #0
 800559c:	701a      	strb	r2, [r3, #0]
 800559e:	b01c      	add	sp, #112	; 0x70
 80055a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80055a4:	b003      	add	sp, #12
 80055a6:	4770      	bx	lr
 80055a8:	2000000c 	.word	0x2000000c
 80055ac:	ffff0208 	.word	0xffff0208

080055b0 <__ssputs_r>:
 80055b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055b4:	688e      	ldr	r6, [r1, #8]
 80055b6:	429e      	cmp	r6, r3
 80055b8:	4682      	mov	sl, r0
 80055ba:	460c      	mov	r4, r1
 80055bc:	4690      	mov	r8, r2
 80055be:	4699      	mov	r9, r3
 80055c0:	d837      	bhi.n	8005632 <__ssputs_r+0x82>
 80055c2:	898a      	ldrh	r2, [r1, #12]
 80055c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80055c8:	d031      	beq.n	800562e <__ssputs_r+0x7e>
 80055ca:	6825      	ldr	r5, [r4, #0]
 80055cc:	6909      	ldr	r1, [r1, #16]
 80055ce:	1a6f      	subs	r7, r5, r1
 80055d0:	6965      	ldr	r5, [r4, #20]
 80055d2:	2302      	movs	r3, #2
 80055d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055d8:	fb95 f5f3 	sdiv	r5, r5, r3
 80055dc:	f109 0301 	add.w	r3, r9, #1
 80055e0:	443b      	add	r3, r7
 80055e2:	429d      	cmp	r5, r3
 80055e4:	bf38      	it	cc
 80055e6:	461d      	movcc	r5, r3
 80055e8:	0553      	lsls	r3, r2, #21
 80055ea:	d530      	bpl.n	800564e <__ssputs_r+0x9e>
 80055ec:	4629      	mov	r1, r5
 80055ee:	f000 fb2b 	bl	8005c48 <_malloc_r>
 80055f2:	4606      	mov	r6, r0
 80055f4:	b950      	cbnz	r0, 800560c <__ssputs_r+0x5c>
 80055f6:	230c      	movs	r3, #12
 80055f8:	f8ca 3000 	str.w	r3, [sl]
 80055fc:	89a3      	ldrh	r3, [r4, #12]
 80055fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005602:	81a3      	strh	r3, [r4, #12]
 8005604:	f04f 30ff 	mov.w	r0, #4294967295
 8005608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800560c:	463a      	mov	r2, r7
 800560e:	6921      	ldr	r1, [r4, #16]
 8005610:	f000 faa8 	bl	8005b64 <memcpy>
 8005614:	89a3      	ldrh	r3, [r4, #12]
 8005616:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800561a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800561e:	81a3      	strh	r3, [r4, #12]
 8005620:	6126      	str	r6, [r4, #16]
 8005622:	6165      	str	r5, [r4, #20]
 8005624:	443e      	add	r6, r7
 8005626:	1bed      	subs	r5, r5, r7
 8005628:	6026      	str	r6, [r4, #0]
 800562a:	60a5      	str	r5, [r4, #8]
 800562c:	464e      	mov	r6, r9
 800562e:	454e      	cmp	r6, r9
 8005630:	d900      	bls.n	8005634 <__ssputs_r+0x84>
 8005632:	464e      	mov	r6, r9
 8005634:	4632      	mov	r2, r6
 8005636:	4641      	mov	r1, r8
 8005638:	6820      	ldr	r0, [r4, #0]
 800563a:	f000 fa9e 	bl	8005b7a <memmove>
 800563e:	68a3      	ldr	r3, [r4, #8]
 8005640:	1b9b      	subs	r3, r3, r6
 8005642:	60a3      	str	r3, [r4, #8]
 8005644:	6823      	ldr	r3, [r4, #0]
 8005646:	441e      	add	r6, r3
 8005648:	6026      	str	r6, [r4, #0]
 800564a:	2000      	movs	r0, #0
 800564c:	e7dc      	b.n	8005608 <__ssputs_r+0x58>
 800564e:	462a      	mov	r2, r5
 8005650:	f000 fb54 	bl	8005cfc <_realloc_r>
 8005654:	4606      	mov	r6, r0
 8005656:	2800      	cmp	r0, #0
 8005658:	d1e2      	bne.n	8005620 <__ssputs_r+0x70>
 800565a:	6921      	ldr	r1, [r4, #16]
 800565c:	4650      	mov	r0, sl
 800565e:	f000 faa5 	bl	8005bac <_free_r>
 8005662:	e7c8      	b.n	80055f6 <__ssputs_r+0x46>

08005664 <_svfiprintf_r>:
 8005664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005668:	461d      	mov	r5, r3
 800566a:	898b      	ldrh	r3, [r1, #12]
 800566c:	061f      	lsls	r7, r3, #24
 800566e:	b09d      	sub	sp, #116	; 0x74
 8005670:	4680      	mov	r8, r0
 8005672:	460c      	mov	r4, r1
 8005674:	4616      	mov	r6, r2
 8005676:	d50f      	bpl.n	8005698 <_svfiprintf_r+0x34>
 8005678:	690b      	ldr	r3, [r1, #16]
 800567a:	b96b      	cbnz	r3, 8005698 <_svfiprintf_r+0x34>
 800567c:	2140      	movs	r1, #64	; 0x40
 800567e:	f000 fae3 	bl	8005c48 <_malloc_r>
 8005682:	6020      	str	r0, [r4, #0]
 8005684:	6120      	str	r0, [r4, #16]
 8005686:	b928      	cbnz	r0, 8005694 <_svfiprintf_r+0x30>
 8005688:	230c      	movs	r3, #12
 800568a:	f8c8 3000 	str.w	r3, [r8]
 800568e:	f04f 30ff 	mov.w	r0, #4294967295
 8005692:	e0c8      	b.n	8005826 <_svfiprintf_r+0x1c2>
 8005694:	2340      	movs	r3, #64	; 0x40
 8005696:	6163      	str	r3, [r4, #20]
 8005698:	2300      	movs	r3, #0
 800569a:	9309      	str	r3, [sp, #36]	; 0x24
 800569c:	2320      	movs	r3, #32
 800569e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056a2:	2330      	movs	r3, #48	; 0x30
 80056a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056a8:	9503      	str	r5, [sp, #12]
 80056aa:	f04f 0b01 	mov.w	fp, #1
 80056ae:	4637      	mov	r7, r6
 80056b0:	463d      	mov	r5, r7
 80056b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80056b6:	b10b      	cbz	r3, 80056bc <_svfiprintf_r+0x58>
 80056b8:	2b25      	cmp	r3, #37	; 0x25
 80056ba:	d13e      	bne.n	800573a <_svfiprintf_r+0xd6>
 80056bc:	ebb7 0a06 	subs.w	sl, r7, r6
 80056c0:	d00b      	beq.n	80056da <_svfiprintf_r+0x76>
 80056c2:	4653      	mov	r3, sl
 80056c4:	4632      	mov	r2, r6
 80056c6:	4621      	mov	r1, r4
 80056c8:	4640      	mov	r0, r8
 80056ca:	f7ff ff71 	bl	80055b0 <__ssputs_r>
 80056ce:	3001      	adds	r0, #1
 80056d0:	f000 80a4 	beq.w	800581c <_svfiprintf_r+0x1b8>
 80056d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056d6:	4453      	add	r3, sl
 80056d8:	9309      	str	r3, [sp, #36]	; 0x24
 80056da:	783b      	ldrb	r3, [r7, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f000 809d 	beq.w	800581c <_svfiprintf_r+0x1b8>
 80056e2:	2300      	movs	r3, #0
 80056e4:	f04f 32ff 	mov.w	r2, #4294967295
 80056e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056ec:	9304      	str	r3, [sp, #16]
 80056ee:	9307      	str	r3, [sp, #28]
 80056f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056f4:	931a      	str	r3, [sp, #104]	; 0x68
 80056f6:	462f      	mov	r7, r5
 80056f8:	2205      	movs	r2, #5
 80056fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80056fe:	4850      	ldr	r0, [pc, #320]	; (8005840 <_svfiprintf_r+0x1dc>)
 8005700:	f7fa fd8e 	bl	8000220 <memchr>
 8005704:	9b04      	ldr	r3, [sp, #16]
 8005706:	b9d0      	cbnz	r0, 800573e <_svfiprintf_r+0xda>
 8005708:	06d9      	lsls	r1, r3, #27
 800570a:	bf44      	itt	mi
 800570c:	2220      	movmi	r2, #32
 800570e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005712:	071a      	lsls	r2, r3, #28
 8005714:	bf44      	itt	mi
 8005716:	222b      	movmi	r2, #43	; 0x2b
 8005718:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800571c:	782a      	ldrb	r2, [r5, #0]
 800571e:	2a2a      	cmp	r2, #42	; 0x2a
 8005720:	d015      	beq.n	800574e <_svfiprintf_r+0xea>
 8005722:	9a07      	ldr	r2, [sp, #28]
 8005724:	462f      	mov	r7, r5
 8005726:	2000      	movs	r0, #0
 8005728:	250a      	movs	r5, #10
 800572a:	4639      	mov	r1, r7
 800572c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005730:	3b30      	subs	r3, #48	; 0x30
 8005732:	2b09      	cmp	r3, #9
 8005734:	d94d      	bls.n	80057d2 <_svfiprintf_r+0x16e>
 8005736:	b1b8      	cbz	r0, 8005768 <_svfiprintf_r+0x104>
 8005738:	e00f      	b.n	800575a <_svfiprintf_r+0xf6>
 800573a:	462f      	mov	r7, r5
 800573c:	e7b8      	b.n	80056b0 <_svfiprintf_r+0x4c>
 800573e:	4a40      	ldr	r2, [pc, #256]	; (8005840 <_svfiprintf_r+0x1dc>)
 8005740:	1a80      	subs	r0, r0, r2
 8005742:	fa0b f000 	lsl.w	r0, fp, r0
 8005746:	4318      	orrs	r0, r3
 8005748:	9004      	str	r0, [sp, #16]
 800574a:	463d      	mov	r5, r7
 800574c:	e7d3      	b.n	80056f6 <_svfiprintf_r+0x92>
 800574e:	9a03      	ldr	r2, [sp, #12]
 8005750:	1d11      	adds	r1, r2, #4
 8005752:	6812      	ldr	r2, [r2, #0]
 8005754:	9103      	str	r1, [sp, #12]
 8005756:	2a00      	cmp	r2, #0
 8005758:	db01      	blt.n	800575e <_svfiprintf_r+0xfa>
 800575a:	9207      	str	r2, [sp, #28]
 800575c:	e004      	b.n	8005768 <_svfiprintf_r+0x104>
 800575e:	4252      	negs	r2, r2
 8005760:	f043 0302 	orr.w	r3, r3, #2
 8005764:	9207      	str	r2, [sp, #28]
 8005766:	9304      	str	r3, [sp, #16]
 8005768:	783b      	ldrb	r3, [r7, #0]
 800576a:	2b2e      	cmp	r3, #46	; 0x2e
 800576c:	d10c      	bne.n	8005788 <_svfiprintf_r+0x124>
 800576e:	787b      	ldrb	r3, [r7, #1]
 8005770:	2b2a      	cmp	r3, #42	; 0x2a
 8005772:	d133      	bne.n	80057dc <_svfiprintf_r+0x178>
 8005774:	9b03      	ldr	r3, [sp, #12]
 8005776:	1d1a      	adds	r2, r3, #4
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	9203      	str	r2, [sp, #12]
 800577c:	2b00      	cmp	r3, #0
 800577e:	bfb8      	it	lt
 8005780:	f04f 33ff 	movlt.w	r3, #4294967295
 8005784:	3702      	adds	r7, #2
 8005786:	9305      	str	r3, [sp, #20]
 8005788:	4d2e      	ldr	r5, [pc, #184]	; (8005844 <_svfiprintf_r+0x1e0>)
 800578a:	7839      	ldrb	r1, [r7, #0]
 800578c:	2203      	movs	r2, #3
 800578e:	4628      	mov	r0, r5
 8005790:	f7fa fd46 	bl	8000220 <memchr>
 8005794:	b138      	cbz	r0, 80057a6 <_svfiprintf_r+0x142>
 8005796:	2340      	movs	r3, #64	; 0x40
 8005798:	1b40      	subs	r0, r0, r5
 800579a:	fa03 f000 	lsl.w	r0, r3, r0
 800579e:	9b04      	ldr	r3, [sp, #16]
 80057a0:	4303      	orrs	r3, r0
 80057a2:	3701      	adds	r7, #1
 80057a4:	9304      	str	r3, [sp, #16]
 80057a6:	7839      	ldrb	r1, [r7, #0]
 80057a8:	4827      	ldr	r0, [pc, #156]	; (8005848 <_svfiprintf_r+0x1e4>)
 80057aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057ae:	2206      	movs	r2, #6
 80057b0:	1c7e      	adds	r6, r7, #1
 80057b2:	f7fa fd35 	bl	8000220 <memchr>
 80057b6:	2800      	cmp	r0, #0
 80057b8:	d038      	beq.n	800582c <_svfiprintf_r+0x1c8>
 80057ba:	4b24      	ldr	r3, [pc, #144]	; (800584c <_svfiprintf_r+0x1e8>)
 80057bc:	bb13      	cbnz	r3, 8005804 <_svfiprintf_r+0x1a0>
 80057be:	9b03      	ldr	r3, [sp, #12]
 80057c0:	3307      	adds	r3, #7
 80057c2:	f023 0307 	bic.w	r3, r3, #7
 80057c6:	3308      	adds	r3, #8
 80057c8:	9303      	str	r3, [sp, #12]
 80057ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057cc:	444b      	add	r3, r9
 80057ce:	9309      	str	r3, [sp, #36]	; 0x24
 80057d0:	e76d      	b.n	80056ae <_svfiprintf_r+0x4a>
 80057d2:	fb05 3202 	mla	r2, r5, r2, r3
 80057d6:	2001      	movs	r0, #1
 80057d8:	460f      	mov	r7, r1
 80057da:	e7a6      	b.n	800572a <_svfiprintf_r+0xc6>
 80057dc:	2300      	movs	r3, #0
 80057de:	3701      	adds	r7, #1
 80057e0:	9305      	str	r3, [sp, #20]
 80057e2:	4619      	mov	r1, r3
 80057e4:	250a      	movs	r5, #10
 80057e6:	4638      	mov	r0, r7
 80057e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057ec:	3a30      	subs	r2, #48	; 0x30
 80057ee:	2a09      	cmp	r2, #9
 80057f0:	d903      	bls.n	80057fa <_svfiprintf_r+0x196>
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d0c8      	beq.n	8005788 <_svfiprintf_r+0x124>
 80057f6:	9105      	str	r1, [sp, #20]
 80057f8:	e7c6      	b.n	8005788 <_svfiprintf_r+0x124>
 80057fa:	fb05 2101 	mla	r1, r5, r1, r2
 80057fe:	2301      	movs	r3, #1
 8005800:	4607      	mov	r7, r0
 8005802:	e7f0      	b.n	80057e6 <_svfiprintf_r+0x182>
 8005804:	ab03      	add	r3, sp, #12
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	4622      	mov	r2, r4
 800580a:	4b11      	ldr	r3, [pc, #68]	; (8005850 <_svfiprintf_r+0x1ec>)
 800580c:	a904      	add	r1, sp, #16
 800580e:	4640      	mov	r0, r8
 8005810:	f3af 8000 	nop.w
 8005814:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005818:	4681      	mov	r9, r0
 800581a:	d1d6      	bne.n	80057ca <_svfiprintf_r+0x166>
 800581c:	89a3      	ldrh	r3, [r4, #12]
 800581e:	065b      	lsls	r3, r3, #25
 8005820:	f53f af35 	bmi.w	800568e <_svfiprintf_r+0x2a>
 8005824:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005826:	b01d      	add	sp, #116	; 0x74
 8005828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800582c:	ab03      	add	r3, sp, #12
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	4622      	mov	r2, r4
 8005832:	4b07      	ldr	r3, [pc, #28]	; (8005850 <_svfiprintf_r+0x1ec>)
 8005834:	a904      	add	r1, sp, #16
 8005836:	4640      	mov	r0, r8
 8005838:	f000 f882 	bl	8005940 <_printf_i>
 800583c:	e7ea      	b.n	8005814 <_svfiprintf_r+0x1b0>
 800583e:	bf00      	nop
 8005840:	08005db4 	.word	0x08005db4
 8005844:	08005dba 	.word	0x08005dba
 8005848:	08005dbe 	.word	0x08005dbe
 800584c:	00000000 	.word	0x00000000
 8005850:	080055b1 	.word	0x080055b1

08005854 <_printf_common>:
 8005854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005858:	4691      	mov	r9, r2
 800585a:	461f      	mov	r7, r3
 800585c:	688a      	ldr	r2, [r1, #8]
 800585e:	690b      	ldr	r3, [r1, #16]
 8005860:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005864:	4293      	cmp	r3, r2
 8005866:	bfb8      	it	lt
 8005868:	4613      	movlt	r3, r2
 800586a:	f8c9 3000 	str.w	r3, [r9]
 800586e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005872:	4606      	mov	r6, r0
 8005874:	460c      	mov	r4, r1
 8005876:	b112      	cbz	r2, 800587e <_printf_common+0x2a>
 8005878:	3301      	adds	r3, #1
 800587a:	f8c9 3000 	str.w	r3, [r9]
 800587e:	6823      	ldr	r3, [r4, #0]
 8005880:	0699      	lsls	r1, r3, #26
 8005882:	bf42      	ittt	mi
 8005884:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005888:	3302      	addmi	r3, #2
 800588a:	f8c9 3000 	strmi.w	r3, [r9]
 800588e:	6825      	ldr	r5, [r4, #0]
 8005890:	f015 0506 	ands.w	r5, r5, #6
 8005894:	d107      	bne.n	80058a6 <_printf_common+0x52>
 8005896:	f104 0a19 	add.w	sl, r4, #25
 800589a:	68e3      	ldr	r3, [r4, #12]
 800589c:	f8d9 2000 	ldr.w	r2, [r9]
 80058a0:	1a9b      	subs	r3, r3, r2
 80058a2:	42ab      	cmp	r3, r5
 80058a4:	dc28      	bgt.n	80058f8 <_printf_common+0xa4>
 80058a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80058aa:	6822      	ldr	r2, [r4, #0]
 80058ac:	3300      	adds	r3, #0
 80058ae:	bf18      	it	ne
 80058b0:	2301      	movne	r3, #1
 80058b2:	0692      	lsls	r2, r2, #26
 80058b4:	d42d      	bmi.n	8005912 <_printf_common+0xbe>
 80058b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058ba:	4639      	mov	r1, r7
 80058bc:	4630      	mov	r0, r6
 80058be:	47c0      	blx	r8
 80058c0:	3001      	adds	r0, #1
 80058c2:	d020      	beq.n	8005906 <_printf_common+0xb2>
 80058c4:	6823      	ldr	r3, [r4, #0]
 80058c6:	68e5      	ldr	r5, [r4, #12]
 80058c8:	f8d9 2000 	ldr.w	r2, [r9]
 80058cc:	f003 0306 	and.w	r3, r3, #6
 80058d0:	2b04      	cmp	r3, #4
 80058d2:	bf08      	it	eq
 80058d4:	1aad      	subeq	r5, r5, r2
 80058d6:	68a3      	ldr	r3, [r4, #8]
 80058d8:	6922      	ldr	r2, [r4, #16]
 80058da:	bf0c      	ite	eq
 80058dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058e0:	2500      	movne	r5, #0
 80058e2:	4293      	cmp	r3, r2
 80058e4:	bfc4      	itt	gt
 80058e6:	1a9b      	subgt	r3, r3, r2
 80058e8:	18ed      	addgt	r5, r5, r3
 80058ea:	f04f 0900 	mov.w	r9, #0
 80058ee:	341a      	adds	r4, #26
 80058f0:	454d      	cmp	r5, r9
 80058f2:	d11a      	bne.n	800592a <_printf_common+0xd6>
 80058f4:	2000      	movs	r0, #0
 80058f6:	e008      	b.n	800590a <_printf_common+0xb6>
 80058f8:	2301      	movs	r3, #1
 80058fa:	4652      	mov	r2, sl
 80058fc:	4639      	mov	r1, r7
 80058fe:	4630      	mov	r0, r6
 8005900:	47c0      	blx	r8
 8005902:	3001      	adds	r0, #1
 8005904:	d103      	bne.n	800590e <_printf_common+0xba>
 8005906:	f04f 30ff 	mov.w	r0, #4294967295
 800590a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800590e:	3501      	adds	r5, #1
 8005910:	e7c3      	b.n	800589a <_printf_common+0x46>
 8005912:	18e1      	adds	r1, r4, r3
 8005914:	1c5a      	adds	r2, r3, #1
 8005916:	2030      	movs	r0, #48	; 0x30
 8005918:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800591c:	4422      	add	r2, r4
 800591e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005922:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005926:	3302      	adds	r3, #2
 8005928:	e7c5      	b.n	80058b6 <_printf_common+0x62>
 800592a:	2301      	movs	r3, #1
 800592c:	4622      	mov	r2, r4
 800592e:	4639      	mov	r1, r7
 8005930:	4630      	mov	r0, r6
 8005932:	47c0      	blx	r8
 8005934:	3001      	adds	r0, #1
 8005936:	d0e6      	beq.n	8005906 <_printf_common+0xb2>
 8005938:	f109 0901 	add.w	r9, r9, #1
 800593c:	e7d8      	b.n	80058f0 <_printf_common+0x9c>
	...

08005940 <_printf_i>:
 8005940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005944:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005948:	460c      	mov	r4, r1
 800594a:	7e09      	ldrb	r1, [r1, #24]
 800594c:	b085      	sub	sp, #20
 800594e:	296e      	cmp	r1, #110	; 0x6e
 8005950:	4617      	mov	r7, r2
 8005952:	4606      	mov	r6, r0
 8005954:	4698      	mov	r8, r3
 8005956:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005958:	f000 80b3 	beq.w	8005ac2 <_printf_i+0x182>
 800595c:	d822      	bhi.n	80059a4 <_printf_i+0x64>
 800595e:	2963      	cmp	r1, #99	; 0x63
 8005960:	d036      	beq.n	80059d0 <_printf_i+0x90>
 8005962:	d80a      	bhi.n	800597a <_printf_i+0x3a>
 8005964:	2900      	cmp	r1, #0
 8005966:	f000 80b9 	beq.w	8005adc <_printf_i+0x19c>
 800596a:	2958      	cmp	r1, #88	; 0x58
 800596c:	f000 8083 	beq.w	8005a76 <_printf_i+0x136>
 8005970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005974:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005978:	e032      	b.n	80059e0 <_printf_i+0xa0>
 800597a:	2964      	cmp	r1, #100	; 0x64
 800597c:	d001      	beq.n	8005982 <_printf_i+0x42>
 800597e:	2969      	cmp	r1, #105	; 0x69
 8005980:	d1f6      	bne.n	8005970 <_printf_i+0x30>
 8005982:	6820      	ldr	r0, [r4, #0]
 8005984:	6813      	ldr	r3, [r2, #0]
 8005986:	0605      	lsls	r5, r0, #24
 8005988:	f103 0104 	add.w	r1, r3, #4
 800598c:	d52a      	bpl.n	80059e4 <_printf_i+0xa4>
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6011      	str	r1, [r2, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	da03      	bge.n	800599e <_printf_i+0x5e>
 8005996:	222d      	movs	r2, #45	; 0x2d
 8005998:	425b      	negs	r3, r3
 800599a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800599e:	486f      	ldr	r0, [pc, #444]	; (8005b5c <_printf_i+0x21c>)
 80059a0:	220a      	movs	r2, #10
 80059a2:	e039      	b.n	8005a18 <_printf_i+0xd8>
 80059a4:	2973      	cmp	r1, #115	; 0x73
 80059a6:	f000 809d 	beq.w	8005ae4 <_printf_i+0x1a4>
 80059aa:	d808      	bhi.n	80059be <_printf_i+0x7e>
 80059ac:	296f      	cmp	r1, #111	; 0x6f
 80059ae:	d020      	beq.n	80059f2 <_printf_i+0xb2>
 80059b0:	2970      	cmp	r1, #112	; 0x70
 80059b2:	d1dd      	bne.n	8005970 <_printf_i+0x30>
 80059b4:	6823      	ldr	r3, [r4, #0]
 80059b6:	f043 0320 	orr.w	r3, r3, #32
 80059ba:	6023      	str	r3, [r4, #0]
 80059bc:	e003      	b.n	80059c6 <_printf_i+0x86>
 80059be:	2975      	cmp	r1, #117	; 0x75
 80059c0:	d017      	beq.n	80059f2 <_printf_i+0xb2>
 80059c2:	2978      	cmp	r1, #120	; 0x78
 80059c4:	d1d4      	bne.n	8005970 <_printf_i+0x30>
 80059c6:	2378      	movs	r3, #120	; 0x78
 80059c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059cc:	4864      	ldr	r0, [pc, #400]	; (8005b60 <_printf_i+0x220>)
 80059ce:	e055      	b.n	8005a7c <_printf_i+0x13c>
 80059d0:	6813      	ldr	r3, [r2, #0]
 80059d2:	1d19      	adds	r1, r3, #4
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6011      	str	r1, [r2, #0]
 80059d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059e0:	2301      	movs	r3, #1
 80059e2:	e08c      	b.n	8005afe <_printf_i+0x1be>
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	6011      	str	r1, [r2, #0]
 80059e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059ec:	bf18      	it	ne
 80059ee:	b21b      	sxthne	r3, r3
 80059f0:	e7cf      	b.n	8005992 <_printf_i+0x52>
 80059f2:	6813      	ldr	r3, [r2, #0]
 80059f4:	6825      	ldr	r5, [r4, #0]
 80059f6:	1d18      	adds	r0, r3, #4
 80059f8:	6010      	str	r0, [r2, #0]
 80059fa:	0628      	lsls	r0, r5, #24
 80059fc:	d501      	bpl.n	8005a02 <_printf_i+0xc2>
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	e002      	b.n	8005a08 <_printf_i+0xc8>
 8005a02:	0668      	lsls	r0, r5, #25
 8005a04:	d5fb      	bpl.n	80059fe <_printf_i+0xbe>
 8005a06:	881b      	ldrh	r3, [r3, #0]
 8005a08:	4854      	ldr	r0, [pc, #336]	; (8005b5c <_printf_i+0x21c>)
 8005a0a:	296f      	cmp	r1, #111	; 0x6f
 8005a0c:	bf14      	ite	ne
 8005a0e:	220a      	movne	r2, #10
 8005a10:	2208      	moveq	r2, #8
 8005a12:	2100      	movs	r1, #0
 8005a14:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a18:	6865      	ldr	r5, [r4, #4]
 8005a1a:	60a5      	str	r5, [r4, #8]
 8005a1c:	2d00      	cmp	r5, #0
 8005a1e:	f2c0 8095 	blt.w	8005b4c <_printf_i+0x20c>
 8005a22:	6821      	ldr	r1, [r4, #0]
 8005a24:	f021 0104 	bic.w	r1, r1, #4
 8005a28:	6021      	str	r1, [r4, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d13d      	bne.n	8005aaa <_printf_i+0x16a>
 8005a2e:	2d00      	cmp	r5, #0
 8005a30:	f040 808e 	bne.w	8005b50 <_printf_i+0x210>
 8005a34:	4665      	mov	r5, ip
 8005a36:	2a08      	cmp	r2, #8
 8005a38:	d10b      	bne.n	8005a52 <_printf_i+0x112>
 8005a3a:	6823      	ldr	r3, [r4, #0]
 8005a3c:	07db      	lsls	r3, r3, #31
 8005a3e:	d508      	bpl.n	8005a52 <_printf_i+0x112>
 8005a40:	6923      	ldr	r3, [r4, #16]
 8005a42:	6862      	ldr	r2, [r4, #4]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	bfde      	ittt	le
 8005a48:	2330      	movle	r3, #48	; 0x30
 8005a4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a4e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a52:	ebac 0305 	sub.w	r3, ip, r5
 8005a56:	6123      	str	r3, [r4, #16]
 8005a58:	f8cd 8000 	str.w	r8, [sp]
 8005a5c:	463b      	mov	r3, r7
 8005a5e:	aa03      	add	r2, sp, #12
 8005a60:	4621      	mov	r1, r4
 8005a62:	4630      	mov	r0, r6
 8005a64:	f7ff fef6 	bl	8005854 <_printf_common>
 8005a68:	3001      	adds	r0, #1
 8005a6a:	d14d      	bne.n	8005b08 <_printf_i+0x1c8>
 8005a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a70:	b005      	add	sp, #20
 8005a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a76:	4839      	ldr	r0, [pc, #228]	; (8005b5c <_printf_i+0x21c>)
 8005a78:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005a7c:	6813      	ldr	r3, [r2, #0]
 8005a7e:	6821      	ldr	r1, [r4, #0]
 8005a80:	1d1d      	adds	r5, r3, #4
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6015      	str	r5, [r2, #0]
 8005a86:	060a      	lsls	r2, r1, #24
 8005a88:	d50b      	bpl.n	8005aa2 <_printf_i+0x162>
 8005a8a:	07ca      	lsls	r2, r1, #31
 8005a8c:	bf44      	itt	mi
 8005a8e:	f041 0120 	orrmi.w	r1, r1, #32
 8005a92:	6021      	strmi	r1, [r4, #0]
 8005a94:	b91b      	cbnz	r3, 8005a9e <_printf_i+0x15e>
 8005a96:	6822      	ldr	r2, [r4, #0]
 8005a98:	f022 0220 	bic.w	r2, r2, #32
 8005a9c:	6022      	str	r2, [r4, #0]
 8005a9e:	2210      	movs	r2, #16
 8005aa0:	e7b7      	b.n	8005a12 <_printf_i+0xd2>
 8005aa2:	064d      	lsls	r5, r1, #25
 8005aa4:	bf48      	it	mi
 8005aa6:	b29b      	uxthmi	r3, r3
 8005aa8:	e7ef      	b.n	8005a8a <_printf_i+0x14a>
 8005aaa:	4665      	mov	r5, ip
 8005aac:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ab0:	fb02 3311 	mls	r3, r2, r1, r3
 8005ab4:	5cc3      	ldrb	r3, [r0, r3]
 8005ab6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005aba:	460b      	mov	r3, r1
 8005abc:	2900      	cmp	r1, #0
 8005abe:	d1f5      	bne.n	8005aac <_printf_i+0x16c>
 8005ac0:	e7b9      	b.n	8005a36 <_printf_i+0xf6>
 8005ac2:	6813      	ldr	r3, [r2, #0]
 8005ac4:	6825      	ldr	r5, [r4, #0]
 8005ac6:	6961      	ldr	r1, [r4, #20]
 8005ac8:	1d18      	adds	r0, r3, #4
 8005aca:	6010      	str	r0, [r2, #0]
 8005acc:	0628      	lsls	r0, r5, #24
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	d501      	bpl.n	8005ad6 <_printf_i+0x196>
 8005ad2:	6019      	str	r1, [r3, #0]
 8005ad4:	e002      	b.n	8005adc <_printf_i+0x19c>
 8005ad6:	066a      	lsls	r2, r5, #25
 8005ad8:	d5fb      	bpl.n	8005ad2 <_printf_i+0x192>
 8005ada:	8019      	strh	r1, [r3, #0]
 8005adc:	2300      	movs	r3, #0
 8005ade:	6123      	str	r3, [r4, #16]
 8005ae0:	4665      	mov	r5, ip
 8005ae2:	e7b9      	b.n	8005a58 <_printf_i+0x118>
 8005ae4:	6813      	ldr	r3, [r2, #0]
 8005ae6:	1d19      	adds	r1, r3, #4
 8005ae8:	6011      	str	r1, [r2, #0]
 8005aea:	681d      	ldr	r5, [r3, #0]
 8005aec:	6862      	ldr	r2, [r4, #4]
 8005aee:	2100      	movs	r1, #0
 8005af0:	4628      	mov	r0, r5
 8005af2:	f7fa fb95 	bl	8000220 <memchr>
 8005af6:	b108      	cbz	r0, 8005afc <_printf_i+0x1bc>
 8005af8:	1b40      	subs	r0, r0, r5
 8005afa:	6060      	str	r0, [r4, #4]
 8005afc:	6863      	ldr	r3, [r4, #4]
 8005afe:	6123      	str	r3, [r4, #16]
 8005b00:	2300      	movs	r3, #0
 8005b02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b06:	e7a7      	b.n	8005a58 <_printf_i+0x118>
 8005b08:	6923      	ldr	r3, [r4, #16]
 8005b0a:	462a      	mov	r2, r5
 8005b0c:	4639      	mov	r1, r7
 8005b0e:	4630      	mov	r0, r6
 8005b10:	47c0      	blx	r8
 8005b12:	3001      	adds	r0, #1
 8005b14:	d0aa      	beq.n	8005a6c <_printf_i+0x12c>
 8005b16:	6823      	ldr	r3, [r4, #0]
 8005b18:	079b      	lsls	r3, r3, #30
 8005b1a:	d413      	bmi.n	8005b44 <_printf_i+0x204>
 8005b1c:	68e0      	ldr	r0, [r4, #12]
 8005b1e:	9b03      	ldr	r3, [sp, #12]
 8005b20:	4298      	cmp	r0, r3
 8005b22:	bfb8      	it	lt
 8005b24:	4618      	movlt	r0, r3
 8005b26:	e7a3      	b.n	8005a70 <_printf_i+0x130>
 8005b28:	2301      	movs	r3, #1
 8005b2a:	464a      	mov	r2, r9
 8005b2c:	4639      	mov	r1, r7
 8005b2e:	4630      	mov	r0, r6
 8005b30:	47c0      	blx	r8
 8005b32:	3001      	adds	r0, #1
 8005b34:	d09a      	beq.n	8005a6c <_printf_i+0x12c>
 8005b36:	3501      	adds	r5, #1
 8005b38:	68e3      	ldr	r3, [r4, #12]
 8005b3a:	9a03      	ldr	r2, [sp, #12]
 8005b3c:	1a9b      	subs	r3, r3, r2
 8005b3e:	42ab      	cmp	r3, r5
 8005b40:	dcf2      	bgt.n	8005b28 <_printf_i+0x1e8>
 8005b42:	e7eb      	b.n	8005b1c <_printf_i+0x1dc>
 8005b44:	2500      	movs	r5, #0
 8005b46:	f104 0919 	add.w	r9, r4, #25
 8005b4a:	e7f5      	b.n	8005b38 <_printf_i+0x1f8>
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1ac      	bne.n	8005aaa <_printf_i+0x16a>
 8005b50:	7803      	ldrb	r3, [r0, #0]
 8005b52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b56:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b5a:	e76c      	b.n	8005a36 <_printf_i+0xf6>
 8005b5c:	08005dc5 	.word	0x08005dc5
 8005b60:	08005dd6 	.word	0x08005dd6

08005b64 <memcpy>:
 8005b64:	b510      	push	{r4, lr}
 8005b66:	1e43      	subs	r3, r0, #1
 8005b68:	440a      	add	r2, r1
 8005b6a:	4291      	cmp	r1, r2
 8005b6c:	d100      	bne.n	8005b70 <memcpy+0xc>
 8005b6e:	bd10      	pop	{r4, pc}
 8005b70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b78:	e7f7      	b.n	8005b6a <memcpy+0x6>

08005b7a <memmove>:
 8005b7a:	4288      	cmp	r0, r1
 8005b7c:	b510      	push	{r4, lr}
 8005b7e:	eb01 0302 	add.w	r3, r1, r2
 8005b82:	d807      	bhi.n	8005b94 <memmove+0x1a>
 8005b84:	1e42      	subs	r2, r0, #1
 8005b86:	4299      	cmp	r1, r3
 8005b88:	d00a      	beq.n	8005ba0 <memmove+0x26>
 8005b8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b8e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005b92:	e7f8      	b.n	8005b86 <memmove+0xc>
 8005b94:	4283      	cmp	r3, r0
 8005b96:	d9f5      	bls.n	8005b84 <memmove+0xa>
 8005b98:	1881      	adds	r1, r0, r2
 8005b9a:	1ad2      	subs	r2, r2, r3
 8005b9c:	42d3      	cmn	r3, r2
 8005b9e:	d100      	bne.n	8005ba2 <memmove+0x28>
 8005ba0:	bd10      	pop	{r4, pc}
 8005ba2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ba6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005baa:	e7f7      	b.n	8005b9c <memmove+0x22>

08005bac <_free_r>:
 8005bac:	b538      	push	{r3, r4, r5, lr}
 8005bae:	4605      	mov	r5, r0
 8005bb0:	2900      	cmp	r1, #0
 8005bb2:	d045      	beq.n	8005c40 <_free_r+0x94>
 8005bb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bb8:	1f0c      	subs	r4, r1, #4
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	bfb8      	it	lt
 8005bbe:	18e4      	addlt	r4, r4, r3
 8005bc0:	f000 f8d2 	bl	8005d68 <__malloc_lock>
 8005bc4:	4a1f      	ldr	r2, [pc, #124]	; (8005c44 <_free_r+0x98>)
 8005bc6:	6813      	ldr	r3, [r2, #0]
 8005bc8:	4610      	mov	r0, r2
 8005bca:	b933      	cbnz	r3, 8005bda <_free_r+0x2e>
 8005bcc:	6063      	str	r3, [r4, #4]
 8005bce:	6014      	str	r4, [r2, #0]
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bd6:	f000 b8c8 	b.w	8005d6a <__malloc_unlock>
 8005bda:	42a3      	cmp	r3, r4
 8005bdc:	d90c      	bls.n	8005bf8 <_free_r+0x4c>
 8005bde:	6821      	ldr	r1, [r4, #0]
 8005be0:	1862      	adds	r2, r4, r1
 8005be2:	4293      	cmp	r3, r2
 8005be4:	bf04      	itt	eq
 8005be6:	681a      	ldreq	r2, [r3, #0]
 8005be8:	685b      	ldreq	r3, [r3, #4]
 8005bea:	6063      	str	r3, [r4, #4]
 8005bec:	bf04      	itt	eq
 8005bee:	1852      	addeq	r2, r2, r1
 8005bf0:	6022      	streq	r2, [r4, #0]
 8005bf2:	6004      	str	r4, [r0, #0]
 8005bf4:	e7ec      	b.n	8005bd0 <_free_r+0x24>
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	b10a      	cbz	r2, 8005c00 <_free_r+0x54>
 8005bfc:	42a2      	cmp	r2, r4
 8005bfe:	d9fa      	bls.n	8005bf6 <_free_r+0x4a>
 8005c00:	6819      	ldr	r1, [r3, #0]
 8005c02:	1858      	adds	r0, r3, r1
 8005c04:	42a0      	cmp	r0, r4
 8005c06:	d10b      	bne.n	8005c20 <_free_r+0x74>
 8005c08:	6820      	ldr	r0, [r4, #0]
 8005c0a:	4401      	add	r1, r0
 8005c0c:	1858      	adds	r0, r3, r1
 8005c0e:	4282      	cmp	r2, r0
 8005c10:	6019      	str	r1, [r3, #0]
 8005c12:	d1dd      	bne.n	8005bd0 <_free_r+0x24>
 8005c14:	6810      	ldr	r0, [r2, #0]
 8005c16:	6852      	ldr	r2, [r2, #4]
 8005c18:	605a      	str	r2, [r3, #4]
 8005c1a:	4401      	add	r1, r0
 8005c1c:	6019      	str	r1, [r3, #0]
 8005c1e:	e7d7      	b.n	8005bd0 <_free_r+0x24>
 8005c20:	d902      	bls.n	8005c28 <_free_r+0x7c>
 8005c22:	230c      	movs	r3, #12
 8005c24:	602b      	str	r3, [r5, #0]
 8005c26:	e7d3      	b.n	8005bd0 <_free_r+0x24>
 8005c28:	6820      	ldr	r0, [r4, #0]
 8005c2a:	1821      	adds	r1, r4, r0
 8005c2c:	428a      	cmp	r2, r1
 8005c2e:	bf04      	itt	eq
 8005c30:	6811      	ldreq	r1, [r2, #0]
 8005c32:	6852      	ldreq	r2, [r2, #4]
 8005c34:	6062      	str	r2, [r4, #4]
 8005c36:	bf04      	itt	eq
 8005c38:	1809      	addeq	r1, r1, r0
 8005c3a:	6021      	streq	r1, [r4, #0]
 8005c3c:	605c      	str	r4, [r3, #4]
 8005c3e:	e7c7      	b.n	8005bd0 <_free_r+0x24>
 8005c40:	bd38      	pop	{r3, r4, r5, pc}
 8005c42:	bf00      	nop
 8005c44:	20000090 	.word	0x20000090

08005c48 <_malloc_r>:
 8005c48:	b570      	push	{r4, r5, r6, lr}
 8005c4a:	1ccd      	adds	r5, r1, #3
 8005c4c:	f025 0503 	bic.w	r5, r5, #3
 8005c50:	3508      	adds	r5, #8
 8005c52:	2d0c      	cmp	r5, #12
 8005c54:	bf38      	it	cc
 8005c56:	250c      	movcc	r5, #12
 8005c58:	2d00      	cmp	r5, #0
 8005c5a:	4606      	mov	r6, r0
 8005c5c:	db01      	blt.n	8005c62 <_malloc_r+0x1a>
 8005c5e:	42a9      	cmp	r1, r5
 8005c60:	d903      	bls.n	8005c6a <_malloc_r+0x22>
 8005c62:	230c      	movs	r3, #12
 8005c64:	6033      	str	r3, [r6, #0]
 8005c66:	2000      	movs	r0, #0
 8005c68:	bd70      	pop	{r4, r5, r6, pc}
 8005c6a:	f000 f87d 	bl	8005d68 <__malloc_lock>
 8005c6e:	4a21      	ldr	r2, [pc, #132]	; (8005cf4 <_malloc_r+0xac>)
 8005c70:	6814      	ldr	r4, [r2, #0]
 8005c72:	4621      	mov	r1, r4
 8005c74:	b991      	cbnz	r1, 8005c9c <_malloc_r+0x54>
 8005c76:	4c20      	ldr	r4, [pc, #128]	; (8005cf8 <_malloc_r+0xb0>)
 8005c78:	6823      	ldr	r3, [r4, #0]
 8005c7a:	b91b      	cbnz	r3, 8005c84 <_malloc_r+0x3c>
 8005c7c:	4630      	mov	r0, r6
 8005c7e:	f000 f863 	bl	8005d48 <_sbrk_r>
 8005c82:	6020      	str	r0, [r4, #0]
 8005c84:	4629      	mov	r1, r5
 8005c86:	4630      	mov	r0, r6
 8005c88:	f000 f85e 	bl	8005d48 <_sbrk_r>
 8005c8c:	1c43      	adds	r3, r0, #1
 8005c8e:	d124      	bne.n	8005cda <_malloc_r+0x92>
 8005c90:	230c      	movs	r3, #12
 8005c92:	6033      	str	r3, [r6, #0]
 8005c94:	4630      	mov	r0, r6
 8005c96:	f000 f868 	bl	8005d6a <__malloc_unlock>
 8005c9a:	e7e4      	b.n	8005c66 <_malloc_r+0x1e>
 8005c9c:	680b      	ldr	r3, [r1, #0]
 8005c9e:	1b5b      	subs	r3, r3, r5
 8005ca0:	d418      	bmi.n	8005cd4 <_malloc_r+0x8c>
 8005ca2:	2b0b      	cmp	r3, #11
 8005ca4:	d90f      	bls.n	8005cc6 <_malloc_r+0x7e>
 8005ca6:	600b      	str	r3, [r1, #0]
 8005ca8:	50cd      	str	r5, [r1, r3]
 8005caa:	18cc      	adds	r4, r1, r3
 8005cac:	4630      	mov	r0, r6
 8005cae:	f000 f85c 	bl	8005d6a <__malloc_unlock>
 8005cb2:	f104 000b 	add.w	r0, r4, #11
 8005cb6:	1d23      	adds	r3, r4, #4
 8005cb8:	f020 0007 	bic.w	r0, r0, #7
 8005cbc:	1ac3      	subs	r3, r0, r3
 8005cbe:	d0d3      	beq.n	8005c68 <_malloc_r+0x20>
 8005cc0:	425a      	negs	r2, r3
 8005cc2:	50e2      	str	r2, [r4, r3]
 8005cc4:	e7d0      	b.n	8005c68 <_malloc_r+0x20>
 8005cc6:	428c      	cmp	r4, r1
 8005cc8:	684b      	ldr	r3, [r1, #4]
 8005cca:	bf16      	itet	ne
 8005ccc:	6063      	strne	r3, [r4, #4]
 8005cce:	6013      	streq	r3, [r2, #0]
 8005cd0:	460c      	movne	r4, r1
 8005cd2:	e7eb      	b.n	8005cac <_malloc_r+0x64>
 8005cd4:	460c      	mov	r4, r1
 8005cd6:	6849      	ldr	r1, [r1, #4]
 8005cd8:	e7cc      	b.n	8005c74 <_malloc_r+0x2c>
 8005cda:	1cc4      	adds	r4, r0, #3
 8005cdc:	f024 0403 	bic.w	r4, r4, #3
 8005ce0:	42a0      	cmp	r0, r4
 8005ce2:	d005      	beq.n	8005cf0 <_malloc_r+0xa8>
 8005ce4:	1a21      	subs	r1, r4, r0
 8005ce6:	4630      	mov	r0, r6
 8005ce8:	f000 f82e 	bl	8005d48 <_sbrk_r>
 8005cec:	3001      	adds	r0, #1
 8005cee:	d0cf      	beq.n	8005c90 <_malloc_r+0x48>
 8005cf0:	6025      	str	r5, [r4, #0]
 8005cf2:	e7db      	b.n	8005cac <_malloc_r+0x64>
 8005cf4:	20000090 	.word	0x20000090
 8005cf8:	20000094 	.word	0x20000094

08005cfc <_realloc_r>:
 8005cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cfe:	4607      	mov	r7, r0
 8005d00:	4614      	mov	r4, r2
 8005d02:	460e      	mov	r6, r1
 8005d04:	b921      	cbnz	r1, 8005d10 <_realloc_r+0x14>
 8005d06:	4611      	mov	r1, r2
 8005d08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005d0c:	f7ff bf9c 	b.w	8005c48 <_malloc_r>
 8005d10:	b922      	cbnz	r2, 8005d1c <_realloc_r+0x20>
 8005d12:	f7ff ff4b 	bl	8005bac <_free_r>
 8005d16:	4625      	mov	r5, r4
 8005d18:	4628      	mov	r0, r5
 8005d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d1c:	f000 f826 	bl	8005d6c <_malloc_usable_size_r>
 8005d20:	42a0      	cmp	r0, r4
 8005d22:	d20f      	bcs.n	8005d44 <_realloc_r+0x48>
 8005d24:	4621      	mov	r1, r4
 8005d26:	4638      	mov	r0, r7
 8005d28:	f7ff ff8e 	bl	8005c48 <_malloc_r>
 8005d2c:	4605      	mov	r5, r0
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	d0f2      	beq.n	8005d18 <_realloc_r+0x1c>
 8005d32:	4631      	mov	r1, r6
 8005d34:	4622      	mov	r2, r4
 8005d36:	f7ff ff15 	bl	8005b64 <memcpy>
 8005d3a:	4631      	mov	r1, r6
 8005d3c:	4638      	mov	r0, r7
 8005d3e:	f7ff ff35 	bl	8005bac <_free_r>
 8005d42:	e7e9      	b.n	8005d18 <_realloc_r+0x1c>
 8005d44:	4635      	mov	r5, r6
 8005d46:	e7e7      	b.n	8005d18 <_realloc_r+0x1c>

08005d48 <_sbrk_r>:
 8005d48:	b538      	push	{r3, r4, r5, lr}
 8005d4a:	4c06      	ldr	r4, [pc, #24]	; (8005d64 <_sbrk_r+0x1c>)
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	4605      	mov	r5, r0
 8005d50:	4608      	mov	r0, r1
 8005d52:	6023      	str	r3, [r4, #0]
 8005d54:	f7fb f92c 	bl	8000fb0 <_sbrk>
 8005d58:	1c43      	adds	r3, r0, #1
 8005d5a:	d102      	bne.n	8005d62 <_sbrk_r+0x1a>
 8005d5c:	6823      	ldr	r3, [r4, #0]
 8005d5e:	b103      	cbz	r3, 8005d62 <_sbrk_r+0x1a>
 8005d60:	602b      	str	r3, [r5, #0]
 8005d62:	bd38      	pop	{r3, r4, r5, pc}
 8005d64:	20000614 	.word	0x20000614

08005d68 <__malloc_lock>:
 8005d68:	4770      	bx	lr

08005d6a <__malloc_unlock>:
 8005d6a:	4770      	bx	lr

08005d6c <_malloc_usable_size_r>:
 8005d6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d70:	1f18      	subs	r0, r3, #4
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	bfbc      	itt	lt
 8005d76:	580b      	ldrlt	r3, [r1, r0]
 8005d78:	18c0      	addlt	r0, r0, r3
 8005d7a:	4770      	bx	lr

08005d7c <_init>:
 8005d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d7e:	bf00      	nop
 8005d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d82:	bc08      	pop	{r3}
 8005d84:	469e      	mov	lr, r3
 8005d86:	4770      	bx	lr

08005d88 <_fini>:
 8005d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d8a:	bf00      	nop
 8005d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d8e:	bc08      	pop	{r3}
 8005d90:	469e      	mov	lr, r3
 8005d92:	4770      	bx	lr
